<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

<#
    var sizes = new[] { 16 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.f) continue;
        if (!typ.arith) continue;
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        for (var i = 2; i <= 4; i++)
        {
            foreach (var size in sizes)
            {
                var byteSize = typ.size * size;
                var bitSize = 8 * byteSize;
                var num_vectors = Math.Max(1, bitSize / 512);
                bitSize = Math.Min(512, bitSize);

                var typeName = $"{typ.name}{i}_mt";
                var scalarName = $"{typ.compType}_mt";
                var simd_typeName = $"{typ.name}{i}";

                var bSize = typ.size * 8;
                var bTypeName = $"b{bSize}v{i}_mt";
#>
#region <#= typeName #>

public partial struct <#= typeName #>
{
    /// <summary>
    /// <code>e</code>
    /// </summary>
    public static <#= typeName #> E
    { 
        [MethodImpl(256 | 512)] 
        get => new(2.7182818284590452353602874713526624977572470936999595749669676277<#= typ.suffix #>); 
    }
    /// <summary>
    /// <code>log(2)</code>
    /// </summary>
    public static <#= typeName #> Log2
    { 
        [MethodImpl(256 | 512)] 
        get => new(0.6931471805599453094172321214581765680755001343602552541206800094<#= typ.suffix #>); 
    }
    /// <summary>
    /// <code>log(10)</code>
    /// </summary>
    public static <#= typeName #> Log10
    { 
        [MethodImpl(256 | 512)] 
        get => new(2.3025850929940456840179914546843642076011014886287729760333279009<#= typ.suffix #>);
    }
    /// <summary>
    /// <code>π</code>
    /// </summary>
    public static <#= typeName #> PI
    { 
        [MethodImpl(256 | 512)] 
        get => new(3.1415926535897932384626433832795028841971693993751058209749445923<#= typ.suffix #>);
    }
    /// <summary>
    /// <code>τ = 2 * π</code>
    /// </summary>
    public static <#= typeName #> Tau
    { 
        [MethodImpl(256 | 512)] 
        get => new(6.2831853071795864769252867665590057683943387987502116419498891846<#= typ.suffix #>);
    }
    /// <summary>
    /// <code>360 / τ</code>
    /// </summary>
    public static <#= typeName #> RadToDeg
    { 
        [MethodImpl(256 | 512)] 
        get => new(57.295779513082320876798154814105170332405472466564321549160243861<#= typ.suffix #>);
    }
    /// <summary>
    /// <code>τ / 360</code>
    /// </summary>
    public static <#= typeName #> DegToRad
    { 
        [MethodImpl(256 | 512)] 
        get => new(0.0174532925199432957692369076848861271344287188854172545609719144<#= typ.suffix #>);
    }
}

[Ex]
public static partial class math_mt
{
    #pragma warning disable CS1718
    // ReSharper disable once EqualExpressionComparison
    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isNaN([This] <#= typeName #> a) => a != a;
    #pragma warning restore CS1718

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isFinite([This] <#= typeName #> a) => abs(a) < <#= typ.simdComp #>.PositiveInfinity;

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isInf([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.isInf()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isPosInf([This] <#= typeName #> a) => a == <#= typ.simdComp #>.PositiveInfinity;

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isNegInf([This] <#= typeName #> a) => a == <#= typ.simdComp #>.NegativeInfinity;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> ceil([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.floor()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> floor([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.floor()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> round([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.round()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> trunc([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.trunc()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> mod([This] <#= typeName #> a, <#= typeName #> b)
    {
        var x = a;
        var y = b;
        var div = x / y;
        var flr = floor(div);
        return fnma(flr, y, x);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> mod([This] <#= scalarName #> a, <#= typeName #> b)
    {
        var x = a;
        var y = b;
        var div = x / y;
        var flr = floor(div);
        return fnma(flr, y, x);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> mod([This] <#= typeName #> a, <#= scalarName #> b)
    {
        var x = a;
        var y = b;
        var div = x / y;
        var flr = floor(div);
        return fnma(flr, y, x);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> mod([This] <#= typ.compType #> a, <#= typeName #> b)
    {
        var x = a;
        var y = b;
        var div = x / y;
        var flr = floor(div);
        return fnma(flr, y, x);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> mod([This] <#= typeName #> a, <#= typ.compType #> b)
    {
        var x = a;
        var y = b;
        var div = x / y;
        var flr = floor(div);
        return fnma(flr, y, x);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> rem([This] <#= typeName #> a, <#= typeName #> b)
    {
        var x = a;
        var y = b;
        var div = x / y;
        var flr = trunc(div);
        return fnma(flr, y, x);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> rem([This] <#= scalarName #> a, <#= typeName #> b)
    {
        var x = a;
        var y = b;
        var div = x / y;
        var flr = trunc(div);
        return fnma(flr, y, x);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> rem([This] <#= typeName #> a, <#= scalarName #> b)
    {
        var x = a;
        var y = b;
        var div = x / y;
        var flr = trunc(div);
        return fnma(flr, y, x);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> rem([This] <#= typ.compType #> a, <#= typeName #> b)
    {
        var x = a;
        var y = b;
        var div = x / y;
        var flr = trunc(div);
        return fnma(flr, y, x);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> rem([This] <#= typeName #> a, <#= typ.compType #> b)
    {
        var x = a;
        var y = b;
        var div = x / y;
        var flr = trunc(div);
        return fnma(flr, y, x);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> frac([This] <#= typeName #> a) => a - floor(a);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> modf([This] <#= typeName #> d, out <#= typeName #> i)
    {
        i = trunc(d);
        return d - i;
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> rcp([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"rcp(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> saturate([This] <#= typeName #> a) => a.clamp(default, <#= typeName #>.One);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> smoothstep(<#= typeName #> min, <#= typeName #> max, [This] <#= typeName #> a)
    {
        var t = saturate((a - min) / (max - min));
        return t * t * fnma(2.0<#= typ.suffix #>, t, 3.0<#= typ.suffix #>); // (3.0<#= typ.suffix #> - (2.0<#= typ.suffix #> * t))
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> reflect([This] <#= typeName #> i, <#= typeName #> n)
    {
        // i - 2<#= typ.suffix #> * n * dot(i, n);
        return fnma(2<#= typ.suffix #> * n, dot(i, n), i);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> project([This] <#= typeName #> a, <#= typeName #> onto) =>
        dot(a, onto) / dot(onto, onto) * onto;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> projectOnPlane([This] <#= typeName #> a, <#= typeName #> plane_normal) => 
        a - project(a, plane_normal);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> projectNormalized([This] <#= typeName #> a, <#= typeName #> onto) =>
        dot(a, onto) * onto;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> projectOnPlaneNormalized([This] <#= typeName #> a, <#= typeName #> plane_normal) => 
        a - projectNormalized(a, plane_normal);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> radians([This] <#= typeName #> a) => a * 0.0174532925199432957692369076848861271344287188854172545609719144<#= typ.suffix #>;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> degrees([This] <#= typeName #> a) => a * 57.295779513082320876798154814105170332405472466564321549160243861<#= typ.suffix #>;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> wrap([This] <#= typeName #> x, <#= typeName #> min, <#= typeName #> max)
    {
        var add = select(x >= <#= typeName #>.Zero, min, max);
        var off = x % (max - min);
        return add + off;
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> wrap([This] <#= typeName #> x, <#= scalarName #> min, <#= scalarName #> max)
    {
        var add = select(x >= <#= typeName #>.Zero, min, max);
        var off = x % (max - min);
        return add + off;
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> wrap([This] <#= typeName #> x, <#= typ.compType #> min, <#= typ.compType #> max)
    {
        var add = select(x >= <#= typeName #>.Zero, min, max);
        var off = x % (max - min);
        return add + off;
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"log(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log2([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"log2(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log([This] <#= typeName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"log(a.{Typ.xyzw[n]}, b.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log([This] <#= typeName #> a, <#= scalarName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"log(a.{Typ.xyzw[n]}, b)")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log([This] <#= scalarName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"log(a, b.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log10([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"log10(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> exp([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"exp(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> exp2([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"exp2(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> exp10([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"exp10(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> pow([This] <#= typeName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"pow(a.{Typ.xyzw[n]}, b.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> pow([This] <#= typeName #> a, <#= scalarName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"pow(a.{Typ.xyzw[n]}, b)")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> pow([This] <#= typeName #> a, <#= typ.compType #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"pow(a.{Typ.xyzw[n]}, b)")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> sqrt([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"sqrt(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> rsqrt([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"rsqrt(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= scalarName #> length([This] <#= typeName #> a) => dot(a, a).sqrt();

    [MethodImpl(256 | 512)]
    public static <#= scalarName #> distance([This] <#= typeName #> a, <#= typeName #> b) => length(b - a);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> normalize([This] <#= typeName #> a) => a * dot(a, a).rsqrt();

    [MethodImpl(256 | 512)]
    public static <#= typeName #> normalizeSafe([This] <#= typeName #> a, <#= typeName #> defaultValue = default)
    {
        var len = dot(a, a);
        return select(len > 1.175494351e-38<#= typ.suffix #>, a * rsqrt(len), defaultValue);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> step(<#= typeName #> threshold, [This] <#= typeName #> a) =>
        select(a >= threshold, <#= typeName #>.One, default);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> refract(<#= typeName #> i, <#= typeName #> n, [This] <#= typ.simdComp #> indexOfRefraction)
    {
        var ni = dot(n, i);
        var k = (<#= scalarName #>)(1.0<#= typ.suffix #> - indexOfRefraction * indexOfRefraction * (1.0<#= typ.suffix #> - ni * ni));
        return select(k >= 0.0<#= typ.suffix #>, indexOfRefraction * i - (<#= scalarName #>)((<#= scalarName #>)(indexOfRefraction * ni) + sqrt(k)) * n, default);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> projectSafe([This] <#= typeName #> a, <#= typeName #> onto, <#= typeName #> defaultValue = default) 
    {
        var proj = project(a, onto);
        return select(all(isFinite(proj)), proj, defaultValue);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> faceForward([This] <#= typeName #> n, <#= typeName #> i, <#= typeName #> ng) =>
        select(dot(ng, i) >= 0.0<#= typ.suffix #>, -n, n);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> sin([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"sin(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> cos([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"cos(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static (<#= typeName #> sin, <#= typeName #> cos) sincos([This] <#= typeName #> a)
    {
<#
                foreach (var n in Enumerable.Range(0, i))
                {
#>
        var (sin_<#= Typ.xyzw[n] #>, cos_<#= Typ.xyzw[n] #>) = sincos(a.<#= Typ.xyzw[n] #>);
<#
                }
#>
        return (
            new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"sin_{Typ.xyzw[n]}")) #>),
            new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"cos_{Typ.xyzw[n]}")) #>)
        );
    }

    [MethodImpl(256 | 512)]
    public static void sincos([This] <#= typeName #> a, out <#= typeName #> sin, out <#= typeName #> cos)
    {
<#
                foreach (var n in Enumerable.Range(0, i))
                {
#>
        var (sin_<#= Typ.xyzw[n] #>, cos_<#= Typ.xyzw[n] #>) = sincos(a.<#= Typ.xyzw[n] #>);
<#
                }
#>
        sin = new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"sin_{Typ.xyzw[n]}")) #>);
        cos = new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"cos_{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> tan([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"tan(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> asin([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"asin(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> acos([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"acos(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> atan([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"atan(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> atan2([This] <#= typeName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"atan2(a.{Typ.xyzw[n]}, b.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> sinh([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"sinh(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> cosh([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"cosh(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> tanh([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"tanh(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> asinh([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"asinh(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> acosh([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"acosh(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> atanh([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"atanh(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> chgsign([This] <#= typeName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"chgsign(a.{Typ.xyzw[n]}, b.{Typ.xyzw[n]})")) #>);
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
