// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region float3_mt4

public partial struct float3_mt4 
{
    public readonly float2_mt4 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly float2_mt4 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public float2_mt4 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt4 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt4 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt4 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt4 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public float2_mt4 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly float2_mt4 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly float2_mt4 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public float2_mt4 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt4 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt4 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt4 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt4 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public float2_mt4 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly float2_mt4 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly float2_mt4 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // float3_mt4

#region float3_mt8

public partial struct float3_mt8 
{
    public readonly float2_mt8 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly float2_mt8 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public float2_mt8 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt8 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt8 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt8 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt8 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public float2_mt8 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly float2_mt8 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly float2_mt8 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public float2_mt8 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt8 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt8 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt8 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt8 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public float2_mt8 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly float2_mt8 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly float2_mt8 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // float3_mt8

#region float3_mt16

public partial struct float3_mt16 
{
    public readonly float2_mt16 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly float2_mt16 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public float2_mt16 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt16 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt16 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt16 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt16 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public float2_mt16 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly float2_mt16 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly float2_mt16 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public float2_mt16 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt16 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt16 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt16 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt16 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public float2_mt16 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly float2_mt16 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly float2_mt16 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // float3_mt16

#region double3_mt4

public partial struct double3_mt4 
{
    public readonly double2_mt4 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly double2_mt4 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public double2_mt4 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt4 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt4 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt4 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt4 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public double2_mt4 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly double2_mt4 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly double2_mt4 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public double2_mt4 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt4 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt4 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt4 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt4 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public double2_mt4 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly double2_mt4 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly double2_mt4 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // double3_mt4

#region double3_mt8

public partial struct double3_mt8 
{
    public readonly double2_mt8 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly double2_mt8 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public double2_mt8 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt8 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt8 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt8 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt8 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public double2_mt8 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly double2_mt8 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly double2_mt8 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public double2_mt8 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt8 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt8 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt8 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt8 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public double2_mt8 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly double2_mt8 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly double2_mt8 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // double3_mt8

#region double3_mt16

public partial struct double3_mt16 
{
    public readonly double2_mt16 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly double2_mt16 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public double2_mt16 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt16 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt16 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt16 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt16 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public double2_mt16 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly double2_mt16 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly double2_mt16 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public double2_mt16 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt16 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt16 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt16 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt16 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public double2_mt16 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly double2_mt16 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly double2_mt16 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // double3_mt16

#region int3_mt4

public partial struct int3_mt4 
{
    public readonly int2_mt4 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly int2_mt4 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public int2_mt4 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt4 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt4 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt4 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt4 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public int2_mt4 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly int2_mt4 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly int2_mt4 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public int2_mt4 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt4 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt4 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt4 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt4 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public int2_mt4 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly int2_mt4 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly int2_mt4 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // int3_mt4

#region int3_mt8

public partial struct int3_mt8 
{
    public readonly int2_mt8 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly int2_mt8 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public int2_mt8 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt8 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt8 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt8 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt8 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public int2_mt8 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly int2_mt8 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly int2_mt8 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public int2_mt8 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt8 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt8 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt8 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt8 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public int2_mt8 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly int2_mt8 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly int2_mt8 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // int3_mt8

#region int3_mt16

public partial struct int3_mt16 
{
    public readonly int2_mt16 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly int2_mt16 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public int2_mt16 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt16 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt16 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt16 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt16 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public int2_mt16 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly int2_mt16 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly int2_mt16 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public int2_mt16 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt16 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt16 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt16 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt16 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public int2_mt16 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly int2_mt16 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly int2_mt16 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // int3_mt16

#region uint3_mt4

public partial struct uint3_mt4 
{
    public readonly uint2_mt4 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly uint2_mt4 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public uint2_mt4 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt4 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt4 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt4 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt4 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public uint2_mt4 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly uint2_mt4 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly uint2_mt4 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public uint2_mt4 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt4 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt4 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt4 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt4 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public uint2_mt4 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly uint2_mt4 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly uint2_mt4 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // uint3_mt4

#region uint3_mt8

public partial struct uint3_mt8 
{
    public readonly uint2_mt8 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly uint2_mt8 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public uint2_mt8 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt8 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt8 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt8 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt8 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public uint2_mt8 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly uint2_mt8 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly uint2_mt8 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public uint2_mt8 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt8 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt8 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt8 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt8 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public uint2_mt8 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly uint2_mt8 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly uint2_mt8 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // uint3_mt8

#region uint3_mt16

public partial struct uint3_mt16 
{
    public readonly uint2_mt16 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly uint2_mt16 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public uint2_mt16 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt16 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt16 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt16 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt16 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public uint2_mt16 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly uint2_mt16 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly uint2_mt16 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public uint2_mt16 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt16 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt16 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt16 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt16 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public uint2_mt16 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly uint2_mt16 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly uint2_mt16 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // uint3_mt16

#region long3_mt4

public partial struct long3_mt4 
{
    public readonly long2_mt4 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly long2_mt4 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public long2_mt4 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt4 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt4 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt4 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt4 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public long2_mt4 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly long2_mt4 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly long2_mt4 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public long2_mt4 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt4 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt4 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt4 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt4 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public long2_mt4 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly long2_mt4 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly long2_mt4 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // long3_mt4

#region long3_mt8

public partial struct long3_mt8 
{
    public readonly long2_mt8 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly long2_mt8 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public long2_mt8 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt8 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt8 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt8 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt8 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public long2_mt8 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly long2_mt8 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly long2_mt8 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public long2_mt8 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt8 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt8 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt8 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt8 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public long2_mt8 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly long2_mt8 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly long2_mt8 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // long3_mt8

#region long3_mt16

public partial struct long3_mt16 
{
    public readonly long2_mt16 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly long2_mt16 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public long2_mt16 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt16 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt16 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt16 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt16 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public long2_mt16 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly long2_mt16 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly long2_mt16 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public long2_mt16 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt16 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt16 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt16 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt16 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public long2_mt16 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly long2_mt16 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly long2_mt16 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // long3_mt16

#region ulong3_mt4

public partial struct ulong3_mt4 
{
    public readonly ulong2_mt4 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly ulong2_mt4 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public ulong2_mt4 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt4 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt4 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt4 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt4 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public ulong2_mt4 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly ulong2_mt4 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly ulong2_mt4 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public ulong2_mt4 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt4 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt4 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt4 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt4 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public ulong2_mt4 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly ulong2_mt4 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly ulong2_mt4 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // ulong3_mt4

#region ulong3_mt8

public partial struct ulong3_mt8 
{
    public readonly ulong2_mt8 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly ulong2_mt8 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public ulong2_mt8 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt8 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt8 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt8 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt8 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public ulong2_mt8 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly ulong2_mt8 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly ulong2_mt8 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public ulong2_mt8 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt8 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt8 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt8 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt8 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public ulong2_mt8 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly ulong2_mt8 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly ulong2_mt8 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // ulong3_mt8

#region ulong3_mt16

public partial struct ulong3_mt16 
{
    public readonly ulong2_mt16 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly ulong2_mt16 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public ulong2_mt16 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt16 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt16 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt16 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt16 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public ulong2_mt16 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly ulong2_mt16 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly ulong2_mt16 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public ulong2_mt16 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt16 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt16 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt16 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt16 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public ulong2_mt16 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly ulong2_mt16 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly ulong2_mt16 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // ulong3_mt16

#region b32v3_mt4

public partial struct b32v3_mt4 
{
    public readonly b32v2_mt4 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b32v2_mt4 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b32v2_mt4 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt4 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt4 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt4 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt4 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b32v2_mt4 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b32v2_mt4 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b32v2_mt4 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b32v2_mt4 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt4 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt4 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt4 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt4 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b32v2_mt4 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b32v2_mt4 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b32v2_mt4 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // b32v3_mt4

#region b32v3_mt8

public partial struct b32v3_mt8 
{
    public readonly b32v2_mt8 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b32v2_mt8 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b32v2_mt8 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt8 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt8 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt8 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt8 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b32v2_mt8 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b32v2_mt8 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b32v2_mt8 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b32v2_mt8 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt8 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt8 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt8 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt8 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b32v2_mt8 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b32v2_mt8 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b32v2_mt8 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // b32v3_mt8

#region b32v3_mt16

public partial struct b32v3_mt16 
{
    public readonly b32v2_mt16 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b32v2_mt16 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b32v2_mt16 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt16 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt16 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt16 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt16 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b32v2_mt16 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b32v2_mt16 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b32v2_mt16 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b32v2_mt16 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt16 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt16 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt16 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt16 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b32v2_mt16 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b32v2_mt16 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b32v2_mt16 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // b32v3_mt16

#region b64v3_mt4

public partial struct b64v3_mt4 
{
    public readonly b64v2_mt4 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b64v2_mt4 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b64v2_mt4 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt4 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt4 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt4 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt4 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b64v2_mt4 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b64v2_mt4 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b64v2_mt4 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b64v2_mt4 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt4 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt4 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt4 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt4 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b64v2_mt4 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b64v2_mt4 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b64v2_mt4 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // b64v3_mt4

#region b64v3_mt8

public partial struct b64v3_mt8 
{
    public readonly b64v2_mt8 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b64v2_mt8 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b64v2_mt8 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt8 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt8 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt8 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt8 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b64v2_mt8 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b64v2_mt8 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b64v2_mt8 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b64v2_mt8 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt8 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt8 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt8 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt8 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b64v2_mt8 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b64v2_mt8 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b64v2_mt8 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // b64v3_mt8

#region b64v3_mt16

public partial struct b64v3_mt16 
{
    public readonly b64v2_mt16 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b64v2_mt16 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b64v2_mt16 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt16 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt16 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt16 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt16 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b64v2_mt16 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b64v2_mt16 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b64v2_mt16 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b64v2_mt16 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt16 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt16 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt16 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt16 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b64v2_mt16 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b64v2_mt16 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b64v2_mt16 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // b64v3_mt16
