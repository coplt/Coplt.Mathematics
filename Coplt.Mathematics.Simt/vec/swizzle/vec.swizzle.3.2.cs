// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region float3_mt

public partial struct float3_mt 
{
    public readonly float2_mt xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly float2_mt rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public float2_mt xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public float2_mt gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly float2_mt yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly float2_mt gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public float2_mt yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public float2_mt bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly float2_mt zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly float2_mt bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // float3_mt

#region double3_mt

public partial struct double3_mt 
{
    public readonly double2_mt xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly double2_mt rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public double2_mt xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public double2_mt gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly double2_mt yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly double2_mt gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public double2_mt yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public double2_mt bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly double2_mt zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly double2_mt bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // double3_mt

#region int3_mt

public partial struct int3_mt 
{
    public readonly int2_mt xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly int2_mt rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public int2_mt xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public int2_mt gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly int2_mt yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly int2_mt gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public int2_mt yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public int2_mt bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly int2_mt zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly int2_mt bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // int3_mt

#region uint3_mt

public partial struct uint3_mt 
{
    public readonly uint2_mt xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly uint2_mt rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public uint2_mt xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public uint2_mt gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly uint2_mt yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly uint2_mt gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public uint2_mt yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public uint2_mt bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly uint2_mt zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly uint2_mt bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // uint3_mt

#region long3_mt

public partial struct long3_mt 
{
    public readonly long2_mt xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly long2_mt rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public long2_mt xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public long2_mt gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly long2_mt yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly long2_mt gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public long2_mt yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public long2_mt bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly long2_mt zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly long2_mt bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // long3_mt

#region ulong3_mt

public partial struct ulong3_mt 
{
    public readonly ulong2_mt xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly ulong2_mt rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public ulong2_mt xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public ulong2_mt gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly ulong2_mt yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly ulong2_mt gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public ulong2_mt yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public ulong2_mt bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly ulong2_mt zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly ulong2_mt bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // ulong3_mt

#region b32v3_mt

public partial struct b32v3_mt 
{
    public readonly b32v2_mt xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b32v2_mt rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b32v2_mt xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b32v2_mt gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b32v2_mt yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b32v2_mt gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b32v2_mt yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b32v2_mt bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b32v2_mt zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b32v2_mt bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // b32v3_mt

#region b64v3_mt

public partial struct b64v3_mt 
{
    public readonly b64v2_mt xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b64v2_mt rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b64v2_mt xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b64v2_mt gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b64v2_mt yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b64v2_mt gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b64v2_mt yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b64v2_mt bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b64v2_mt zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b64v2_mt bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
}

#endregion // b64v3_mt
