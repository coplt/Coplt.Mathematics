// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region float4_mt

public partial struct float4_mt 
{
    public readonly float3_mt xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly float3_mt rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly float3_mt xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly float3_mt rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public float3_mt xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public float3_mt rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public float3_mt xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public float3_mt rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly float3_mt xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly float3_mt rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public float3_mt xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public float3_mt rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly float3_mt xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly float3_mt rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public float3_mt xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public float3_mt rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly float3_mt xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly float3_mt rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public float3_mt xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public float3_mt rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public float3_mt xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public float3_mt rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly float3_mt xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly float3_mt raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly float3_mt yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly float3_mt grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public float3_mt yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public float3_mt grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public float3_mt yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public float3_mt gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly float3_mt yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly float3_mt ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly float3_mt yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly float3_mt gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public float3_mt yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public float3_mt gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly float3_mt yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly float3_mt gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public float3_mt yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public float3_mt gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public float3_mt ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public float3_mt gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly float3_mt ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly float3_mt gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public float3_mt ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public float3_mt gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly float3_mt yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly float3_mt gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly float3_mt zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly float3_mt brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public float3_mt zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public float3_mt brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly float3_mt zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly float3_mt brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public float3_mt zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public float3_mt bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public float3_mt zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public float3_mt bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly float3_mt zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly float3_mt bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public float3_mt zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public float3_mt bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly float3_mt zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly float3_mt bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly float3_mt zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly float3_mt bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public float3_mt zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public float3_mt bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public float3_mt zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public float3_mt bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly float3_mt zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly float3_mt bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly float3_mt zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly float3_mt baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly float3_mt wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly float3_mt arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public float3_mt wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public float3_mt arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public float3_mt wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public float3_mt arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly float3_mt wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly float3_mt ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public float3_mt wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public float3_mt agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly float3_mt wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly float3_mt agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public float3_mt wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public float3_mt agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly float3_mt wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly float3_mt aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public float3_mt wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public float3_mt abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public float3_mt wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public float3_mt abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly float3_mt wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly float3_mt abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly float3_mt wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly float3_mt aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly float3_mt wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly float3_mt aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly float3_mt wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly float3_mt aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly float3_mt wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly float3_mt aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly float3_mt www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly float3_mt aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // float4_mt

#region double4_mt

public partial struct double4_mt 
{
    public readonly double3_mt xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly double3_mt rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly double3_mt xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly double3_mt rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public double3_mt xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public double3_mt rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public double3_mt xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public double3_mt rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly double3_mt xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly double3_mt rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public double3_mt xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public double3_mt rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly double3_mt xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly double3_mt rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public double3_mt xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public double3_mt rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly double3_mt xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly double3_mt rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public double3_mt xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public double3_mt rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public double3_mt xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public double3_mt rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly double3_mt xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly double3_mt raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly double3_mt yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly double3_mt grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public double3_mt yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public double3_mt grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public double3_mt yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public double3_mt gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly double3_mt yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly double3_mt ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly double3_mt yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly double3_mt gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public double3_mt yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public double3_mt gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly double3_mt yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly double3_mt gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public double3_mt yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public double3_mt gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public double3_mt ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public double3_mt gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly double3_mt ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly double3_mt gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public double3_mt ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public double3_mt gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly double3_mt yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly double3_mt gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly double3_mt zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly double3_mt brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public double3_mt zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public double3_mt brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly double3_mt zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly double3_mt brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public double3_mt zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public double3_mt bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public double3_mt zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public double3_mt bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly double3_mt zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly double3_mt bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public double3_mt zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public double3_mt bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly double3_mt zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly double3_mt bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly double3_mt zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly double3_mt bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public double3_mt zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public double3_mt bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public double3_mt zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public double3_mt bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly double3_mt zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly double3_mt bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly double3_mt zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly double3_mt baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly double3_mt wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly double3_mt arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public double3_mt wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public double3_mt arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public double3_mt wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public double3_mt arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly double3_mt wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly double3_mt ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public double3_mt wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public double3_mt agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly double3_mt wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly double3_mt agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public double3_mt wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public double3_mt agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly double3_mt wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly double3_mt aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public double3_mt wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public double3_mt abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public double3_mt wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public double3_mt abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly double3_mt wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly double3_mt abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly double3_mt wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly double3_mt aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly double3_mt wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly double3_mt aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly double3_mt wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly double3_mt aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly double3_mt wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly double3_mt aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly double3_mt www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly double3_mt aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // double4_mt

#region int4_mt

public partial struct int4_mt 
{
    public readonly int3_mt xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly int3_mt rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly int3_mt xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly int3_mt rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public int3_mt xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public int3_mt rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public int3_mt xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public int3_mt rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly int3_mt xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly int3_mt rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public int3_mt xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public int3_mt rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly int3_mt xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly int3_mt rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public int3_mt xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public int3_mt rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly int3_mt xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly int3_mt rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public int3_mt xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public int3_mt rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public int3_mt xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public int3_mt rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly int3_mt xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly int3_mt raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly int3_mt yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly int3_mt grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public int3_mt yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public int3_mt grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public int3_mt yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public int3_mt gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly int3_mt yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly int3_mt ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly int3_mt yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly int3_mt gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public int3_mt yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public int3_mt gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly int3_mt yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly int3_mt gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public int3_mt yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public int3_mt gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public int3_mt ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public int3_mt gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly int3_mt ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly int3_mt gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public int3_mt ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public int3_mt gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly int3_mt yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly int3_mt gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly int3_mt zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly int3_mt brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public int3_mt zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public int3_mt brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly int3_mt zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly int3_mt brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public int3_mt zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public int3_mt bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public int3_mt zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public int3_mt bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly int3_mt zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly int3_mt bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public int3_mt zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public int3_mt bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly int3_mt zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly int3_mt bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly int3_mt zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly int3_mt bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public int3_mt zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public int3_mt bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public int3_mt zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public int3_mt bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly int3_mt zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly int3_mt bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly int3_mt zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly int3_mt baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly int3_mt wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly int3_mt arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public int3_mt wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public int3_mt arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public int3_mt wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public int3_mt arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly int3_mt wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly int3_mt ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public int3_mt wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public int3_mt agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly int3_mt wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly int3_mt agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public int3_mt wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public int3_mt agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly int3_mt wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly int3_mt aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public int3_mt wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public int3_mt abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public int3_mt wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public int3_mt abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly int3_mt wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly int3_mt abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly int3_mt wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly int3_mt aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly int3_mt wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly int3_mt aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly int3_mt wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly int3_mt aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly int3_mt wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly int3_mt aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly int3_mt www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly int3_mt aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // int4_mt

#region uint4_mt

public partial struct uint4_mt 
{
    public readonly uint3_mt xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly uint3_mt rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly uint3_mt xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly uint3_mt rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public uint3_mt xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public uint3_mt rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public uint3_mt xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public uint3_mt rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly uint3_mt xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly uint3_mt rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public uint3_mt xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public uint3_mt rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly uint3_mt xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly uint3_mt rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public uint3_mt xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public uint3_mt rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly uint3_mt xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly uint3_mt rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public uint3_mt xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public uint3_mt rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public uint3_mt xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public uint3_mt rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly uint3_mt xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly uint3_mt raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly uint3_mt yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly uint3_mt grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public uint3_mt yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public uint3_mt grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public uint3_mt yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public uint3_mt gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly uint3_mt yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly uint3_mt ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly uint3_mt yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly uint3_mt gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public uint3_mt yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public uint3_mt gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly uint3_mt yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly uint3_mt gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public uint3_mt yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public uint3_mt gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public uint3_mt ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public uint3_mt gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly uint3_mt ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly uint3_mt gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public uint3_mt ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public uint3_mt gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly uint3_mt yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly uint3_mt gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly uint3_mt zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly uint3_mt brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public uint3_mt zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public uint3_mt brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly uint3_mt zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly uint3_mt brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public uint3_mt zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public uint3_mt bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public uint3_mt zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public uint3_mt bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly uint3_mt zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly uint3_mt bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public uint3_mt zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public uint3_mt bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly uint3_mt zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly uint3_mt bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly uint3_mt zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly uint3_mt bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public uint3_mt zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public uint3_mt bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public uint3_mt zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public uint3_mt bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly uint3_mt zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly uint3_mt bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly uint3_mt zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly uint3_mt baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly uint3_mt wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly uint3_mt arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public uint3_mt wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public uint3_mt arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public uint3_mt wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public uint3_mt arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly uint3_mt wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly uint3_mt ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public uint3_mt wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public uint3_mt agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly uint3_mt wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly uint3_mt agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public uint3_mt wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public uint3_mt agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly uint3_mt wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly uint3_mt aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public uint3_mt wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public uint3_mt abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public uint3_mt wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public uint3_mt abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly uint3_mt wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly uint3_mt abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly uint3_mt wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly uint3_mt aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly uint3_mt wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly uint3_mt aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly uint3_mt wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly uint3_mt aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly uint3_mt wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly uint3_mt aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly uint3_mt www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly uint3_mt aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // uint4_mt

#region long4_mt

public partial struct long4_mt 
{
    public readonly long3_mt xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly long3_mt rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly long3_mt xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly long3_mt rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public long3_mt xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public long3_mt rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public long3_mt xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public long3_mt rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly long3_mt xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly long3_mt rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public long3_mt xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public long3_mt rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly long3_mt xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly long3_mt rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public long3_mt xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public long3_mt rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly long3_mt xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly long3_mt rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public long3_mt xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public long3_mt rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public long3_mt xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public long3_mt rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly long3_mt xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly long3_mt raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly long3_mt yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly long3_mt grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public long3_mt yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public long3_mt grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public long3_mt yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public long3_mt gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly long3_mt yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly long3_mt ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly long3_mt yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly long3_mt gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public long3_mt yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public long3_mt gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly long3_mt yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly long3_mt gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public long3_mt yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public long3_mt gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public long3_mt ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public long3_mt gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly long3_mt ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly long3_mt gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public long3_mt ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public long3_mt gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly long3_mt yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly long3_mt gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly long3_mt zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly long3_mt brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public long3_mt zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public long3_mt brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly long3_mt zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly long3_mt brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public long3_mt zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public long3_mt bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public long3_mt zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public long3_mt bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly long3_mt zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly long3_mt bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public long3_mt zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public long3_mt bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly long3_mt zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly long3_mt bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly long3_mt zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly long3_mt bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public long3_mt zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public long3_mt bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public long3_mt zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public long3_mt bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly long3_mt zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly long3_mt bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly long3_mt zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly long3_mt baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly long3_mt wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly long3_mt arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public long3_mt wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public long3_mt arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public long3_mt wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public long3_mt arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly long3_mt wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly long3_mt ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public long3_mt wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public long3_mt agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly long3_mt wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly long3_mt agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public long3_mt wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public long3_mt agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly long3_mt wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly long3_mt aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public long3_mt wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public long3_mt abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public long3_mt wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public long3_mt abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly long3_mt wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly long3_mt abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly long3_mt wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly long3_mt aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly long3_mt wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly long3_mt aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly long3_mt wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly long3_mt aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly long3_mt wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly long3_mt aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly long3_mt www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly long3_mt aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // long4_mt

#region ulong4_mt

public partial struct ulong4_mt 
{
    public readonly ulong3_mt xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly ulong3_mt rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly ulong3_mt xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly ulong3_mt rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public ulong3_mt xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public ulong3_mt rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public ulong3_mt xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public ulong3_mt rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly ulong3_mt xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly ulong3_mt rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public ulong3_mt xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public ulong3_mt rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly ulong3_mt xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly ulong3_mt rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public ulong3_mt xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public ulong3_mt rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly ulong3_mt xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly ulong3_mt rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public ulong3_mt xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public ulong3_mt rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public ulong3_mt xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public ulong3_mt rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly ulong3_mt xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly ulong3_mt raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly ulong3_mt yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly ulong3_mt grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public ulong3_mt yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public ulong3_mt grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public ulong3_mt yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public ulong3_mt gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly ulong3_mt yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly ulong3_mt ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly ulong3_mt yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly ulong3_mt gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public ulong3_mt yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public ulong3_mt gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly ulong3_mt yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly ulong3_mt gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public ulong3_mt yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public ulong3_mt gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public ulong3_mt ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public ulong3_mt gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly ulong3_mt ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly ulong3_mt gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public ulong3_mt ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public ulong3_mt gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly ulong3_mt yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly ulong3_mt gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly ulong3_mt zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly ulong3_mt brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public ulong3_mt zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public ulong3_mt brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly ulong3_mt zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly ulong3_mt brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public ulong3_mt zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public ulong3_mt bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public ulong3_mt zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public ulong3_mt bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly ulong3_mt zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly ulong3_mt bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public ulong3_mt zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public ulong3_mt bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly ulong3_mt zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly ulong3_mt bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly ulong3_mt zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly ulong3_mt bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public ulong3_mt zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public ulong3_mt bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public ulong3_mt zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public ulong3_mt bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly ulong3_mt zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly ulong3_mt bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly ulong3_mt zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly ulong3_mt baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly ulong3_mt wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly ulong3_mt arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public ulong3_mt wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public ulong3_mt arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public ulong3_mt wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public ulong3_mt arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly ulong3_mt wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly ulong3_mt ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public ulong3_mt wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public ulong3_mt agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly ulong3_mt wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly ulong3_mt agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public ulong3_mt wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public ulong3_mt agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly ulong3_mt wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly ulong3_mt aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public ulong3_mt wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public ulong3_mt abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public ulong3_mt wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public ulong3_mt abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly ulong3_mt wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly ulong3_mt abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly ulong3_mt wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly ulong3_mt aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly ulong3_mt wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly ulong3_mt aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly ulong3_mt wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly ulong3_mt aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly ulong3_mt wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly ulong3_mt aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly ulong3_mt www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly ulong3_mt aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // ulong4_mt

#region b32v4_mt

public partial struct b32v4_mt 
{
    public readonly b32v3_mt xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b32v3_mt rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b32v3_mt xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b32v3_mt rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b32v3_mt xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b32v3_mt rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b32v3_mt xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public b32v3_mt rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly b32v3_mt xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b32v3_mt rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b32v3_mt xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public b32v3_mt rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly b32v3_mt xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b32v3_mt rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public b32v3_mt xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public b32v3_mt rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly b32v3_mt xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly b32v3_mt rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public b32v3_mt xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b32v3_mt rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b32v3_mt xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public b32v3_mt rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly b32v3_mt xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b32v3_mt raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b32v3_mt yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b32v3_mt grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b32v3_mt yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b32v3_mt grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b32v3_mt yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public b32v3_mt gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly b32v3_mt yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b32v3_mt ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b32v3_mt yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly b32v3_mt gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public b32v3_mt yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public b32v3_mt gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly b32v3_mt yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b32v3_mt gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public b32v3_mt yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b32v3_mt gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b32v3_mt ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public b32v3_mt gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly b32v3_mt ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly b32v3_mt gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public b32v3_mt ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public b32v3_mt gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly b32v3_mt yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b32v3_mt gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b32v3_mt zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b32v3_mt brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b32v3_mt zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public b32v3_mt brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly b32v3_mt zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b32v3_mt brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b32v3_mt zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b32v3_mt bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b32v3_mt zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public b32v3_mt bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly b32v3_mt zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b32v3_mt bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public b32v3_mt zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public b32v3_mt bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly b32v3_mt zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b32v3_mt bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b32v3_mt zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly b32v3_mt bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public b32v3_mt zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b32v3_mt bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b32v3_mt zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public b32v3_mt bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly b32v3_mt zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b32v3_mt bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b32v3_mt zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b32v3_mt baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b32v3_mt wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly b32v3_mt arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public b32v3_mt wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b32v3_mt arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b32v3_mt wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public b32v3_mt arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly b32v3_mt wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly b32v3_mt ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public b32v3_mt wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public b32v3_mt agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly b32v3_mt wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly b32v3_mt agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public b32v3_mt wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public b32v3_mt agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly b32v3_mt wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly b32v3_mt aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public b32v3_mt wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b32v3_mt abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b32v3_mt wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public b32v3_mt abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly b32v3_mt wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b32v3_mt abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b32v3_mt wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b32v3_mt aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b32v3_mt wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b32v3_mt aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b32v3_mt wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b32v3_mt aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b32v3_mt wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b32v3_mt aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b32v3_mt www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly b32v3_mt aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // b32v4_mt

#region b64v4_mt

public partial struct b64v4_mt 
{
    public readonly b64v3_mt xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b64v3_mt rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b64v3_mt xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b64v3_mt rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b64v3_mt xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b64v3_mt rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b64v3_mt xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public b64v3_mt rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly b64v3_mt xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b64v3_mt rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b64v3_mt xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public b64v3_mt rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly b64v3_mt xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b64v3_mt rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public b64v3_mt xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public b64v3_mt rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly b64v3_mt xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly b64v3_mt rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public b64v3_mt xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b64v3_mt rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b64v3_mt xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public b64v3_mt rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly b64v3_mt xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b64v3_mt raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b64v3_mt yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b64v3_mt grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b64v3_mt yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b64v3_mt grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b64v3_mt yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public b64v3_mt gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly b64v3_mt yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b64v3_mt ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b64v3_mt yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly b64v3_mt gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public b64v3_mt yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public b64v3_mt gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly b64v3_mt yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b64v3_mt gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public b64v3_mt yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b64v3_mt gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b64v3_mt ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public b64v3_mt gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly b64v3_mt ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly b64v3_mt gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public b64v3_mt ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public b64v3_mt gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly b64v3_mt yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b64v3_mt gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b64v3_mt zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b64v3_mt brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b64v3_mt zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public b64v3_mt brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly b64v3_mt zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b64v3_mt brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b64v3_mt zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b64v3_mt bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b64v3_mt zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public b64v3_mt bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly b64v3_mt zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b64v3_mt bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public b64v3_mt zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public b64v3_mt bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly b64v3_mt zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b64v3_mt bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b64v3_mt zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly b64v3_mt bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public b64v3_mt zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b64v3_mt bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b64v3_mt zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public b64v3_mt bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly b64v3_mt zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b64v3_mt bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b64v3_mt zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b64v3_mt baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b64v3_mt wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly b64v3_mt arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public b64v3_mt wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b64v3_mt arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b64v3_mt wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public b64v3_mt arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly b64v3_mt wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly b64v3_mt ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public b64v3_mt wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public b64v3_mt agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly b64v3_mt wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly b64v3_mt agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public b64v3_mt wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public b64v3_mt agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly b64v3_mt wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly b64v3_mt aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public b64v3_mt wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b64v3_mt abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b64v3_mt wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public b64v3_mt abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly b64v3_mt wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b64v3_mt abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b64v3_mt wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b64v3_mt aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b64v3_mt wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b64v3_mt aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b64v3_mt wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b64v3_mt aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b64v3_mt wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b64v3_mt aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b64v3_mt www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly b64v3_mt aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // b64v4_mt
