// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region float2_mt4

public partial struct float2_mt4 
{
    public readonly float3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly float3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly float3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly float3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly float3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // float2_mt4

#region float2_mt8

public partial struct float2_mt8 
{
    public readonly float3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly float3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly float3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly float3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly float3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // float2_mt8

#region float2_mt16

public partial struct float2_mt16 
{
    public readonly float3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly float3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly float3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly float3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly float3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // float2_mt16

#region double2_mt4

public partial struct double2_mt4 
{
    public readonly double3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly double3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly double3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly double3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly double3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // double2_mt4

#region double2_mt8

public partial struct double2_mt8 
{
    public readonly double3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly double3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly double3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly double3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly double3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // double2_mt8

#region double2_mt16

public partial struct double2_mt16 
{
    public readonly double3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly double3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly double3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly double3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly double3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // double2_mt16

#region int2_mt4

public partial struct int2_mt4 
{
    public readonly int3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly int3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly int3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly int3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly int3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // int2_mt4

#region int2_mt8

public partial struct int2_mt8 
{
    public readonly int3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly int3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly int3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly int3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly int3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // int2_mt8

#region int2_mt16

public partial struct int2_mt16 
{
    public readonly int3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly int3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly int3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly int3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly int3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // int2_mt16

#region uint2_mt4

public partial struct uint2_mt4 
{
    public readonly uint3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly uint3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly uint3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly uint3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly uint3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // uint2_mt4

#region uint2_mt8

public partial struct uint2_mt8 
{
    public readonly uint3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly uint3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly uint3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly uint3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly uint3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // uint2_mt8

#region uint2_mt16

public partial struct uint2_mt16 
{
    public readonly uint3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly uint3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly uint3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly uint3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly uint3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // uint2_mt16

#region long2_mt4

public partial struct long2_mt4 
{
    public readonly long3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly long3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly long3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly long3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly long3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // long2_mt4

#region long2_mt8

public partial struct long2_mt8 
{
    public readonly long3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly long3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly long3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly long3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly long3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // long2_mt8

#region long2_mt16

public partial struct long2_mt16 
{
    public readonly long3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly long3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly long3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly long3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly long3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // long2_mt16

#region ulong2_mt4

public partial struct ulong2_mt4 
{
    public readonly ulong3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly ulong3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly ulong3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly ulong3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly ulong3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // ulong2_mt4

#region ulong2_mt8

public partial struct ulong2_mt8 
{
    public readonly ulong3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly ulong3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly ulong3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly ulong3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly ulong3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // ulong2_mt8

#region ulong2_mt16

public partial struct ulong2_mt16 
{
    public readonly ulong3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly ulong3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly ulong3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly ulong3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly ulong3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // ulong2_mt16

#region b32v2_mt4

public partial struct b32v2_mt4 
{
    public readonly b32v3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b32v3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b32v3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b32v3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b32v3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // b32v2_mt4

#region b32v2_mt8

public partial struct b32v2_mt8 
{
    public readonly b32v3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b32v3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b32v3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b32v3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b32v3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // b32v2_mt8

#region b32v2_mt16

public partial struct b32v2_mt16 
{
    public readonly b32v3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b32v3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b32v3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b32v3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b32v3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // b32v2_mt16

#region b64v2_mt4

public partial struct b64v2_mt4 
{
    public readonly b64v3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b64v3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b64v3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b64v3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b64v3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // b64v2_mt4

#region b64v2_mt8

public partial struct b64v2_mt8 
{
    public readonly b64v3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b64v3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b64v3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b64v3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b64v3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // b64v2_mt8

#region b64v2_mt16

public partial struct b64v2_mt16 
{
    public readonly b64v3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b64v3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b64v3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b64v3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b64v3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
}

#endregion // b64v2_mt16
