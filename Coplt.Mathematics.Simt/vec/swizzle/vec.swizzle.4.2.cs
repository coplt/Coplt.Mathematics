// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region float4_mt

public partial struct float4_mt 
{
    public readonly float2_mt xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly float2_mt rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public float2_mt xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public float2_mt ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public float2_mt yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public float2_mt gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly float2_mt yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly float2_mt gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public float2_mt yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public float2_mt ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public float2_mt zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public float2_mt bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly float2_mt zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly float2_mt bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public float2_mt zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public float2_mt ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public float2_mt wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public float2_mt ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public float2_mt wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public float2_mt ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public float2_mt wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public float2_mt ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly float2_mt ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly float2_mt aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // float4_mt

#region double4_mt

public partial struct double4_mt 
{
    public readonly double2_mt xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly double2_mt rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public double2_mt xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public double2_mt ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public double2_mt yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public double2_mt gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly double2_mt yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly double2_mt gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public double2_mt yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public double2_mt ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public double2_mt zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public double2_mt bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly double2_mt zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly double2_mt bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public double2_mt zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public double2_mt ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public double2_mt wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public double2_mt ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public double2_mt wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public double2_mt ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public double2_mt wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public double2_mt ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly double2_mt ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly double2_mt aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // double4_mt

#region int4_mt

public partial struct int4_mt 
{
    public readonly int2_mt xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly int2_mt rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public int2_mt xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public int2_mt ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public int2_mt yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public int2_mt gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly int2_mt yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly int2_mt gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public int2_mt yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public int2_mt ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public int2_mt zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public int2_mt bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly int2_mt zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly int2_mt bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public int2_mt zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public int2_mt ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public int2_mt wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public int2_mt ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public int2_mt wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public int2_mt ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public int2_mt wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public int2_mt ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly int2_mt ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly int2_mt aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // int4_mt

#region uint4_mt

public partial struct uint4_mt 
{
    public readonly uint2_mt xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly uint2_mt rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public uint2_mt xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public uint2_mt ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public uint2_mt yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public uint2_mt gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly uint2_mt yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly uint2_mt gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public uint2_mt yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public uint2_mt ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public uint2_mt zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public uint2_mt bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly uint2_mt zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly uint2_mt bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public uint2_mt zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public uint2_mt ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public uint2_mt wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public uint2_mt ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public uint2_mt wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public uint2_mt ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public uint2_mt wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public uint2_mt ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly uint2_mt ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly uint2_mt aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // uint4_mt

#region long4_mt

public partial struct long4_mt 
{
    public readonly long2_mt xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly long2_mt rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public long2_mt xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public long2_mt ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public long2_mt yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public long2_mt gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly long2_mt yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly long2_mt gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public long2_mt yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public long2_mt ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public long2_mt zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public long2_mt bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly long2_mt zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly long2_mt bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public long2_mt zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public long2_mt ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public long2_mt wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public long2_mt ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public long2_mt wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public long2_mt ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public long2_mt wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public long2_mt ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly long2_mt ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly long2_mt aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // long4_mt

#region ulong4_mt

public partial struct ulong4_mt 
{
    public readonly ulong2_mt xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly ulong2_mt rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public ulong2_mt xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public ulong2_mt ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public ulong2_mt yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public ulong2_mt gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly ulong2_mt yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly ulong2_mt gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public ulong2_mt yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public ulong2_mt ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public ulong2_mt zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public ulong2_mt bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly ulong2_mt zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly ulong2_mt bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public ulong2_mt zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public ulong2_mt ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public ulong2_mt wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public ulong2_mt ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public ulong2_mt wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public ulong2_mt ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public ulong2_mt wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public ulong2_mt ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly ulong2_mt ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly ulong2_mt aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // ulong4_mt

#region b32v4_mt

public partial struct b32v4_mt 
{
    public readonly b32v2_mt xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b32v2_mt rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b32v2_mt xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b32v2_mt ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b32v2_mt yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b32v2_mt gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b32v2_mt yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b32v2_mt gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b32v2_mt yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b32v2_mt ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b32v2_mt zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b32v2_mt bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b32v2_mt zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b32v2_mt bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public b32v2_mt zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b32v2_mt ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b32v2_mt wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b32v2_mt ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b32v2_mt wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b32v2_mt ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b32v2_mt wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public b32v2_mt ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly b32v2_mt ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly b32v2_mt aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // b32v4_mt

#region b64v4_mt

public partial struct b64v4_mt 
{
    public readonly b64v2_mt xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b64v2_mt rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b64v2_mt xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b64v2_mt ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b64v2_mt yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b64v2_mt gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b64v2_mt yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b64v2_mt gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b64v2_mt yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b64v2_mt ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b64v2_mt zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b64v2_mt bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b64v2_mt zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b64v2_mt bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public b64v2_mt zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b64v2_mt ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b64v2_mt wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b64v2_mt ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b64v2_mt wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b64v2_mt ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b64v2_mt wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public b64v2_mt ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly b64v2_mt ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly b64v2_mt aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // b64v4_mt
