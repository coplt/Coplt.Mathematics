// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region float4_mt

public partial struct float4_mt 
{
    [MethodImpl(256 | 512)]
    public float4_mt(float2_mt xy, float2_mt zw)
    {
        this.x = xy.x;
        this.y = xy.y;
        this.z = zw.x;
        this.w = zw.y;
    }

    [MethodImpl(256 | 512)]
    public float4_mt(float2_mt xy, float_mt z, float_mt w)
    {
        this.x = xy.x;
        this.y = xy.y;
        this.z = z;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    public float4_mt(float_mt x, float_mt y, float2_mt zw)
    {
        this.x = x;
        this.y = y;
        this.z = zw.x;
        this.w = zw.y;
    }

    [MethodImpl(256 | 512)]
    public float4_mt(float_mt x, float2_mt yz, float_mt w)
    {
        this.x = x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    internal float4_mt(float2_mt xw, float2_mt yz, merge_xw_yz _)
    {
        this.x = xw.x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = xw.y;
    }

    [MethodImpl(256 | 512)]
    internal float4_mt(float2_mt xw, float_mt y, float_mt z, insert_yz _)
    {
        this.x = xw.x;
        this.y = y;
        this.z = z;
        this.w = xw.y;
    }

    [MethodImpl(256 | 512)]
    internal float4_mt(float2_mt xz, float2_mt yw, merge_xz_yw _)
    {
        this.x = xz.x;
        this.y = yw.x;
        this.z = xz.y;
        this.w = yw.y;
    }

    [MethodImpl(256 | 512)]
    internal float4_mt(float2_mt xz, float_mt y, float_mt w, insert_yw _)
    {
        this.x = xz.x;
        this.y = y;
        this.z = xz.y;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    internal float4_mt(float2_mt yw, float_mt x, float_mt z, insert_xz _)
    {
        this.x = x;
        this.y = yw.x;
        this.z = z;
        this.w = yw.y;
    }
}

public static partial class ctor_mt
{
    [MethodImpl(256 | 512)]
    public static float4_mt float4_mt(float2_mt xy, float2_mt zw) => new(xy, zw);

    [MethodImpl(256 | 512)]
    public static float4_mt float4_mt(float2_mt xy, float_mt z, float_mt w) => new(xy, z, w);

    [MethodImpl(256 | 512)]
    public static float4_mt float4_mt(float_mt x, float_mt y, float2_mt zw) => new(x, y, zw);

    [MethodImpl(256 | 512)]
    public static float4_mt float4_mt(float_mt x, float2_mt yz, float_mt w) => new(x, yz, w);
}

public static partial class math_mt_ex
{
    /// <summary>
    /// Insert Z W component
    /// <code>(Z, W) -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Izw(this float2_mt xy, float2_mt zw) => new(xy, zw);

    /// <summary>
    /// Insert X Y component
    /// <code>(X, Y) -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Ixy(this float2_mt zw, float2_mt xy) => new(xy, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>(Y, Z) -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Iyz(this float2_mt xw, float2_mt yz) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert X W component
    /// <code>(X, W) -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Ixw(this float2_mt yz, float2_mt xw) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert Y W component
    /// <code>(Y, W) -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Iyw(this float2_mt xz, float2_mt yw) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>(X, Z) -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Ixz(this float2_mt yw, float2_mt xz) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert Z W component
    /// <code>Z W -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Izw(this float2_mt xy, float_mt z, float_mt w) => new(xy, z, w);

    /// <summary>
    /// Insert X Y component
    /// <code>X Y -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Ixy(this float2_mt zw, float_mt x, float_mt y) => new(x, y, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>Y Z -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Iyz(this float2_mt xw, float_mt y, float_mt z) => new(xw, y, z, new insert_yz());

    /// <summary>
    /// Insert X W component
    /// <code>X W -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Ixw(this float2_mt yz, float_mt x, float_mt w) => new(x, yz, w);

    /// <summary>
    /// Insert Y W component
    /// <code>Y W -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Iyw(this float2_mt xz, float_mt y, float_mt w) => new(xz, y, w, new insert_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>X Z -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Ixz(this float2_mt yw, float_mt x, float_mt z) => new(yw, x, z, new insert_xz());
}

#endregion // float4_mt

#region double4_mt

public partial struct double4_mt 
{
    [MethodImpl(256 | 512)]
    public double4_mt(double2_mt xy, double2_mt zw)
    {
        this.x = xy.x;
        this.y = xy.y;
        this.z = zw.x;
        this.w = zw.y;
    }

    [MethodImpl(256 | 512)]
    public double4_mt(double2_mt xy, double_mt z, double_mt w)
    {
        this.x = xy.x;
        this.y = xy.y;
        this.z = z;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    public double4_mt(double_mt x, double_mt y, double2_mt zw)
    {
        this.x = x;
        this.y = y;
        this.z = zw.x;
        this.w = zw.y;
    }

    [MethodImpl(256 | 512)]
    public double4_mt(double_mt x, double2_mt yz, double_mt w)
    {
        this.x = x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    internal double4_mt(double2_mt xw, double2_mt yz, merge_xw_yz _)
    {
        this.x = xw.x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = xw.y;
    }

    [MethodImpl(256 | 512)]
    internal double4_mt(double2_mt xw, double_mt y, double_mt z, insert_yz _)
    {
        this.x = xw.x;
        this.y = y;
        this.z = z;
        this.w = xw.y;
    }

    [MethodImpl(256 | 512)]
    internal double4_mt(double2_mt xz, double2_mt yw, merge_xz_yw _)
    {
        this.x = xz.x;
        this.y = yw.x;
        this.z = xz.y;
        this.w = yw.y;
    }

    [MethodImpl(256 | 512)]
    internal double4_mt(double2_mt xz, double_mt y, double_mt w, insert_yw _)
    {
        this.x = xz.x;
        this.y = y;
        this.z = xz.y;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    internal double4_mt(double2_mt yw, double_mt x, double_mt z, insert_xz _)
    {
        this.x = x;
        this.y = yw.x;
        this.z = z;
        this.w = yw.y;
    }
}

public static partial class ctor_mt
{
    [MethodImpl(256 | 512)]
    public static double4_mt double4_mt(double2_mt xy, double2_mt zw) => new(xy, zw);

    [MethodImpl(256 | 512)]
    public static double4_mt double4_mt(double2_mt xy, double_mt z, double_mt w) => new(xy, z, w);

    [MethodImpl(256 | 512)]
    public static double4_mt double4_mt(double_mt x, double_mt y, double2_mt zw) => new(x, y, zw);

    [MethodImpl(256 | 512)]
    public static double4_mt double4_mt(double_mt x, double2_mt yz, double_mt w) => new(x, yz, w);
}

public static partial class math_mt_ex
{
    /// <summary>
    /// Insert Z W component
    /// <code>(Z, W) -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Izw(this double2_mt xy, double2_mt zw) => new(xy, zw);

    /// <summary>
    /// Insert X Y component
    /// <code>(X, Y) -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Ixy(this double2_mt zw, double2_mt xy) => new(xy, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>(Y, Z) -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Iyz(this double2_mt xw, double2_mt yz) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert X W component
    /// <code>(X, W) -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Ixw(this double2_mt yz, double2_mt xw) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert Y W component
    /// <code>(Y, W) -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Iyw(this double2_mt xz, double2_mt yw) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>(X, Z) -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Ixz(this double2_mt yw, double2_mt xz) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert Z W component
    /// <code>Z W -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Izw(this double2_mt xy, double_mt z, double_mt w) => new(xy, z, w);

    /// <summary>
    /// Insert X Y component
    /// <code>X Y -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Ixy(this double2_mt zw, double_mt x, double_mt y) => new(x, y, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>Y Z -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Iyz(this double2_mt xw, double_mt y, double_mt z) => new(xw, y, z, new insert_yz());

    /// <summary>
    /// Insert X W component
    /// <code>X W -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Ixw(this double2_mt yz, double_mt x, double_mt w) => new(x, yz, w);

    /// <summary>
    /// Insert Y W component
    /// <code>Y W -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Iyw(this double2_mt xz, double_mt y, double_mt w) => new(xz, y, w, new insert_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>X Z -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Ixz(this double2_mt yw, double_mt x, double_mt z) => new(yw, x, z, new insert_xz());
}

#endregion // double4_mt

#region int4_mt

public partial struct int4_mt 
{
    [MethodImpl(256 | 512)]
    public int4_mt(int2_mt xy, int2_mt zw)
    {
        this.x = xy.x;
        this.y = xy.y;
        this.z = zw.x;
        this.w = zw.y;
    }

    [MethodImpl(256 | 512)]
    public int4_mt(int2_mt xy, int_mt z, int_mt w)
    {
        this.x = xy.x;
        this.y = xy.y;
        this.z = z;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    public int4_mt(int_mt x, int_mt y, int2_mt zw)
    {
        this.x = x;
        this.y = y;
        this.z = zw.x;
        this.w = zw.y;
    }

    [MethodImpl(256 | 512)]
    public int4_mt(int_mt x, int2_mt yz, int_mt w)
    {
        this.x = x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    internal int4_mt(int2_mt xw, int2_mt yz, merge_xw_yz _)
    {
        this.x = xw.x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = xw.y;
    }

    [MethodImpl(256 | 512)]
    internal int4_mt(int2_mt xw, int_mt y, int_mt z, insert_yz _)
    {
        this.x = xw.x;
        this.y = y;
        this.z = z;
        this.w = xw.y;
    }

    [MethodImpl(256 | 512)]
    internal int4_mt(int2_mt xz, int2_mt yw, merge_xz_yw _)
    {
        this.x = xz.x;
        this.y = yw.x;
        this.z = xz.y;
        this.w = yw.y;
    }

    [MethodImpl(256 | 512)]
    internal int4_mt(int2_mt xz, int_mt y, int_mt w, insert_yw _)
    {
        this.x = xz.x;
        this.y = y;
        this.z = xz.y;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    internal int4_mt(int2_mt yw, int_mt x, int_mt z, insert_xz _)
    {
        this.x = x;
        this.y = yw.x;
        this.z = z;
        this.w = yw.y;
    }
}

public static partial class ctor_mt
{
    [MethodImpl(256 | 512)]
    public static int4_mt int4_mt(int2_mt xy, int2_mt zw) => new(xy, zw);

    [MethodImpl(256 | 512)]
    public static int4_mt int4_mt(int2_mt xy, int_mt z, int_mt w) => new(xy, z, w);

    [MethodImpl(256 | 512)]
    public static int4_mt int4_mt(int_mt x, int_mt y, int2_mt zw) => new(x, y, zw);

    [MethodImpl(256 | 512)]
    public static int4_mt int4_mt(int_mt x, int2_mt yz, int_mt w) => new(x, yz, w);
}

public static partial class math_mt_ex
{
    /// <summary>
    /// Insert Z W component
    /// <code>(Z, W) -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Izw(this int2_mt xy, int2_mt zw) => new(xy, zw);

    /// <summary>
    /// Insert X Y component
    /// <code>(X, Y) -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Ixy(this int2_mt zw, int2_mt xy) => new(xy, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>(Y, Z) -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Iyz(this int2_mt xw, int2_mt yz) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert X W component
    /// <code>(X, W) -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Ixw(this int2_mt yz, int2_mt xw) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert Y W component
    /// <code>(Y, W) -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Iyw(this int2_mt xz, int2_mt yw) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>(X, Z) -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Ixz(this int2_mt yw, int2_mt xz) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert Z W component
    /// <code>Z W -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Izw(this int2_mt xy, int_mt z, int_mt w) => new(xy, z, w);

    /// <summary>
    /// Insert X Y component
    /// <code>X Y -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Ixy(this int2_mt zw, int_mt x, int_mt y) => new(x, y, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>Y Z -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Iyz(this int2_mt xw, int_mt y, int_mt z) => new(xw, y, z, new insert_yz());

    /// <summary>
    /// Insert X W component
    /// <code>X W -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Ixw(this int2_mt yz, int_mt x, int_mt w) => new(x, yz, w);

    /// <summary>
    /// Insert Y W component
    /// <code>Y W -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Iyw(this int2_mt xz, int_mt y, int_mt w) => new(xz, y, w, new insert_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>X Z -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Ixz(this int2_mt yw, int_mt x, int_mt z) => new(yw, x, z, new insert_xz());
}

#endregion // int4_mt

#region uint4_mt

public partial struct uint4_mt 
{
    [MethodImpl(256 | 512)]
    public uint4_mt(uint2_mt xy, uint2_mt zw)
    {
        this.x = xy.x;
        this.y = xy.y;
        this.z = zw.x;
        this.w = zw.y;
    }

    [MethodImpl(256 | 512)]
    public uint4_mt(uint2_mt xy, uint_mt z, uint_mt w)
    {
        this.x = xy.x;
        this.y = xy.y;
        this.z = z;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    public uint4_mt(uint_mt x, uint_mt y, uint2_mt zw)
    {
        this.x = x;
        this.y = y;
        this.z = zw.x;
        this.w = zw.y;
    }

    [MethodImpl(256 | 512)]
    public uint4_mt(uint_mt x, uint2_mt yz, uint_mt w)
    {
        this.x = x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    internal uint4_mt(uint2_mt xw, uint2_mt yz, merge_xw_yz _)
    {
        this.x = xw.x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = xw.y;
    }

    [MethodImpl(256 | 512)]
    internal uint4_mt(uint2_mt xw, uint_mt y, uint_mt z, insert_yz _)
    {
        this.x = xw.x;
        this.y = y;
        this.z = z;
        this.w = xw.y;
    }

    [MethodImpl(256 | 512)]
    internal uint4_mt(uint2_mt xz, uint2_mt yw, merge_xz_yw _)
    {
        this.x = xz.x;
        this.y = yw.x;
        this.z = xz.y;
        this.w = yw.y;
    }

    [MethodImpl(256 | 512)]
    internal uint4_mt(uint2_mt xz, uint_mt y, uint_mt w, insert_yw _)
    {
        this.x = xz.x;
        this.y = y;
        this.z = xz.y;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    internal uint4_mt(uint2_mt yw, uint_mt x, uint_mt z, insert_xz _)
    {
        this.x = x;
        this.y = yw.x;
        this.z = z;
        this.w = yw.y;
    }
}

public static partial class ctor_mt
{
    [MethodImpl(256 | 512)]
    public static uint4_mt uint4_mt(uint2_mt xy, uint2_mt zw) => new(xy, zw);

    [MethodImpl(256 | 512)]
    public static uint4_mt uint4_mt(uint2_mt xy, uint_mt z, uint_mt w) => new(xy, z, w);

    [MethodImpl(256 | 512)]
    public static uint4_mt uint4_mt(uint_mt x, uint_mt y, uint2_mt zw) => new(x, y, zw);

    [MethodImpl(256 | 512)]
    public static uint4_mt uint4_mt(uint_mt x, uint2_mt yz, uint_mt w) => new(x, yz, w);
}

public static partial class math_mt_ex
{
    /// <summary>
    /// Insert Z W component
    /// <code>(Z, W) -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Izw(this uint2_mt xy, uint2_mt zw) => new(xy, zw);

    /// <summary>
    /// Insert X Y component
    /// <code>(X, Y) -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Ixy(this uint2_mt zw, uint2_mt xy) => new(xy, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>(Y, Z) -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Iyz(this uint2_mt xw, uint2_mt yz) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert X W component
    /// <code>(X, W) -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Ixw(this uint2_mt yz, uint2_mt xw) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert Y W component
    /// <code>(Y, W) -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Iyw(this uint2_mt xz, uint2_mt yw) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>(X, Z) -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Ixz(this uint2_mt yw, uint2_mt xz) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert Z W component
    /// <code>Z W -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Izw(this uint2_mt xy, uint_mt z, uint_mt w) => new(xy, z, w);

    /// <summary>
    /// Insert X Y component
    /// <code>X Y -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Ixy(this uint2_mt zw, uint_mt x, uint_mt y) => new(x, y, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>Y Z -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Iyz(this uint2_mt xw, uint_mt y, uint_mt z) => new(xw, y, z, new insert_yz());

    /// <summary>
    /// Insert X W component
    /// <code>X W -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Ixw(this uint2_mt yz, uint_mt x, uint_mt w) => new(x, yz, w);

    /// <summary>
    /// Insert Y W component
    /// <code>Y W -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Iyw(this uint2_mt xz, uint_mt y, uint_mt w) => new(xz, y, w, new insert_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>X Z -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Ixz(this uint2_mt yw, uint_mt x, uint_mt z) => new(yw, x, z, new insert_xz());
}

#endregion // uint4_mt

#region long4_mt

public partial struct long4_mt 
{
    [MethodImpl(256 | 512)]
    public long4_mt(long2_mt xy, long2_mt zw)
    {
        this.x = xy.x;
        this.y = xy.y;
        this.z = zw.x;
        this.w = zw.y;
    }

    [MethodImpl(256 | 512)]
    public long4_mt(long2_mt xy, long_mt z, long_mt w)
    {
        this.x = xy.x;
        this.y = xy.y;
        this.z = z;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    public long4_mt(long_mt x, long_mt y, long2_mt zw)
    {
        this.x = x;
        this.y = y;
        this.z = zw.x;
        this.w = zw.y;
    }

    [MethodImpl(256 | 512)]
    public long4_mt(long_mt x, long2_mt yz, long_mt w)
    {
        this.x = x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    internal long4_mt(long2_mt xw, long2_mt yz, merge_xw_yz _)
    {
        this.x = xw.x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = xw.y;
    }

    [MethodImpl(256 | 512)]
    internal long4_mt(long2_mt xw, long_mt y, long_mt z, insert_yz _)
    {
        this.x = xw.x;
        this.y = y;
        this.z = z;
        this.w = xw.y;
    }

    [MethodImpl(256 | 512)]
    internal long4_mt(long2_mt xz, long2_mt yw, merge_xz_yw _)
    {
        this.x = xz.x;
        this.y = yw.x;
        this.z = xz.y;
        this.w = yw.y;
    }

    [MethodImpl(256 | 512)]
    internal long4_mt(long2_mt xz, long_mt y, long_mt w, insert_yw _)
    {
        this.x = xz.x;
        this.y = y;
        this.z = xz.y;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    internal long4_mt(long2_mt yw, long_mt x, long_mt z, insert_xz _)
    {
        this.x = x;
        this.y = yw.x;
        this.z = z;
        this.w = yw.y;
    }
}

public static partial class ctor_mt
{
    [MethodImpl(256 | 512)]
    public static long4_mt long4_mt(long2_mt xy, long2_mt zw) => new(xy, zw);

    [MethodImpl(256 | 512)]
    public static long4_mt long4_mt(long2_mt xy, long_mt z, long_mt w) => new(xy, z, w);

    [MethodImpl(256 | 512)]
    public static long4_mt long4_mt(long_mt x, long_mt y, long2_mt zw) => new(x, y, zw);

    [MethodImpl(256 | 512)]
    public static long4_mt long4_mt(long_mt x, long2_mt yz, long_mt w) => new(x, yz, w);
}

public static partial class math_mt_ex
{
    /// <summary>
    /// Insert Z W component
    /// <code>(Z, W) -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Izw(this long2_mt xy, long2_mt zw) => new(xy, zw);

    /// <summary>
    /// Insert X Y component
    /// <code>(X, Y) -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Ixy(this long2_mt zw, long2_mt xy) => new(xy, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>(Y, Z) -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Iyz(this long2_mt xw, long2_mt yz) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert X W component
    /// <code>(X, W) -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Ixw(this long2_mt yz, long2_mt xw) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert Y W component
    /// <code>(Y, W) -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Iyw(this long2_mt xz, long2_mt yw) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>(X, Z) -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Ixz(this long2_mt yw, long2_mt xz) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert Z W component
    /// <code>Z W -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Izw(this long2_mt xy, long_mt z, long_mt w) => new(xy, z, w);

    /// <summary>
    /// Insert X Y component
    /// <code>X Y -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Ixy(this long2_mt zw, long_mt x, long_mt y) => new(x, y, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>Y Z -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Iyz(this long2_mt xw, long_mt y, long_mt z) => new(xw, y, z, new insert_yz());

    /// <summary>
    /// Insert X W component
    /// <code>X W -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Ixw(this long2_mt yz, long_mt x, long_mt w) => new(x, yz, w);

    /// <summary>
    /// Insert Y W component
    /// <code>Y W -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Iyw(this long2_mt xz, long_mt y, long_mt w) => new(xz, y, w, new insert_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>X Z -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Ixz(this long2_mt yw, long_mt x, long_mt z) => new(yw, x, z, new insert_xz());
}

#endregion // long4_mt

#region ulong4_mt

public partial struct ulong4_mt 
{
    [MethodImpl(256 | 512)]
    public ulong4_mt(ulong2_mt xy, ulong2_mt zw)
    {
        this.x = xy.x;
        this.y = xy.y;
        this.z = zw.x;
        this.w = zw.y;
    }

    [MethodImpl(256 | 512)]
    public ulong4_mt(ulong2_mt xy, ulong_mt z, ulong_mt w)
    {
        this.x = xy.x;
        this.y = xy.y;
        this.z = z;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    public ulong4_mt(ulong_mt x, ulong_mt y, ulong2_mt zw)
    {
        this.x = x;
        this.y = y;
        this.z = zw.x;
        this.w = zw.y;
    }

    [MethodImpl(256 | 512)]
    public ulong4_mt(ulong_mt x, ulong2_mt yz, ulong_mt w)
    {
        this.x = x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    internal ulong4_mt(ulong2_mt xw, ulong2_mt yz, merge_xw_yz _)
    {
        this.x = xw.x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = xw.y;
    }

    [MethodImpl(256 | 512)]
    internal ulong4_mt(ulong2_mt xw, ulong_mt y, ulong_mt z, insert_yz _)
    {
        this.x = xw.x;
        this.y = y;
        this.z = z;
        this.w = xw.y;
    }

    [MethodImpl(256 | 512)]
    internal ulong4_mt(ulong2_mt xz, ulong2_mt yw, merge_xz_yw _)
    {
        this.x = xz.x;
        this.y = yw.x;
        this.z = xz.y;
        this.w = yw.y;
    }

    [MethodImpl(256 | 512)]
    internal ulong4_mt(ulong2_mt xz, ulong_mt y, ulong_mt w, insert_yw _)
    {
        this.x = xz.x;
        this.y = y;
        this.z = xz.y;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    internal ulong4_mt(ulong2_mt yw, ulong_mt x, ulong_mt z, insert_xz _)
    {
        this.x = x;
        this.y = yw.x;
        this.z = z;
        this.w = yw.y;
    }
}

public static partial class ctor_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4_mt ulong4_mt(ulong2_mt xy, ulong2_mt zw) => new(xy, zw);

    [MethodImpl(256 | 512)]
    public static ulong4_mt ulong4_mt(ulong2_mt xy, ulong_mt z, ulong_mt w) => new(xy, z, w);

    [MethodImpl(256 | 512)]
    public static ulong4_mt ulong4_mt(ulong_mt x, ulong_mt y, ulong2_mt zw) => new(x, y, zw);

    [MethodImpl(256 | 512)]
    public static ulong4_mt ulong4_mt(ulong_mt x, ulong2_mt yz, ulong_mt w) => new(x, yz, w);
}

public static partial class math_mt_ex
{
    /// <summary>
    /// Insert Z W component
    /// <code>(Z, W) -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Izw(this ulong2_mt xy, ulong2_mt zw) => new(xy, zw);

    /// <summary>
    /// Insert X Y component
    /// <code>(X, Y) -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Ixy(this ulong2_mt zw, ulong2_mt xy) => new(xy, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>(Y, Z) -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Iyz(this ulong2_mt xw, ulong2_mt yz) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert X W component
    /// <code>(X, W) -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Ixw(this ulong2_mt yz, ulong2_mt xw) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert Y W component
    /// <code>(Y, W) -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Iyw(this ulong2_mt xz, ulong2_mt yw) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>(X, Z) -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Ixz(this ulong2_mt yw, ulong2_mt xz) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert Z W component
    /// <code>Z W -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Izw(this ulong2_mt xy, ulong_mt z, ulong_mt w) => new(xy, z, w);

    /// <summary>
    /// Insert X Y component
    /// <code>X Y -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Ixy(this ulong2_mt zw, ulong_mt x, ulong_mt y) => new(x, y, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>Y Z -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Iyz(this ulong2_mt xw, ulong_mt y, ulong_mt z) => new(xw, y, z, new insert_yz());

    /// <summary>
    /// Insert X W component
    /// <code>X W -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Ixw(this ulong2_mt yz, ulong_mt x, ulong_mt w) => new(x, yz, w);

    /// <summary>
    /// Insert Y W component
    /// <code>Y W -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Iyw(this ulong2_mt xz, ulong_mt y, ulong_mt w) => new(xz, y, w, new insert_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>X Z -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Ixz(this ulong2_mt yw, ulong_mt x, ulong_mt z) => new(yw, x, z, new insert_xz());
}

#endregion // ulong4_mt

#region b32v4_mt

public partial struct b32v4_mt 
{
    [MethodImpl(256 | 512)]
    public b32v4_mt(b32v2_mt xy, b32v2_mt zw)
    {
        this.x = xy.x;
        this.y = xy.y;
        this.z = zw.x;
        this.w = zw.y;
    }

    [MethodImpl(256 | 512)]
    public b32v4_mt(b32v2_mt xy, b32_mt z, b32_mt w)
    {
        this.x = xy.x;
        this.y = xy.y;
        this.z = z;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    public b32v4_mt(b32_mt x, b32_mt y, b32v2_mt zw)
    {
        this.x = x;
        this.y = y;
        this.z = zw.x;
        this.w = zw.y;
    }

    [MethodImpl(256 | 512)]
    public b32v4_mt(b32_mt x, b32v2_mt yz, b32_mt w)
    {
        this.x = x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    internal b32v4_mt(b32v2_mt xw, b32v2_mt yz, merge_xw_yz _)
    {
        this.x = xw.x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = xw.y;
    }

    [MethodImpl(256 | 512)]
    internal b32v4_mt(b32v2_mt xw, b32_mt y, b32_mt z, insert_yz _)
    {
        this.x = xw.x;
        this.y = y;
        this.z = z;
        this.w = xw.y;
    }

    [MethodImpl(256 | 512)]
    internal b32v4_mt(b32v2_mt xz, b32v2_mt yw, merge_xz_yw _)
    {
        this.x = xz.x;
        this.y = yw.x;
        this.z = xz.y;
        this.w = yw.y;
    }

    [MethodImpl(256 | 512)]
    internal b32v4_mt(b32v2_mt xz, b32_mt y, b32_mt w, insert_yw _)
    {
        this.x = xz.x;
        this.y = y;
        this.z = xz.y;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    internal b32v4_mt(b32v2_mt yw, b32_mt x, b32_mt z, insert_xz _)
    {
        this.x = x;
        this.y = yw.x;
        this.z = z;
        this.w = yw.y;
    }
}

public static partial class ctor_mt
{
    [MethodImpl(256 | 512)]
    public static b32v4_mt b32v4_mt(b32v2_mt xy, b32v2_mt zw) => new(xy, zw);

    [MethodImpl(256 | 512)]
    public static b32v4_mt b32v4_mt(b32v2_mt xy, b32_mt z, b32_mt w) => new(xy, z, w);

    [MethodImpl(256 | 512)]
    public static b32v4_mt b32v4_mt(b32_mt x, b32_mt y, b32v2_mt zw) => new(x, y, zw);

    [MethodImpl(256 | 512)]
    public static b32v4_mt b32v4_mt(b32_mt x, b32v2_mt yz, b32_mt w) => new(x, yz, w);
}

public static partial class math_mt_ex
{
    /// <summary>
    /// Insert Z W component
    /// <code>(Z, W) -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Izw(this b32v2_mt xy, b32v2_mt zw) => new(xy, zw);

    /// <summary>
    /// Insert X Y component
    /// <code>(X, Y) -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Ixy(this b32v2_mt zw, b32v2_mt xy) => new(xy, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>(Y, Z) -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Iyz(this b32v2_mt xw, b32v2_mt yz) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert X W component
    /// <code>(X, W) -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Ixw(this b32v2_mt yz, b32v2_mt xw) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert Y W component
    /// <code>(Y, W) -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Iyw(this b32v2_mt xz, b32v2_mt yw) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>(X, Z) -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Ixz(this b32v2_mt yw, b32v2_mt xz) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert Z W component
    /// <code>Z W -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Izw(this b32v2_mt xy, b32_mt z, b32_mt w) => new(xy, z, w);

    /// <summary>
    /// Insert X Y component
    /// <code>X Y -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Ixy(this b32v2_mt zw, b32_mt x, b32_mt y) => new(x, y, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>Y Z -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Iyz(this b32v2_mt xw, b32_mt y, b32_mt z) => new(xw, y, z, new insert_yz());

    /// <summary>
    /// Insert X W component
    /// <code>X W -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Ixw(this b32v2_mt yz, b32_mt x, b32_mt w) => new(x, yz, w);

    /// <summary>
    /// Insert Y W component
    /// <code>Y W -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Iyw(this b32v2_mt xz, b32_mt y, b32_mt w) => new(xz, y, w, new insert_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>X Z -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Ixz(this b32v2_mt yw, b32_mt x, b32_mt z) => new(yw, x, z, new insert_xz());
}

#endregion // b32v4_mt

#region b64v4_mt

public partial struct b64v4_mt 
{
    [MethodImpl(256 | 512)]
    public b64v4_mt(b64v2_mt xy, b64v2_mt zw)
    {
        this.x = xy.x;
        this.y = xy.y;
        this.z = zw.x;
        this.w = zw.y;
    }

    [MethodImpl(256 | 512)]
    public b64v4_mt(b64v2_mt xy, b64_mt z, b64_mt w)
    {
        this.x = xy.x;
        this.y = xy.y;
        this.z = z;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    public b64v4_mt(b64_mt x, b64_mt y, b64v2_mt zw)
    {
        this.x = x;
        this.y = y;
        this.z = zw.x;
        this.w = zw.y;
    }

    [MethodImpl(256 | 512)]
    public b64v4_mt(b64_mt x, b64v2_mt yz, b64_mt w)
    {
        this.x = x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    internal b64v4_mt(b64v2_mt xw, b64v2_mt yz, merge_xw_yz _)
    {
        this.x = xw.x;
        this.y = yz.x;
        this.z = yz.y;
        this.w = xw.y;
    }

    [MethodImpl(256 | 512)]
    internal b64v4_mt(b64v2_mt xw, b64_mt y, b64_mt z, insert_yz _)
    {
        this.x = xw.x;
        this.y = y;
        this.z = z;
        this.w = xw.y;
    }

    [MethodImpl(256 | 512)]
    internal b64v4_mt(b64v2_mt xz, b64v2_mt yw, merge_xz_yw _)
    {
        this.x = xz.x;
        this.y = yw.x;
        this.z = xz.y;
        this.w = yw.y;
    }

    [MethodImpl(256 | 512)]
    internal b64v4_mt(b64v2_mt xz, b64_mt y, b64_mt w, insert_yw _)
    {
        this.x = xz.x;
        this.y = y;
        this.z = xz.y;
        this.w = w;
    }

    [MethodImpl(256 | 512)]
    internal b64v4_mt(b64v2_mt yw, b64_mt x, b64_mt z, insert_xz _)
    {
        this.x = x;
        this.y = yw.x;
        this.z = z;
        this.w = yw.y;
    }
}

public static partial class ctor_mt
{
    [MethodImpl(256 | 512)]
    public static b64v4_mt b64v4_mt(b64v2_mt xy, b64v2_mt zw) => new(xy, zw);

    [MethodImpl(256 | 512)]
    public static b64v4_mt b64v4_mt(b64v2_mt xy, b64_mt z, b64_mt w) => new(xy, z, w);

    [MethodImpl(256 | 512)]
    public static b64v4_mt b64v4_mt(b64_mt x, b64_mt y, b64v2_mt zw) => new(x, y, zw);

    [MethodImpl(256 | 512)]
    public static b64v4_mt b64v4_mt(b64_mt x, b64v2_mt yz, b64_mt w) => new(x, yz, w);
}

public static partial class math_mt_ex
{
    /// <summary>
    /// Insert Z W component
    /// <code>(Z, W) -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Izw(this b64v2_mt xy, b64v2_mt zw) => new(xy, zw);

    /// <summary>
    /// Insert X Y component
    /// <code>(X, Y) -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Ixy(this b64v2_mt zw, b64v2_mt xy) => new(xy, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>(Y, Z) -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Iyz(this b64v2_mt xw, b64v2_mt yz) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert X W component
    /// <code>(X, W) -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Ixw(this b64v2_mt yz, b64v2_mt xw) => new(xw, yz, new merge_xw_yz());

    /// <summary>
    /// Insert Y W component
    /// <code>(Y, W) -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Iyw(this b64v2_mt xz, b64v2_mt yw) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>(X, Z) -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Ixz(this b64v2_mt yw, b64v2_mt xz) => new(xz, yw, new merge_xz_yw());

    /// <summary>
    /// Insert Z W component
    /// <code>Z W -> (x, y) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Izw(this b64v2_mt xy, b64_mt z, b64_mt w) => new(xy, z, w);

    /// <summary>
    /// Insert X Y component
    /// <code>X Y -> (z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Ixy(this b64v2_mt zw, b64_mt x, b64_mt y) => new(x, y, zw);

    /// <summary>
    /// Insert Y Z component
    /// <code>Y Z -> (x, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Iyz(this b64v2_mt xw, b64_mt y, b64_mt z) => new(xw, y, z, new insert_yz());

    /// <summary>
    /// Insert X W component
    /// <code>X W -> (y, z) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Ixw(this b64v2_mt yz, b64_mt x, b64_mt w) => new(x, yz, w);

    /// <summary>
    /// Insert Y W component
    /// <code>Y W -> (x, z) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Iyw(this b64v2_mt xz, b64_mt y, b64_mt w) => new(xz, y, w, new insert_yw());

    /// <summary>
    /// Insert X Z component
    /// <code>X Z -> (y, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Ixz(this b64v2_mt yw, b64_mt x, b64_mt z) => new(yw, x, z, new insert_xz());
}

#endregion // b64v4_mt
