// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region float3_mt4

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt4 Rx(this float3_mt4 self, float_mt4 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt4 Ry(this float3_mt4 self, float_mt4 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt4 Rz(this float3_mt4 self, float_mt4 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt4 Rxy(this float3_mt4 self, float2_mt4 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt4 Ryz(this float3_mt4 self, float2_mt4 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt4 Rxz(this float3_mt4 self, float2_mt4 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // float3_mt4

#region float3_mt8

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt8 Rx(this float3_mt8 self, float_mt8 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt8 Ry(this float3_mt8 self, float_mt8 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt8 Rz(this float3_mt8 self, float_mt8 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt8 Rxy(this float3_mt8 self, float2_mt8 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt8 Ryz(this float3_mt8 self, float2_mt8 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt8 Rxz(this float3_mt8 self, float2_mt8 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // float3_mt8

#region float3_mt16

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt16 Rx(this float3_mt16 self, float_mt16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt16 Ry(this float3_mt16 self, float_mt16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt16 Rz(this float3_mt16 self, float_mt16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt16 Rxy(this float3_mt16 self, float2_mt16 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt16 Ryz(this float3_mt16 self, float2_mt16 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3_mt16 Rxz(this float3_mt16 self, float2_mt16 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // float3_mt16

#region double3_mt4

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt4 Rx(this double3_mt4 self, double_mt4 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt4 Ry(this double3_mt4 self, double_mt4 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt4 Rz(this double3_mt4 self, double_mt4 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt4 Rxy(this double3_mt4 self, double2_mt4 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt4 Ryz(this double3_mt4 self, double2_mt4 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt4 Rxz(this double3_mt4 self, double2_mt4 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // double3_mt4

#region double3_mt8

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt8 Rx(this double3_mt8 self, double_mt8 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt8 Ry(this double3_mt8 self, double_mt8 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt8 Rz(this double3_mt8 self, double_mt8 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt8 Rxy(this double3_mt8 self, double2_mt8 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt8 Ryz(this double3_mt8 self, double2_mt8 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt8 Rxz(this double3_mt8 self, double2_mt8 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // double3_mt8

#region double3_mt16

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt16 Rx(this double3_mt16 self, double_mt16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt16 Ry(this double3_mt16 self, double_mt16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt16 Rz(this double3_mt16 self, double_mt16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt16 Rxy(this double3_mt16 self, double2_mt16 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt16 Ryz(this double3_mt16 self, double2_mt16 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3_mt16 Rxz(this double3_mt16 self, double2_mt16 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // double3_mt16

#region int3_mt4

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt4 Rx(this int3_mt4 self, int_mt4 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt4 Ry(this int3_mt4 self, int_mt4 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt4 Rz(this int3_mt4 self, int_mt4 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt4 Rxy(this int3_mt4 self, int2_mt4 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt4 Ryz(this int3_mt4 self, int2_mt4 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt4 Rxz(this int3_mt4 self, int2_mt4 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // int3_mt4

#region int3_mt8

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt8 Rx(this int3_mt8 self, int_mt8 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt8 Ry(this int3_mt8 self, int_mt8 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt8 Rz(this int3_mt8 self, int_mt8 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt8 Rxy(this int3_mt8 self, int2_mt8 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt8 Ryz(this int3_mt8 self, int2_mt8 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt8 Rxz(this int3_mt8 self, int2_mt8 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // int3_mt8

#region int3_mt16

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt16 Rx(this int3_mt16 self, int_mt16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt16 Ry(this int3_mt16 self, int_mt16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt16 Rz(this int3_mt16 self, int_mt16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt16 Rxy(this int3_mt16 self, int2_mt16 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt16 Ryz(this int3_mt16 self, int2_mt16 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3_mt16 Rxz(this int3_mt16 self, int2_mt16 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // int3_mt16

#region uint3_mt4

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt4 Rx(this uint3_mt4 self, uint_mt4 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt4 Ry(this uint3_mt4 self, uint_mt4 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt4 Rz(this uint3_mt4 self, uint_mt4 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt4 Rxy(this uint3_mt4 self, uint2_mt4 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt4 Ryz(this uint3_mt4 self, uint2_mt4 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt4 Rxz(this uint3_mt4 self, uint2_mt4 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // uint3_mt4

#region uint3_mt8

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt8 Rx(this uint3_mt8 self, uint_mt8 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt8 Ry(this uint3_mt8 self, uint_mt8 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt8 Rz(this uint3_mt8 self, uint_mt8 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt8 Rxy(this uint3_mt8 self, uint2_mt8 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt8 Ryz(this uint3_mt8 self, uint2_mt8 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt8 Rxz(this uint3_mt8 self, uint2_mt8 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // uint3_mt8

#region uint3_mt16

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt16 Rx(this uint3_mt16 self, uint_mt16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt16 Ry(this uint3_mt16 self, uint_mt16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt16 Rz(this uint3_mt16 self, uint_mt16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt16 Rxy(this uint3_mt16 self, uint2_mt16 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt16 Ryz(this uint3_mt16 self, uint2_mt16 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3_mt16 Rxz(this uint3_mt16 self, uint2_mt16 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // uint3_mt16

#region long3_mt4

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt4 Rx(this long3_mt4 self, long_mt4 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt4 Ry(this long3_mt4 self, long_mt4 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt4 Rz(this long3_mt4 self, long_mt4 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt4 Rxy(this long3_mt4 self, long2_mt4 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt4 Ryz(this long3_mt4 self, long2_mt4 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt4 Rxz(this long3_mt4 self, long2_mt4 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // long3_mt4

#region long3_mt8

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt8 Rx(this long3_mt8 self, long_mt8 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt8 Ry(this long3_mt8 self, long_mt8 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt8 Rz(this long3_mt8 self, long_mt8 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt8 Rxy(this long3_mt8 self, long2_mt8 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt8 Ryz(this long3_mt8 self, long2_mt8 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt8 Rxz(this long3_mt8 self, long2_mt8 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // long3_mt8

#region long3_mt16

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt16 Rx(this long3_mt16 self, long_mt16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt16 Ry(this long3_mt16 self, long_mt16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt16 Rz(this long3_mt16 self, long_mt16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt16 Rxy(this long3_mt16 self, long2_mt16 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt16 Ryz(this long3_mt16 self, long2_mt16 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3_mt16 Rxz(this long3_mt16 self, long2_mt16 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // long3_mt16

#region ulong3_mt4

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt4 Rx(this ulong3_mt4 self, ulong_mt4 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt4 Ry(this ulong3_mt4 self, ulong_mt4 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt4 Rz(this ulong3_mt4 self, ulong_mt4 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt4 Rxy(this ulong3_mt4 self, ulong2_mt4 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt4 Ryz(this ulong3_mt4 self, ulong2_mt4 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt4 Rxz(this ulong3_mt4 self, ulong2_mt4 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // ulong3_mt4

#region ulong3_mt8

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt8 Rx(this ulong3_mt8 self, ulong_mt8 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt8 Ry(this ulong3_mt8 self, ulong_mt8 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt8 Rz(this ulong3_mt8 self, ulong_mt8 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt8 Rxy(this ulong3_mt8 self, ulong2_mt8 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt8 Ryz(this ulong3_mt8 self, ulong2_mt8 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt8 Rxz(this ulong3_mt8 self, ulong2_mt8 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // ulong3_mt8

#region ulong3_mt16

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt16 Rx(this ulong3_mt16 self, ulong_mt16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt16 Ry(this ulong3_mt16 self, ulong_mt16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt16 Rz(this ulong3_mt16 self, ulong_mt16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt16 Rxy(this ulong3_mt16 self, ulong2_mt16 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt16 Ryz(this ulong3_mt16 self, ulong2_mt16 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3_mt16 Rxz(this ulong3_mt16 self, ulong2_mt16 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // ulong3_mt16

#region b32v3_mt4

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt4 Rx(this b32v3_mt4 self, b32_mt4 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt4 Ry(this b32v3_mt4 self, b32_mt4 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt4 Rz(this b32v3_mt4 self, b32_mt4 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt4 Rxy(this b32v3_mt4 self, b32v2_mt4 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt4 Ryz(this b32v3_mt4 self, b32v2_mt4 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt4 Rxz(this b32v3_mt4 self, b32v2_mt4 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // b32v3_mt4

#region b32v3_mt8

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt8 Rx(this b32v3_mt8 self, b32_mt8 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt8 Ry(this b32v3_mt8 self, b32_mt8 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt8 Rz(this b32v3_mt8 self, b32_mt8 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt8 Rxy(this b32v3_mt8 self, b32v2_mt8 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt8 Ryz(this b32v3_mt8 self, b32v2_mt8 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt8 Rxz(this b32v3_mt8 self, b32v2_mt8 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // b32v3_mt8

#region b32v3_mt16

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt16 Rx(this b32v3_mt16 self, b32_mt16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt16 Ry(this b32v3_mt16 self, b32_mt16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt16 Rz(this b32v3_mt16 self, b32_mt16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt16 Rxy(this b32v3_mt16 self, b32v2_mt16 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt16 Ryz(this b32v3_mt16 self, b32v2_mt16 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v3_mt16 Rxz(this b32v3_mt16 self, b32v2_mt16 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // b32v3_mt16

#region b64v3_mt4

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt4 Rx(this b64v3_mt4 self, b64_mt4 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt4 Ry(this b64v3_mt4 self, b64_mt4 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt4 Rz(this b64v3_mt4 self, b64_mt4 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt4 Rxy(this b64v3_mt4 self, b64v2_mt4 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt4 Ryz(this b64v3_mt4 self, b64v2_mt4 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt4 Rxz(this b64v3_mt4 self, b64v2_mt4 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // b64v3_mt4

#region b64v3_mt8

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt8 Rx(this b64v3_mt8 self, b64_mt8 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt8 Ry(this b64v3_mt8 self, b64_mt8 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt8 Rz(this b64v3_mt8 self, b64_mt8 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt8 Rxy(this b64v3_mt8 self, b64v2_mt8 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt8 Ryz(this b64v3_mt8 self, b64v2_mt8 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt8 Rxz(this b64v3_mt8 self, b64v2_mt8 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // b64v3_mt8

#region b64v3_mt16

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt16 Rx(this b64v3_mt16 self, b64_mt16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt16 Ry(this b64v3_mt16 self, b64_mt16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt16 Rz(this b64v3_mt16 self, b64_mt16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z) => (X, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt16 Rxy(this b64v3_mt16 self, b64v2_mt16 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z) => (x, Y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt16 Ryz(this b64v3_mt16 self, b64v2_mt16 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z) => (X, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v3_mt16 Rxz(this b64v3_mt16 self, b64v2_mt16 xz)
    {
        self.xz = xz;
        return self;
    }
}

#endregion // b64v3_mt16
