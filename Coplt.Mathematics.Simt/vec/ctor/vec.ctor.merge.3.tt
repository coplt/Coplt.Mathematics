<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;
<#
    var sizes = new[] { 16 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        foreach (var size in sizes)
        {
            var typeName = $"{typ.name}3_mt";
            var typeName2 = $"{typ.name}2_mt";
            var type = $"{typ.compType}_mt";
#>

#region <#= typeName #>

public partial struct <#= typeName #> 
{
    [MethodImpl(256 | 512)]
    public <#= typeName #>(<#= typeName2 #> xy, <#= type #> z)
    {
        this.x = xy.x;
        this.y = xy.y;
        this.z = z;
    }

    [MethodImpl(256 | 512)]
    public <#= typeName #>(<#= type #> x, <#= typeName2 #> yz)
    {
        this.x = x;
        this.y = yz.x;
        this.z = yz.y;
    }

    [MethodImpl(256 | 512)]
    internal <#= typeName #>(<#= typeName2 #> xz, <#= type #> y, insert_y _)
    {
        this.x = xz.x;
        this.y = y;
        this.z = xz.y;
    }
}

public static partial class ctor_mt
{
    [MethodImpl(256 | 512)]
    public static <#= typeName #> <#= typeName #>(<#= typeName2 #> xy, <#= type #> z) => new(xy, z);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> <#= typeName #>(<#= type #> x, <#= typeName2 #> yz) => new(x, yz);
}

public static partial class math_mt_ex
{
    /// <summary>
    /// Insert X component
    /// <code>X -> (y, z) => (X, y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Ix(this <#= typeName2 #> yz, <#= type #> x) => new(x, yz);

    /// <summary>
    /// Insert Y component
    /// <code>Y -> (x, z) => (x, Y, z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Iy(this <#= typeName2 #> xz, <#= type #> y) => new(xz, y, new insert_y());

    /// <summary>
    /// Insert Z component
    /// <code>Z -> (x, y) => (x, y, Z)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> Iz(this <#= typeName2 #> xy, <#= type #> z) => new(xy, z);
}

#endregion // <#= typeName #>
<#
        }
    }
#>
