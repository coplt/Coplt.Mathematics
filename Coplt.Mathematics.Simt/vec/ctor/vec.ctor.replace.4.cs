// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region float4_mt4

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt4 Rx(this float4_mt4 self, float_mt4 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt4 Ry(this float4_mt4 self, float_mt4 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt4 Rz(this float4_mt4 self, float_mt4 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt4 Rw(this float4_mt4 self, float_mt4 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt4 Rxy(this float4_mt4 self, float2_mt4 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt4 Ryz(this float4_mt4 self, float2_mt4 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt4 Rzw(this float4_mt4 self, float2_mt4 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt4 Rxz(this float4_mt4 self, float2_mt4 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt4 Ryw(this float4_mt4 self, float2_mt4 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt4 Rxw(this float4_mt4 self, float2_mt4 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt4 Rxyz(this float4_mt4 self, float3_mt4 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt4 Ryzw(this float4_mt4 self, float3_mt4 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt4 Rxyw(this float4_mt4 self, float3_mt4 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt4 Rxzw(this float4_mt4 self, float3_mt4 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // float4_mt4

#region float4_mt8

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt8 Rx(this float4_mt8 self, float_mt8 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt8 Ry(this float4_mt8 self, float_mt8 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt8 Rz(this float4_mt8 self, float_mt8 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt8 Rw(this float4_mt8 self, float_mt8 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt8 Rxy(this float4_mt8 self, float2_mt8 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt8 Ryz(this float4_mt8 self, float2_mt8 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt8 Rzw(this float4_mt8 self, float2_mt8 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt8 Rxz(this float4_mt8 self, float2_mt8 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt8 Ryw(this float4_mt8 self, float2_mt8 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt8 Rxw(this float4_mt8 self, float2_mt8 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt8 Rxyz(this float4_mt8 self, float3_mt8 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt8 Ryzw(this float4_mt8 self, float3_mt8 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt8 Rxyw(this float4_mt8 self, float3_mt8 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt8 Rxzw(this float4_mt8 self, float3_mt8 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // float4_mt8

#region float4_mt16

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt16 Rx(this float4_mt16 self, float_mt16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt16 Ry(this float4_mt16 self, float_mt16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt16 Rz(this float4_mt16 self, float_mt16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt16 Rw(this float4_mt16 self, float_mt16 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt16 Rxy(this float4_mt16 self, float2_mt16 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt16 Ryz(this float4_mt16 self, float2_mt16 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt16 Rzw(this float4_mt16 self, float2_mt16 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt16 Rxz(this float4_mt16 self, float2_mt16 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt16 Ryw(this float4_mt16 self, float2_mt16 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt16 Rxw(this float4_mt16 self, float2_mt16 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt16 Rxyz(this float4_mt16 self, float3_mt16 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt16 Ryzw(this float4_mt16 self, float3_mt16 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt16 Rxyw(this float4_mt16 self, float3_mt16 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt16 Rxzw(this float4_mt16 self, float3_mt16 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // float4_mt16

#region double4_mt4

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt4 Rx(this double4_mt4 self, double_mt4 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt4 Ry(this double4_mt4 self, double_mt4 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt4 Rz(this double4_mt4 self, double_mt4 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt4 Rw(this double4_mt4 self, double_mt4 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt4 Rxy(this double4_mt4 self, double2_mt4 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt4 Ryz(this double4_mt4 self, double2_mt4 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt4 Rzw(this double4_mt4 self, double2_mt4 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt4 Rxz(this double4_mt4 self, double2_mt4 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt4 Ryw(this double4_mt4 self, double2_mt4 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt4 Rxw(this double4_mt4 self, double2_mt4 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt4 Rxyz(this double4_mt4 self, double3_mt4 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt4 Ryzw(this double4_mt4 self, double3_mt4 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt4 Rxyw(this double4_mt4 self, double3_mt4 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt4 Rxzw(this double4_mt4 self, double3_mt4 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // double4_mt4

#region double4_mt8

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt8 Rx(this double4_mt8 self, double_mt8 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt8 Ry(this double4_mt8 self, double_mt8 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt8 Rz(this double4_mt8 self, double_mt8 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt8 Rw(this double4_mt8 self, double_mt8 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt8 Rxy(this double4_mt8 self, double2_mt8 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt8 Ryz(this double4_mt8 self, double2_mt8 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt8 Rzw(this double4_mt8 self, double2_mt8 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt8 Rxz(this double4_mt8 self, double2_mt8 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt8 Ryw(this double4_mt8 self, double2_mt8 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt8 Rxw(this double4_mt8 self, double2_mt8 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt8 Rxyz(this double4_mt8 self, double3_mt8 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt8 Ryzw(this double4_mt8 self, double3_mt8 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt8 Rxyw(this double4_mt8 self, double3_mt8 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt8 Rxzw(this double4_mt8 self, double3_mt8 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // double4_mt8

#region double4_mt16

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt16 Rx(this double4_mt16 self, double_mt16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt16 Ry(this double4_mt16 self, double_mt16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt16 Rz(this double4_mt16 self, double_mt16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt16 Rw(this double4_mt16 self, double_mt16 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt16 Rxy(this double4_mt16 self, double2_mt16 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt16 Ryz(this double4_mt16 self, double2_mt16 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt16 Rzw(this double4_mt16 self, double2_mt16 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt16 Rxz(this double4_mt16 self, double2_mt16 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt16 Ryw(this double4_mt16 self, double2_mt16 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt16 Rxw(this double4_mt16 self, double2_mt16 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt16 Rxyz(this double4_mt16 self, double3_mt16 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt16 Ryzw(this double4_mt16 self, double3_mt16 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt16 Rxyw(this double4_mt16 self, double3_mt16 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt16 Rxzw(this double4_mt16 self, double3_mt16 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // double4_mt16

#region int4_mt4

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt4 Rx(this int4_mt4 self, int_mt4 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt4 Ry(this int4_mt4 self, int_mt4 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt4 Rz(this int4_mt4 self, int_mt4 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt4 Rw(this int4_mt4 self, int_mt4 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt4 Rxy(this int4_mt4 self, int2_mt4 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt4 Ryz(this int4_mt4 self, int2_mt4 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt4 Rzw(this int4_mt4 self, int2_mt4 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt4 Rxz(this int4_mt4 self, int2_mt4 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt4 Ryw(this int4_mt4 self, int2_mt4 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt4 Rxw(this int4_mt4 self, int2_mt4 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt4 Rxyz(this int4_mt4 self, int3_mt4 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt4 Ryzw(this int4_mt4 self, int3_mt4 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt4 Rxyw(this int4_mt4 self, int3_mt4 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt4 Rxzw(this int4_mt4 self, int3_mt4 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // int4_mt4

#region int4_mt8

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt8 Rx(this int4_mt8 self, int_mt8 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt8 Ry(this int4_mt8 self, int_mt8 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt8 Rz(this int4_mt8 self, int_mt8 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt8 Rw(this int4_mt8 self, int_mt8 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt8 Rxy(this int4_mt8 self, int2_mt8 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt8 Ryz(this int4_mt8 self, int2_mt8 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt8 Rzw(this int4_mt8 self, int2_mt8 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt8 Rxz(this int4_mt8 self, int2_mt8 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt8 Ryw(this int4_mt8 self, int2_mt8 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt8 Rxw(this int4_mt8 self, int2_mt8 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt8 Rxyz(this int4_mt8 self, int3_mt8 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt8 Ryzw(this int4_mt8 self, int3_mt8 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt8 Rxyw(this int4_mt8 self, int3_mt8 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt8 Rxzw(this int4_mt8 self, int3_mt8 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // int4_mt8

#region int4_mt16

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt16 Rx(this int4_mt16 self, int_mt16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt16 Ry(this int4_mt16 self, int_mt16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt16 Rz(this int4_mt16 self, int_mt16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt16 Rw(this int4_mt16 self, int_mt16 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt16 Rxy(this int4_mt16 self, int2_mt16 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt16 Ryz(this int4_mt16 self, int2_mt16 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt16 Rzw(this int4_mt16 self, int2_mt16 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt16 Rxz(this int4_mt16 self, int2_mt16 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt16 Ryw(this int4_mt16 self, int2_mt16 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt16 Rxw(this int4_mt16 self, int2_mt16 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt16 Rxyz(this int4_mt16 self, int3_mt16 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt16 Ryzw(this int4_mt16 self, int3_mt16 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt16 Rxyw(this int4_mt16 self, int3_mt16 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt16 Rxzw(this int4_mt16 self, int3_mt16 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // int4_mt16

#region uint4_mt4

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt4 Rx(this uint4_mt4 self, uint_mt4 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt4 Ry(this uint4_mt4 self, uint_mt4 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt4 Rz(this uint4_mt4 self, uint_mt4 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt4 Rw(this uint4_mt4 self, uint_mt4 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt4 Rxy(this uint4_mt4 self, uint2_mt4 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt4 Ryz(this uint4_mt4 self, uint2_mt4 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt4 Rzw(this uint4_mt4 self, uint2_mt4 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt4 Rxz(this uint4_mt4 self, uint2_mt4 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt4 Ryw(this uint4_mt4 self, uint2_mt4 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt4 Rxw(this uint4_mt4 self, uint2_mt4 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt4 Rxyz(this uint4_mt4 self, uint3_mt4 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt4 Ryzw(this uint4_mt4 self, uint3_mt4 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt4 Rxyw(this uint4_mt4 self, uint3_mt4 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt4 Rxzw(this uint4_mt4 self, uint3_mt4 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // uint4_mt4

#region uint4_mt8

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt8 Rx(this uint4_mt8 self, uint_mt8 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt8 Ry(this uint4_mt8 self, uint_mt8 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt8 Rz(this uint4_mt8 self, uint_mt8 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt8 Rw(this uint4_mt8 self, uint_mt8 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt8 Rxy(this uint4_mt8 self, uint2_mt8 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt8 Ryz(this uint4_mt8 self, uint2_mt8 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt8 Rzw(this uint4_mt8 self, uint2_mt8 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt8 Rxz(this uint4_mt8 self, uint2_mt8 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt8 Ryw(this uint4_mt8 self, uint2_mt8 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt8 Rxw(this uint4_mt8 self, uint2_mt8 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt8 Rxyz(this uint4_mt8 self, uint3_mt8 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt8 Ryzw(this uint4_mt8 self, uint3_mt8 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt8 Rxyw(this uint4_mt8 self, uint3_mt8 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt8 Rxzw(this uint4_mt8 self, uint3_mt8 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // uint4_mt8

#region uint4_mt16

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt16 Rx(this uint4_mt16 self, uint_mt16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt16 Ry(this uint4_mt16 self, uint_mt16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt16 Rz(this uint4_mt16 self, uint_mt16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt16 Rw(this uint4_mt16 self, uint_mt16 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt16 Rxy(this uint4_mt16 self, uint2_mt16 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt16 Ryz(this uint4_mt16 self, uint2_mt16 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt16 Rzw(this uint4_mt16 self, uint2_mt16 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt16 Rxz(this uint4_mt16 self, uint2_mt16 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt16 Ryw(this uint4_mt16 self, uint2_mt16 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt16 Rxw(this uint4_mt16 self, uint2_mt16 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt16 Rxyz(this uint4_mt16 self, uint3_mt16 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt16 Ryzw(this uint4_mt16 self, uint3_mt16 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt16 Rxyw(this uint4_mt16 self, uint3_mt16 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt16 Rxzw(this uint4_mt16 self, uint3_mt16 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // uint4_mt16

#region long4_mt4

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt4 Rx(this long4_mt4 self, long_mt4 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt4 Ry(this long4_mt4 self, long_mt4 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt4 Rz(this long4_mt4 self, long_mt4 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt4 Rw(this long4_mt4 self, long_mt4 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt4 Rxy(this long4_mt4 self, long2_mt4 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt4 Ryz(this long4_mt4 self, long2_mt4 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt4 Rzw(this long4_mt4 self, long2_mt4 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt4 Rxz(this long4_mt4 self, long2_mt4 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt4 Ryw(this long4_mt4 self, long2_mt4 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt4 Rxw(this long4_mt4 self, long2_mt4 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt4 Rxyz(this long4_mt4 self, long3_mt4 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt4 Ryzw(this long4_mt4 self, long3_mt4 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt4 Rxyw(this long4_mt4 self, long3_mt4 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt4 Rxzw(this long4_mt4 self, long3_mt4 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // long4_mt4

#region long4_mt8

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt8 Rx(this long4_mt8 self, long_mt8 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt8 Ry(this long4_mt8 self, long_mt8 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt8 Rz(this long4_mt8 self, long_mt8 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt8 Rw(this long4_mt8 self, long_mt8 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt8 Rxy(this long4_mt8 self, long2_mt8 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt8 Ryz(this long4_mt8 self, long2_mt8 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt8 Rzw(this long4_mt8 self, long2_mt8 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt8 Rxz(this long4_mt8 self, long2_mt8 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt8 Ryw(this long4_mt8 self, long2_mt8 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt8 Rxw(this long4_mt8 self, long2_mt8 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt8 Rxyz(this long4_mt8 self, long3_mt8 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt8 Ryzw(this long4_mt8 self, long3_mt8 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt8 Rxyw(this long4_mt8 self, long3_mt8 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt8 Rxzw(this long4_mt8 self, long3_mt8 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // long4_mt8

#region long4_mt16

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt16 Rx(this long4_mt16 self, long_mt16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt16 Ry(this long4_mt16 self, long_mt16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt16 Rz(this long4_mt16 self, long_mt16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt16 Rw(this long4_mt16 self, long_mt16 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt16 Rxy(this long4_mt16 self, long2_mt16 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt16 Ryz(this long4_mt16 self, long2_mt16 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt16 Rzw(this long4_mt16 self, long2_mt16 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt16 Rxz(this long4_mt16 self, long2_mt16 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt16 Ryw(this long4_mt16 self, long2_mt16 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt16 Rxw(this long4_mt16 self, long2_mt16 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt16 Rxyz(this long4_mt16 self, long3_mt16 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt16 Ryzw(this long4_mt16 self, long3_mt16 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt16 Rxyw(this long4_mt16 self, long3_mt16 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt16 Rxzw(this long4_mt16 self, long3_mt16 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // long4_mt16

#region ulong4_mt4

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt4 Rx(this ulong4_mt4 self, ulong_mt4 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt4 Ry(this ulong4_mt4 self, ulong_mt4 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt4 Rz(this ulong4_mt4 self, ulong_mt4 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt4 Rw(this ulong4_mt4 self, ulong_mt4 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt4 Rxy(this ulong4_mt4 self, ulong2_mt4 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt4 Ryz(this ulong4_mt4 self, ulong2_mt4 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt4 Rzw(this ulong4_mt4 self, ulong2_mt4 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt4 Rxz(this ulong4_mt4 self, ulong2_mt4 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt4 Ryw(this ulong4_mt4 self, ulong2_mt4 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt4 Rxw(this ulong4_mt4 self, ulong2_mt4 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt4 Rxyz(this ulong4_mt4 self, ulong3_mt4 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt4 Ryzw(this ulong4_mt4 self, ulong3_mt4 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt4 Rxyw(this ulong4_mt4 self, ulong3_mt4 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt4 Rxzw(this ulong4_mt4 self, ulong3_mt4 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // ulong4_mt4

#region ulong4_mt8

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt8 Rx(this ulong4_mt8 self, ulong_mt8 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt8 Ry(this ulong4_mt8 self, ulong_mt8 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt8 Rz(this ulong4_mt8 self, ulong_mt8 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt8 Rw(this ulong4_mt8 self, ulong_mt8 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt8 Rxy(this ulong4_mt8 self, ulong2_mt8 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt8 Ryz(this ulong4_mt8 self, ulong2_mt8 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt8 Rzw(this ulong4_mt8 self, ulong2_mt8 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt8 Rxz(this ulong4_mt8 self, ulong2_mt8 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt8 Ryw(this ulong4_mt8 self, ulong2_mt8 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt8 Rxw(this ulong4_mt8 self, ulong2_mt8 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt8 Rxyz(this ulong4_mt8 self, ulong3_mt8 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt8 Ryzw(this ulong4_mt8 self, ulong3_mt8 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt8 Rxyw(this ulong4_mt8 self, ulong3_mt8 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt8 Rxzw(this ulong4_mt8 self, ulong3_mt8 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // ulong4_mt8

#region ulong4_mt16

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt16 Rx(this ulong4_mt16 self, ulong_mt16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt16 Ry(this ulong4_mt16 self, ulong_mt16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt16 Rz(this ulong4_mt16 self, ulong_mt16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt16 Rw(this ulong4_mt16 self, ulong_mt16 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt16 Rxy(this ulong4_mt16 self, ulong2_mt16 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt16 Ryz(this ulong4_mt16 self, ulong2_mt16 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt16 Rzw(this ulong4_mt16 self, ulong2_mt16 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt16 Rxz(this ulong4_mt16 self, ulong2_mt16 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt16 Ryw(this ulong4_mt16 self, ulong2_mt16 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt16 Rxw(this ulong4_mt16 self, ulong2_mt16 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt16 Rxyz(this ulong4_mt16 self, ulong3_mt16 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt16 Ryzw(this ulong4_mt16 self, ulong3_mt16 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt16 Rxyw(this ulong4_mt16 self, ulong3_mt16 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt16 Rxzw(this ulong4_mt16 self, ulong3_mt16 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // ulong4_mt16

#region b32v4_mt4

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt4 Rx(this b32v4_mt4 self, b32_mt4 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt4 Ry(this b32v4_mt4 self, b32_mt4 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt4 Rz(this b32v4_mt4 self, b32_mt4 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt4 Rw(this b32v4_mt4 self, b32_mt4 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt4 Rxy(this b32v4_mt4 self, b32v2_mt4 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt4 Ryz(this b32v4_mt4 self, b32v2_mt4 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt4 Rzw(this b32v4_mt4 self, b32v2_mt4 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt4 Rxz(this b32v4_mt4 self, b32v2_mt4 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt4 Ryw(this b32v4_mt4 self, b32v2_mt4 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt4 Rxw(this b32v4_mt4 self, b32v2_mt4 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt4 Rxyz(this b32v4_mt4 self, b32v3_mt4 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt4 Ryzw(this b32v4_mt4 self, b32v3_mt4 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt4 Rxyw(this b32v4_mt4 self, b32v3_mt4 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt4 Rxzw(this b32v4_mt4 self, b32v3_mt4 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // b32v4_mt4

#region b32v4_mt8

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt8 Rx(this b32v4_mt8 self, b32_mt8 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt8 Ry(this b32v4_mt8 self, b32_mt8 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt8 Rz(this b32v4_mt8 self, b32_mt8 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt8 Rw(this b32v4_mt8 self, b32_mt8 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt8 Rxy(this b32v4_mt8 self, b32v2_mt8 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt8 Ryz(this b32v4_mt8 self, b32v2_mt8 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt8 Rzw(this b32v4_mt8 self, b32v2_mt8 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt8 Rxz(this b32v4_mt8 self, b32v2_mt8 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt8 Ryw(this b32v4_mt8 self, b32v2_mt8 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt8 Rxw(this b32v4_mt8 self, b32v2_mt8 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt8 Rxyz(this b32v4_mt8 self, b32v3_mt8 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt8 Ryzw(this b32v4_mt8 self, b32v3_mt8 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt8 Rxyw(this b32v4_mt8 self, b32v3_mt8 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt8 Rxzw(this b32v4_mt8 self, b32v3_mt8 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // b32v4_mt8

#region b32v4_mt16

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt16 Rx(this b32v4_mt16 self, b32_mt16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt16 Ry(this b32v4_mt16 self, b32_mt16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt16 Rz(this b32v4_mt16 self, b32_mt16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt16 Rw(this b32v4_mt16 self, b32_mt16 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt16 Rxy(this b32v4_mt16 self, b32v2_mt16 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt16 Ryz(this b32v4_mt16 self, b32v2_mt16 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt16 Rzw(this b32v4_mt16 self, b32v2_mt16 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt16 Rxz(this b32v4_mt16 self, b32v2_mt16 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt16 Ryw(this b32v4_mt16 self, b32v2_mt16 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt16 Rxw(this b32v4_mt16 self, b32v2_mt16 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt16 Rxyz(this b32v4_mt16 self, b32v3_mt16 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt16 Ryzw(this b32v4_mt16 self, b32v3_mt16 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt16 Rxyw(this b32v4_mt16 self, b32v3_mt16 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt16 Rxzw(this b32v4_mt16 self, b32v3_mt16 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // b32v4_mt16

#region b64v4_mt4

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt4 Rx(this b64v4_mt4 self, b64_mt4 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt4 Ry(this b64v4_mt4 self, b64_mt4 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt4 Rz(this b64v4_mt4 self, b64_mt4 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt4 Rw(this b64v4_mt4 self, b64_mt4 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt4 Rxy(this b64v4_mt4 self, b64v2_mt4 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt4 Ryz(this b64v4_mt4 self, b64v2_mt4 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt4 Rzw(this b64v4_mt4 self, b64v2_mt4 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt4 Rxz(this b64v4_mt4 self, b64v2_mt4 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt4 Ryw(this b64v4_mt4 self, b64v2_mt4 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt4 Rxw(this b64v4_mt4 self, b64v2_mt4 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt4 Rxyz(this b64v4_mt4 self, b64v3_mt4 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt4 Ryzw(this b64v4_mt4 self, b64v3_mt4 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt4 Rxyw(this b64v4_mt4 self, b64v3_mt4 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt4 Rxzw(this b64v4_mt4 self, b64v3_mt4 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // b64v4_mt4

#region b64v4_mt8

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt8 Rx(this b64v4_mt8 self, b64_mt8 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt8 Ry(this b64v4_mt8 self, b64_mt8 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt8 Rz(this b64v4_mt8 self, b64_mt8 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt8 Rw(this b64v4_mt8 self, b64_mt8 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt8 Rxy(this b64v4_mt8 self, b64v2_mt8 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt8 Ryz(this b64v4_mt8 self, b64v2_mt8 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt8 Rzw(this b64v4_mt8 self, b64v2_mt8 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt8 Rxz(this b64v4_mt8 self, b64v2_mt8 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt8 Ryw(this b64v4_mt8 self, b64v2_mt8 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt8 Rxw(this b64v4_mt8 self, b64v2_mt8 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt8 Rxyz(this b64v4_mt8 self, b64v3_mt8 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt8 Ryzw(this b64v4_mt8 self, b64v3_mt8 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt8 Rxyw(this b64v4_mt8 self, b64v3_mt8 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt8 Rxzw(this b64v4_mt8 self, b64v3_mt8 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // b64v4_mt8

#region b64v4_mt16

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt16 Rx(this b64v4_mt16 self, b64_mt16 x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt16 Ry(this b64v4_mt16 self, b64_mt16 y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt16 Rz(this b64v4_mt16 self, b64_mt16 z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt16 Rw(this b64v4_mt16 self, b64_mt16 w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt16 Rxy(this b64v4_mt16 self, b64v2_mt16 xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt16 Ryz(this b64v4_mt16 self, b64v2_mt16 yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt16 Rzw(this b64v4_mt16 self, b64v2_mt16 zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt16 Rxz(this b64v4_mt16 self, b64v2_mt16 xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt16 Ryw(this b64v4_mt16 self, b64v2_mt16 yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt16 Rxw(this b64v4_mt16 self, b64v2_mt16 xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt16 Rxyz(this b64v4_mt16 self, b64v3_mt16 xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt16 Ryzw(this b64v4_mt16 self, b64v3_mt16 yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt16 Rxyw(this b64v4_mt16 self, b64v3_mt16 xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt16 Rxzw(this b64v4_mt16 self, b64v3_mt16 xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // b64v4_mt16
