// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region float4_mt

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Rx(this float4_mt self, float_mt x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Ry(this float4_mt self, float_mt y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Rz(this float4_mt self, float_mt z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Rw(this float4_mt self, float_mt w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Rxy(this float4_mt self, float2_mt xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Ryz(this float4_mt self, float2_mt yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Rzw(this float4_mt self, float2_mt zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Rxz(this float4_mt self, float2_mt xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Ryw(this float4_mt self, float2_mt yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Rxw(this float4_mt self, float2_mt xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Rxyz(this float4_mt self, float3_mt xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Ryzw(this float4_mt self, float3_mt yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Rxyw(this float4_mt self, float3_mt xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4_mt Rxzw(this float4_mt self, float3_mt xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // float4_mt

#region double4_mt

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Rx(this double4_mt self, double_mt x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Ry(this double4_mt self, double_mt y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Rz(this double4_mt self, double_mt z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Rw(this double4_mt self, double_mt w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Rxy(this double4_mt self, double2_mt xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Ryz(this double4_mt self, double2_mt yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Rzw(this double4_mt self, double2_mt zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Rxz(this double4_mt self, double2_mt xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Ryw(this double4_mt self, double2_mt yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Rxw(this double4_mt self, double2_mt xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Rxyz(this double4_mt self, double3_mt xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Ryzw(this double4_mt self, double3_mt yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Rxyw(this double4_mt self, double3_mt xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4_mt Rxzw(this double4_mt self, double3_mt xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // double4_mt

#region int4_mt

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Rx(this int4_mt self, int_mt x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Ry(this int4_mt self, int_mt y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Rz(this int4_mt self, int_mt z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Rw(this int4_mt self, int_mt w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Rxy(this int4_mt self, int2_mt xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Ryz(this int4_mt self, int2_mt yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Rzw(this int4_mt self, int2_mt zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Rxz(this int4_mt self, int2_mt xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Ryw(this int4_mt self, int2_mt yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Rxw(this int4_mt self, int2_mt xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Rxyz(this int4_mt self, int3_mt xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Ryzw(this int4_mt self, int3_mt yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Rxyw(this int4_mt self, int3_mt xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4_mt Rxzw(this int4_mt self, int3_mt xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // int4_mt

#region uint4_mt

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Rx(this uint4_mt self, uint_mt x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Ry(this uint4_mt self, uint_mt y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Rz(this uint4_mt self, uint_mt z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Rw(this uint4_mt self, uint_mt w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Rxy(this uint4_mt self, uint2_mt xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Ryz(this uint4_mt self, uint2_mt yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Rzw(this uint4_mt self, uint2_mt zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Rxz(this uint4_mt self, uint2_mt xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Ryw(this uint4_mt self, uint2_mt yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Rxw(this uint4_mt self, uint2_mt xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Rxyz(this uint4_mt self, uint3_mt xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Ryzw(this uint4_mt self, uint3_mt yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Rxyw(this uint4_mt self, uint3_mt xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4_mt Rxzw(this uint4_mt self, uint3_mt xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // uint4_mt

#region long4_mt

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Rx(this long4_mt self, long_mt x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Ry(this long4_mt self, long_mt y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Rz(this long4_mt self, long_mt z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Rw(this long4_mt self, long_mt w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Rxy(this long4_mt self, long2_mt xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Ryz(this long4_mt self, long2_mt yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Rzw(this long4_mt self, long2_mt zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Rxz(this long4_mt self, long2_mt xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Ryw(this long4_mt self, long2_mt yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Rxw(this long4_mt self, long2_mt xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Rxyz(this long4_mt self, long3_mt xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Ryzw(this long4_mt self, long3_mt yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Rxyw(this long4_mt self, long3_mt xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4_mt Rxzw(this long4_mt self, long3_mt xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // long4_mt

#region ulong4_mt

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Rx(this ulong4_mt self, ulong_mt x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Ry(this ulong4_mt self, ulong_mt y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Rz(this ulong4_mt self, ulong_mt z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Rw(this ulong4_mt self, ulong_mt w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Rxy(this ulong4_mt self, ulong2_mt xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Ryz(this ulong4_mt self, ulong2_mt yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Rzw(this ulong4_mt self, ulong2_mt zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Rxz(this ulong4_mt self, ulong2_mt xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Ryw(this ulong4_mt self, ulong2_mt yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Rxw(this ulong4_mt self, ulong2_mt xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Rxyz(this ulong4_mt self, ulong3_mt xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Ryzw(this ulong4_mt self, ulong3_mt yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Rxyw(this ulong4_mt self, ulong3_mt xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4_mt Rxzw(this ulong4_mt self, ulong3_mt xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // ulong4_mt

#region b32v4_mt

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Rx(this b32v4_mt self, b32_mt x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Ry(this b32v4_mt self, b32_mt y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Rz(this b32v4_mt self, b32_mt z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Rw(this b32v4_mt self, b32_mt w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Rxy(this b32v4_mt self, b32v2_mt xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Ryz(this b32v4_mt self, b32v2_mt yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Rzw(this b32v4_mt self, b32v2_mt zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Rxz(this b32v4_mt self, b32v2_mt xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Ryw(this b32v4_mt self, b32v2_mt yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Rxw(this b32v4_mt self, b32v2_mt xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Rxyz(this b32v4_mt self, b32v3_mt xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Ryzw(this b32v4_mt self, b32v3_mt yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Rxyw(this b32v4_mt self, b32v3_mt xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b32v4_mt Rxzw(this b32v4_mt self, b32v3_mt xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // b32v4_mt

#region b64v4_mt

public static partial class math_mt_ex
{
    /// <summary>
    /// Replace X component
    /// <code>X -> (x, y, z, w) => (X, y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Rx(this b64v4_mt self, b64_mt x)
    {
        self.x = x;
        return self;
    }

    /// <summary>
    /// Replace Y component
    /// <code>Y -> (x, y, z, w) => (x, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Ry(this b64v4_mt self, b64_mt y)
    {
        self.y = y;
        return self;
    }

    /// <summary>
    /// Replace Z component
    /// <code>Z -> (x, y, z, w) => (x, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Rz(this b64v4_mt self, b64_mt z)
    {
        self.z = z;
        return self;
    }

    /// <summary>
    /// Replace W component
    /// <code>W -> (x, y, z, w) => (x, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Rw(this b64v4_mt self, b64_mt w)
    {
        self.w = w;
        return self;
    }

    /// <summary>
    /// Replace X Y component
    /// <code>(X, Y) -> (x, y, z, w) => (X, Y, z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Rxy(this b64v4_mt self, b64v2_mt xy)
    {
        self.xy = xy;
        return self;
    }

    /// <summary>
    /// Replace Y Z component
    /// <code>(Y, Z) -> (x, y, z, w) => (x, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Ryz(this b64v4_mt self, b64v2_mt yz)
    {
        self.yz = yz;
        return self;
    }

    /// <summary>
    /// Replace Z W component
    /// <code>(Z, W) -> (x, y, z, w) => (x, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Rzw(this b64v4_mt self, b64v2_mt zw)
    {
        self.zw = zw;
        return self;
    }

    /// <summary>
    /// Replace X Z component
    /// <code>(X, Z) -> (x, y, z, w) => (X, y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Rxz(this b64v4_mt self, b64v2_mt xz)
    {
        self.xz = xz;
        return self;
    }

    /// <summary>
    /// Replace Y W component
    /// <code>(Y, W) -> (x, y, z, w) => (x, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Ryw(this b64v4_mt self, b64v2_mt yw)
    {
        self.yw = yw;
        return self;
    }

    /// <summary>
    /// Replace X W component
    /// <code>(X, W) -> (x, y, z, w) => (X, y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Rxw(this b64v4_mt self, b64v2_mt xw)
    {
        self.xw = xw;
        return self;
    }

    /// <summary>
    /// Replace X Y Z component
    /// <code>(X, Y, Z) -> (x, y, z, w) => (X, Y, Z, w)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Rxyz(this b64v4_mt self, b64v3_mt xyz)
    {
        self.xyz = xyz;
        return self;
    }

    /// <summary>
    /// Replace Y Z W component
    /// <code>(Y, Z, W) -> (x, y, z, w) => (x, Y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Ryzw(this b64v4_mt self, b64v3_mt yzw)
    {
        self.yzw = yzw;
        return self;
    }

    /// <summary>
    /// Replace X Y W component
    /// <code>(X, Y, W) -> (x, y, z, w) => (X, Y, z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Rxyw(this b64v4_mt self, b64v3_mt xyw)
    {
        self.xyw = xyw;
        return self;
    }

    /// <summary>
    /// Replace X Z W component
    /// <code>(X, Z, W) -> (x, y, z, w) => (X, y, Z, W)</code>
    /// </summary>
    [MethodImpl(256 | 512)]
    public static b64v4_mt Rxzw(this b64v4_mt self, b64v3_mt xzw)
    {
        self.xzw = xzw;
        return self;
    }
}

#endregion // b64v4_mt
