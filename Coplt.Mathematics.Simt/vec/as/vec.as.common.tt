<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;
<#
    var sizes = new[] { 4, 8, 16 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        for (var i = 2; i <= 4; i++)
        {
            foreach (var size in sizes)
            {
                var byteSize = typ.size * size;
                var bitSize = 8 * byteSize;
                var num_vectors = Math.Max(1, bitSize / 512);
                bitSize = Math.Min(512, bitSize);

                var typeName = $"{typ.name}{i}_mt{size}";

                var ss = typ.size switch {
                    2 => new[] { ("half", "f"), ("short", "i"), ("ushort", "u"), ("b16v", "b") },
                    4 => new[] { ("float", "f"), ("int", "i"), ("uint", "u"), ("b32v", "b") },
                    8 => new[] { ("double", "f"), ("long", "i"), ("ulong", "u"), ("b64v", "b") },
                    _ => new (string, string)[] { }
                    };
#>

#region <#= typeName #>

[Ex]
public static partial class math
{
<#
                foreach (var (target, name) in ss)
                {
                    var tarName = $"{target}{i}_mt{size}";
#>
    [MethodImpl(256 | 512)]
    public static <#= tarName #> as<#= name #>([This] <#= typeName #> v) => v.BitCast<<#= typeName #>, <#= tarName #>>();
<#
                }
#>
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
