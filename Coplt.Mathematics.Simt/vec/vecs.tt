<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

<#
    var sizes = new[] { 4, 8, 16, 32 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        for (var i = 2; i <= 4; i++)
        {
            foreach (var size in sizes)
            {
                var byteSize = typ.size * size;
                var bitSize = 8 * byteSize;
                var num_vectors = Math.Max(1, bitSize / 512);
                bitSize = Math.Min(512, bitSize);

                var typeName = $"{typ.name}{i}_mt{size}";
                var scalarName = $"{typ.compType}_mt{size}";
                var simd_typeName = $"{typ.name}{i}";
#>
#region <#= typeName #>

[CpuOnly]
public partial struct <#= typeName #>
{
    #region Constants

    public static int LineCount
    {
        [MethodImpl(256 | 512)]
        get => <#= scalarName #>.LineCount;
    }

    #endregion

    #region Fields

<#
                foreach (var n in Enumerable.Range(0, i))
                {
#>
    public <#= scalarName #> <#= Typ.xyzw[n] #>;
<#
                }
#>

    #endregion // Fields

    #region Properties

    public <#= simd_typeName #> this[int index]
    {
        [MethodImpl(256 | 512)]
        readonly get => new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]}[index]")) #>);
        set 
        {
<#
                foreach (var n in Enumerable.Range(0, i))
                {
#>
           <#= Typ.xyzw[n] #>[index] = value.<#= Typ.xyzw[n] #>;
<#
                }
#>
        }
    }

    #endregion // Properties

    #region Ctor

    [MethodImpl(256 | 512)]
    public <#= typeName #>(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"{scalarName} {Typ.xyzw[n]}")) #>)
    {
<#
                foreach (var n in Enumerable.Range(0, i))
                {
#>
        this.<#= Typ.xyzw[n] #> = <#= Typ.xyzw[n] #>;
<#
                }
#>
    }

    [MethodImpl(256 | 512)]
    public <#= typeName #>(<#= typ.compType #> value)
    {
        <#= string.Join(" = ", Enumerable.Range(0, i).Reverse().Select(n => $"{Typ.xyzw[n]}")) #> = value;
    }

    [MethodImpl(256 | 512)]
    public <#= typeName #>(<#= scalarName #> value)
    {
        <#= string.Join(" = ", Enumerable.Range(0, i).Reverse().Select(n => $"{Typ.xyzw[n]}")) #> = value;
    }

    [MethodImpl(256 | 512)]
    public <#= typeName #>(<#= simd_typeName #> value)
    {
<#
                foreach (var n in Enumerable.Range(0, i))
                {
#>
        <#= Typ.xyzw[n] #> = new(value.<#= Typ.xyzw[n] #>);
<#
                }
#>
    }

    #endregion // Ctor

    #region Operators

    [MethodImpl(256 | 512)]
    public static implicit operator <#= typeName #>(<#= typ.compType #> value) => new <#= scalarName #>(value);

    [MethodImpl(256 | 512)]
    public static implicit operator <#= typeName #>(<#= scalarName #> value) => new(value);

    [MethodImpl(256 | 512)]
    public static implicit operator <#= typeName #>(<#= simd_typeName #> value) => new(value);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator~(<#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"~a.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator|(<#= typeName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} | b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator&(<#= typeName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} & b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator^(<#= typeName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} ^ b.{Typ.xyzw[n]}")) #>);

    #endregion // Operators

    #region ToString

    public readonly override string ToString() => $"<#= typeName #> {{ <#=
                string.Join(", ", Enumerable.Range(0, size).Select(l => $"t{l} = {{this[{l}]}}")) #> }}";
    
    #endregion // ToString
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
