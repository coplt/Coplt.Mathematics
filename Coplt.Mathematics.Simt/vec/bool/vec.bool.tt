<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

<#
    var sizes = new[] { 4, 8, 16 };
    for (int s = 2; s <= 8; s *= 2)
    {
        for (int i = 2; i <= 4; i++)
        {
            var bSize = s * 8;
            var bTypeName = $"b{bSize}v";
            var scalar_bTypeName = $"b{bSize}";

            var typ = Typ.Typs.FirstOrDefault(a => a.name == bTypeName);
            if (typ.name == null) continue;

            if (!typ.simd) continue;
            if (typ.size < 4) continue;
            foreach (var size in sizes)
            {
                var byteSize = typ.size * size;
                var bitSize = 8 * byteSize;
                var num_vectors = Math.Max(1, bitSize / 512);
                bitSize = Math.Min(512, bitSize);

                var typeName = $"{bTypeName}{i}_mt{size}";
                var scalarName = $"{scalar_bTypeName}_mt{size}";

                IEnumerable<string> ForVectors(string name)
                {
                    if (num_vectors == 1) yield return name;
                    else
                    {
                        for (var i = 0; i < num_vectors; i++)
                        {
                            yield return $"{name}{i}";
                        }
                    }
                }

                var vectors = ForVectors("vector").ToList();
#>
#region <#= typeName #>

public partial struct <#= typeName #>
{
    public static <#= typeName #> True
    {
        [MethodImpl(256 | 512)]
        get => new(<#= bTypeName #>.True);
    }
    public static <#= typeName #> False
    {
        [MethodImpl(256 | 512)]
        get => new(<#= bTypeName #>.False);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator !(<#= typeName #> self) => ~self;
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static <#= scalarName #> all([This] <#= typeName #> v)
    {
        return <#= string.Join(" & ", Enumerable.Range(0, i).Select(n => $"v.{Typ.xyzw[n]}")) #>;
    }

    [MethodImpl(256 | 512)]
    public static <#= scalarName #> any([This] <#= typeName #> v)
    {
        return <#= string.Join(" | ", Enumerable.Range(0, i).Select(n => $"v.{Typ.xyzw[n]}")) #>;
    }

    [MethodImpl(256 | 512)]
    public static <#= scalarName #> all_false([This] <#= typeName #> v) => ~any(v);

    [MethodImpl(256 | 512)]
    public static bool lane_all([This] <#= typeName #> v)
    {
        return <#= string.Join(" && ", Enumerable.Range(0, i).Select(n => $"v.{Typ.xyzw[n]}.lane_all()")) #>;
    }

    [MethodImpl(256 | 512)]
    public static bool lane_any([This] <#= typeName #> v)
    {
        return <#= string.Join(" || ", Enumerable.Range(0, i).Select(n => $"v.{Typ.xyzw[n]}.lane_any()")) #>;
    }

    [MethodImpl(256 | 512)]
    public static bool lane_all_false([This] <#= typeName #> v)
    {
        return <#= string.Join(" && ", Enumerable.Range(0, i).Select(n => $"v.{Typ.xyzw[n]}.lane_all_false()")) #>;
    }
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
