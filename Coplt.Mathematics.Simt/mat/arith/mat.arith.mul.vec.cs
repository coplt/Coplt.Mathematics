// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region float2x2_mt4

public partial struct float2x2_mt4
{
    /// <summary>
    /// Scale a float2x2_mt4 columns by float2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator *(float2x2_mt4 a, float2_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a float2x2_mt4 rows by float2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator *(float2_mt4 a, float2x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2_mt4 mul([This] float2x2_mt4 a, float2_mt4 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static float2_mt4 mul([This] float2_mt4 a, float2x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // float2x2_mt4

#region float2x2_mt8

public partial struct float2x2_mt8
{
    /// <summary>
    /// Scale a float2x2_mt8 columns by float2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator *(float2x2_mt8 a, float2_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a float2x2_mt8 rows by float2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator *(float2_mt8 a, float2x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2_mt8 mul([This] float2x2_mt8 a, float2_mt8 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static float2_mt8 mul([This] float2_mt8 a, float2x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // float2x2_mt8

#region float2x2_mt16

public partial struct float2x2_mt16
{
    /// <summary>
    /// Scale a float2x2_mt16 columns by float2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator *(float2x2_mt16 a, float2_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a float2x2_mt16 rows by float2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator *(float2_mt16 a, float2x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2_mt16 mul([This] float2x2_mt16 a, float2_mt16 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static float2_mt16 mul([This] float2_mt16 a, float2x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // float2x2_mt16

#region float2x3_mt4

public partial struct float2x3_mt4
{
    /// <summary>
    /// Scale a float2x3_mt4 columns by float3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator *(float2x3_mt4 a, float3_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a float2x3_mt4 rows by float2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator *(float2_mt4 a, float2x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2_mt4 mul([This] float2x3_mt4 a, float3_mt4 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static float3_mt4 mul([This] float2_mt4 a, float2x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // float2x3_mt4

#region float2x3_mt8

public partial struct float2x3_mt8
{
    /// <summary>
    /// Scale a float2x3_mt8 columns by float3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator *(float2x3_mt8 a, float3_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a float2x3_mt8 rows by float2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator *(float2_mt8 a, float2x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2_mt8 mul([This] float2x3_mt8 a, float3_mt8 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static float3_mt8 mul([This] float2_mt8 a, float2x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // float2x3_mt8

#region float2x3_mt16

public partial struct float2x3_mt16
{
    /// <summary>
    /// Scale a float2x3_mt16 columns by float3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator *(float2x3_mt16 a, float3_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a float2x3_mt16 rows by float2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator *(float2_mt16 a, float2x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2_mt16 mul([This] float2x3_mt16 a, float3_mt16 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static float3_mt16 mul([This] float2_mt16 a, float2x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // float2x3_mt16

#region float2x4_mt4

public partial struct float2x4_mt4
{
    /// <summary>
    /// Scale a float2x4_mt4 columns by float4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator *(float2x4_mt4 a, float4_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a float2x4_mt4 rows by float2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator *(float2_mt4 a, float2x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2_mt4 mul([This] float2x4_mt4 a, float4_mt4 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static float4_mt4 mul([This] float2_mt4 a, float2x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // float2x4_mt4

#region float2x4_mt8

public partial struct float2x4_mt8
{
    /// <summary>
    /// Scale a float2x4_mt8 columns by float4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator *(float2x4_mt8 a, float4_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a float2x4_mt8 rows by float2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator *(float2_mt8 a, float2x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2_mt8 mul([This] float2x4_mt8 a, float4_mt8 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static float4_mt8 mul([This] float2_mt8 a, float2x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // float2x4_mt8

#region float2x4_mt16

public partial struct float2x4_mt16
{
    /// <summary>
    /// Scale a float2x4_mt16 columns by float4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator *(float2x4_mt16 a, float4_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a float2x4_mt16 rows by float2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator *(float2_mt16 a, float2x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2_mt16 mul([This] float2x4_mt16 a, float4_mt16 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static float4_mt16 mul([This] float2_mt16 a, float2x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // float2x4_mt16

#region float3x2_mt4

public partial struct float3x2_mt4
{
    /// <summary>
    /// Scale a float3x2_mt4 columns by float2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator *(float3x2_mt4 a, float2_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a float3x2_mt4 rows by float3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator *(float3_mt4 a, float3x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3_mt4 mul([This] float3x2_mt4 a, float2_mt4 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static float2_mt4 mul([This] float3_mt4 a, float3x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // float3x2_mt4

#region float3x2_mt8

public partial struct float3x2_mt8
{
    /// <summary>
    /// Scale a float3x2_mt8 columns by float2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator *(float3x2_mt8 a, float2_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a float3x2_mt8 rows by float3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator *(float3_mt8 a, float3x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3_mt8 mul([This] float3x2_mt8 a, float2_mt8 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static float2_mt8 mul([This] float3_mt8 a, float3x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // float3x2_mt8

#region float3x2_mt16

public partial struct float3x2_mt16
{
    /// <summary>
    /// Scale a float3x2_mt16 columns by float2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator *(float3x2_mt16 a, float2_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a float3x2_mt16 rows by float3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator *(float3_mt16 a, float3x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3_mt16 mul([This] float3x2_mt16 a, float2_mt16 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static float2_mt16 mul([This] float3_mt16 a, float3x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // float3x2_mt16

#region float3x3_mt4

public partial struct float3x3_mt4
{
    /// <summary>
    /// Scale a float3x3_mt4 columns by float3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator *(float3x3_mt4 a, float3_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a float3x3_mt4 rows by float3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator *(float3_mt4 a, float3x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3_mt4 mul([This] float3x3_mt4 a, float3_mt4 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static float3_mt4 mul([This] float3_mt4 a, float3x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // float3x3_mt4

#region float3x3_mt8

public partial struct float3x3_mt8
{
    /// <summary>
    /// Scale a float3x3_mt8 columns by float3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator *(float3x3_mt8 a, float3_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a float3x3_mt8 rows by float3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator *(float3_mt8 a, float3x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3_mt8 mul([This] float3x3_mt8 a, float3_mt8 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static float3_mt8 mul([This] float3_mt8 a, float3x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // float3x3_mt8

#region float3x3_mt16

public partial struct float3x3_mt16
{
    /// <summary>
    /// Scale a float3x3_mt16 columns by float3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator *(float3x3_mt16 a, float3_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a float3x3_mt16 rows by float3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator *(float3_mt16 a, float3x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3_mt16 mul([This] float3x3_mt16 a, float3_mt16 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static float3_mt16 mul([This] float3_mt16 a, float3x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // float3x3_mt16

#region float3x4_mt4

public partial struct float3x4_mt4
{
    /// <summary>
    /// Scale a float3x4_mt4 columns by float4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator *(float3x4_mt4 a, float4_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a float3x4_mt4 rows by float3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator *(float3_mt4 a, float3x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3_mt4 mul([This] float3x4_mt4 a, float4_mt4 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static float4_mt4 mul([This] float3_mt4 a, float3x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // float3x4_mt4

#region float3x4_mt8

public partial struct float3x4_mt8
{
    /// <summary>
    /// Scale a float3x4_mt8 columns by float4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator *(float3x4_mt8 a, float4_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a float3x4_mt8 rows by float3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator *(float3_mt8 a, float3x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3_mt8 mul([This] float3x4_mt8 a, float4_mt8 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static float4_mt8 mul([This] float3_mt8 a, float3x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // float3x4_mt8

#region float3x4_mt16

public partial struct float3x4_mt16
{
    /// <summary>
    /// Scale a float3x4_mt16 columns by float4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator *(float3x4_mt16 a, float4_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a float3x4_mt16 rows by float3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator *(float3_mt16 a, float3x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3_mt16 mul([This] float3x4_mt16 a, float4_mt16 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static float4_mt16 mul([This] float3_mt16 a, float3x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // float3x4_mt16

#region float4x2_mt4

public partial struct float4x2_mt4
{
    /// <summary>
    /// Scale a float4x2_mt4 columns by float2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator *(float4x2_mt4 a, float2_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a float4x2_mt4 rows by float4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator *(float4_mt4 a, float4x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4_mt4 mul([This] float4x2_mt4 a, float2_mt4 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static float2_mt4 mul([This] float4_mt4 a, float4x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // float4x2_mt4

#region float4x2_mt8

public partial struct float4x2_mt8
{
    /// <summary>
    /// Scale a float4x2_mt8 columns by float2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator *(float4x2_mt8 a, float2_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a float4x2_mt8 rows by float4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator *(float4_mt8 a, float4x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4_mt8 mul([This] float4x2_mt8 a, float2_mt8 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static float2_mt8 mul([This] float4_mt8 a, float4x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // float4x2_mt8

#region float4x2_mt16

public partial struct float4x2_mt16
{
    /// <summary>
    /// Scale a float4x2_mt16 columns by float2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator *(float4x2_mt16 a, float2_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a float4x2_mt16 rows by float4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator *(float4_mt16 a, float4x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4_mt16 mul([This] float4x2_mt16 a, float2_mt16 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static float2_mt16 mul([This] float4_mt16 a, float4x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // float4x2_mt16

#region float4x3_mt4

public partial struct float4x3_mt4
{
    /// <summary>
    /// Scale a float4x3_mt4 columns by float3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator *(float4x3_mt4 a, float3_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a float4x3_mt4 rows by float4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator *(float4_mt4 a, float4x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4_mt4 mul([This] float4x3_mt4 a, float3_mt4 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static float3_mt4 mul([This] float4_mt4 a, float4x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // float4x3_mt4

#region float4x3_mt8

public partial struct float4x3_mt8
{
    /// <summary>
    /// Scale a float4x3_mt8 columns by float3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator *(float4x3_mt8 a, float3_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a float4x3_mt8 rows by float4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator *(float4_mt8 a, float4x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4_mt8 mul([This] float4x3_mt8 a, float3_mt8 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static float3_mt8 mul([This] float4_mt8 a, float4x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // float4x3_mt8

#region float4x3_mt16

public partial struct float4x3_mt16
{
    /// <summary>
    /// Scale a float4x3_mt16 columns by float3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator *(float4x3_mt16 a, float3_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a float4x3_mt16 rows by float4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator *(float4_mt16 a, float4x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4_mt16 mul([This] float4x3_mt16 a, float3_mt16 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static float3_mt16 mul([This] float4_mt16 a, float4x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // float4x3_mt16

#region float4x4_mt4

public partial struct float4x4_mt4
{
    /// <summary>
    /// Scale a float4x4_mt4 columns by float4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator *(float4x4_mt4 a, float4_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a float4x4_mt4 rows by float4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator *(float4_mt4 a, float4x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4_mt4 mul([This] float4x4_mt4 a, float4_mt4 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static float4_mt4 mul([This] float4_mt4 a, float4x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // float4x4_mt4

#region float4x4_mt8

public partial struct float4x4_mt8
{
    /// <summary>
    /// Scale a float4x4_mt8 columns by float4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator *(float4x4_mt8 a, float4_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a float4x4_mt8 rows by float4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator *(float4_mt8 a, float4x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4_mt8 mul([This] float4x4_mt8 a, float4_mt8 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static float4_mt8 mul([This] float4_mt8 a, float4x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // float4x4_mt8

#region float4x4_mt16

public partial struct float4x4_mt16
{
    /// <summary>
    /// Scale a float4x4_mt16 columns by float4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator *(float4x4_mt16 a, float4_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a float4x4_mt16 rows by float4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator *(float4_mt16 a, float4x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4_mt16 mul([This] float4x4_mt16 a, float4_mt16 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static float4_mt16 mul([This] float4_mt16 a, float4x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // float4x4_mt16

#region double2x2_mt4

public partial struct double2x2_mt4
{
    /// <summary>
    /// Scale a double2x2_mt4 columns by double2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator *(double2x2_mt4 a, double2_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a double2x2_mt4 rows by double2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator *(double2_mt4 a, double2x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2_mt4 mul([This] double2x2_mt4 a, double2_mt4 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static double2_mt4 mul([This] double2_mt4 a, double2x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // double2x2_mt4

#region double2x2_mt8

public partial struct double2x2_mt8
{
    /// <summary>
    /// Scale a double2x2_mt8 columns by double2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator *(double2x2_mt8 a, double2_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a double2x2_mt8 rows by double2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator *(double2_mt8 a, double2x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2_mt8 mul([This] double2x2_mt8 a, double2_mt8 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static double2_mt8 mul([This] double2_mt8 a, double2x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // double2x2_mt8

#region double2x2_mt16

public partial struct double2x2_mt16
{
    /// <summary>
    /// Scale a double2x2_mt16 columns by double2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator *(double2x2_mt16 a, double2_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a double2x2_mt16 rows by double2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator *(double2_mt16 a, double2x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2_mt16 mul([This] double2x2_mt16 a, double2_mt16 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static double2_mt16 mul([This] double2_mt16 a, double2x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // double2x2_mt16

#region double2x3_mt4

public partial struct double2x3_mt4
{
    /// <summary>
    /// Scale a double2x3_mt4 columns by double3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator *(double2x3_mt4 a, double3_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a double2x3_mt4 rows by double2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator *(double2_mt4 a, double2x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2_mt4 mul([This] double2x3_mt4 a, double3_mt4 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static double3_mt4 mul([This] double2_mt4 a, double2x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // double2x3_mt4

#region double2x3_mt8

public partial struct double2x3_mt8
{
    /// <summary>
    /// Scale a double2x3_mt8 columns by double3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator *(double2x3_mt8 a, double3_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a double2x3_mt8 rows by double2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator *(double2_mt8 a, double2x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2_mt8 mul([This] double2x3_mt8 a, double3_mt8 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static double3_mt8 mul([This] double2_mt8 a, double2x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // double2x3_mt8

#region double2x3_mt16

public partial struct double2x3_mt16
{
    /// <summary>
    /// Scale a double2x3_mt16 columns by double3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator *(double2x3_mt16 a, double3_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a double2x3_mt16 rows by double2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator *(double2_mt16 a, double2x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2_mt16 mul([This] double2x3_mt16 a, double3_mt16 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static double3_mt16 mul([This] double2_mt16 a, double2x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // double2x3_mt16

#region double2x4_mt4

public partial struct double2x4_mt4
{
    /// <summary>
    /// Scale a double2x4_mt4 columns by double4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator *(double2x4_mt4 a, double4_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a double2x4_mt4 rows by double2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator *(double2_mt4 a, double2x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2_mt4 mul([This] double2x4_mt4 a, double4_mt4 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static double4_mt4 mul([This] double2_mt4 a, double2x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // double2x4_mt4

#region double2x4_mt8

public partial struct double2x4_mt8
{
    /// <summary>
    /// Scale a double2x4_mt8 columns by double4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator *(double2x4_mt8 a, double4_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a double2x4_mt8 rows by double2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator *(double2_mt8 a, double2x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2_mt8 mul([This] double2x4_mt8 a, double4_mt8 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static double4_mt8 mul([This] double2_mt8 a, double2x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // double2x4_mt8

#region double2x4_mt16

public partial struct double2x4_mt16
{
    /// <summary>
    /// Scale a double2x4_mt16 columns by double4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator *(double2x4_mt16 a, double4_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a double2x4_mt16 rows by double2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator *(double2_mt16 a, double2x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2_mt16 mul([This] double2x4_mt16 a, double4_mt16 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static double4_mt16 mul([This] double2_mt16 a, double2x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // double2x4_mt16

#region double3x2_mt4

public partial struct double3x2_mt4
{
    /// <summary>
    /// Scale a double3x2_mt4 columns by double2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator *(double3x2_mt4 a, double2_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a double3x2_mt4 rows by double3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator *(double3_mt4 a, double3x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3_mt4 mul([This] double3x2_mt4 a, double2_mt4 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static double2_mt4 mul([This] double3_mt4 a, double3x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // double3x2_mt4

#region double3x2_mt8

public partial struct double3x2_mt8
{
    /// <summary>
    /// Scale a double3x2_mt8 columns by double2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator *(double3x2_mt8 a, double2_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a double3x2_mt8 rows by double3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator *(double3_mt8 a, double3x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3_mt8 mul([This] double3x2_mt8 a, double2_mt8 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static double2_mt8 mul([This] double3_mt8 a, double3x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // double3x2_mt8

#region double3x2_mt16

public partial struct double3x2_mt16
{
    /// <summary>
    /// Scale a double3x2_mt16 columns by double2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator *(double3x2_mt16 a, double2_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a double3x2_mt16 rows by double3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator *(double3_mt16 a, double3x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3_mt16 mul([This] double3x2_mt16 a, double2_mt16 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static double2_mt16 mul([This] double3_mt16 a, double3x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // double3x2_mt16

#region double3x3_mt4

public partial struct double3x3_mt4
{
    /// <summary>
    /// Scale a double3x3_mt4 columns by double3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator *(double3x3_mt4 a, double3_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a double3x3_mt4 rows by double3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator *(double3_mt4 a, double3x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3_mt4 mul([This] double3x3_mt4 a, double3_mt4 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static double3_mt4 mul([This] double3_mt4 a, double3x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // double3x3_mt4

#region double3x3_mt8

public partial struct double3x3_mt8
{
    /// <summary>
    /// Scale a double3x3_mt8 columns by double3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator *(double3x3_mt8 a, double3_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a double3x3_mt8 rows by double3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator *(double3_mt8 a, double3x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3_mt8 mul([This] double3x3_mt8 a, double3_mt8 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static double3_mt8 mul([This] double3_mt8 a, double3x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // double3x3_mt8

#region double3x3_mt16

public partial struct double3x3_mt16
{
    /// <summary>
    /// Scale a double3x3_mt16 columns by double3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator *(double3x3_mt16 a, double3_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a double3x3_mt16 rows by double3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator *(double3_mt16 a, double3x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3_mt16 mul([This] double3x3_mt16 a, double3_mt16 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static double3_mt16 mul([This] double3_mt16 a, double3x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // double3x3_mt16

#region double3x4_mt4

public partial struct double3x4_mt4
{
    /// <summary>
    /// Scale a double3x4_mt4 columns by double4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator *(double3x4_mt4 a, double4_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a double3x4_mt4 rows by double3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator *(double3_mt4 a, double3x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3_mt4 mul([This] double3x4_mt4 a, double4_mt4 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static double4_mt4 mul([This] double3_mt4 a, double3x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // double3x4_mt4

#region double3x4_mt8

public partial struct double3x4_mt8
{
    /// <summary>
    /// Scale a double3x4_mt8 columns by double4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator *(double3x4_mt8 a, double4_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a double3x4_mt8 rows by double3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator *(double3_mt8 a, double3x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3_mt8 mul([This] double3x4_mt8 a, double4_mt8 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static double4_mt8 mul([This] double3_mt8 a, double3x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // double3x4_mt8

#region double3x4_mt16

public partial struct double3x4_mt16
{
    /// <summary>
    /// Scale a double3x4_mt16 columns by double4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator *(double3x4_mt16 a, double4_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a double3x4_mt16 rows by double3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator *(double3_mt16 a, double3x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3_mt16 mul([This] double3x4_mt16 a, double4_mt16 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static double4_mt16 mul([This] double3_mt16 a, double3x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // double3x4_mt16

#region double4x2_mt4

public partial struct double4x2_mt4
{
    /// <summary>
    /// Scale a double4x2_mt4 columns by double2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator *(double4x2_mt4 a, double2_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a double4x2_mt4 rows by double4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator *(double4_mt4 a, double4x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4_mt4 mul([This] double4x2_mt4 a, double2_mt4 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static double2_mt4 mul([This] double4_mt4 a, double4x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // double4x2_mt4

#region double4x2_mt8

public partial struct double4x2_mt8
{
    /// <summary>
    /// Scale a double4x2_mt8 columns by double2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator *(double4x2_mt8 a, double2_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a double4x2_mt8 rows by double4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator *(double4_mt8 a, double4x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4_mt8 mul([This] double4x2_mt8 a, double2_mt8 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static double2_mt8 mul([This] double4_mt8 a, double4x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // double4x2_mt8

#region double4x2_mt16

public partial struct double4x2_mt16
{
    /// <summary>
    /// Scale a double4x2_mt16 columns by double2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator *(double4x2_mt16 a, double2_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a double4x2_mt16 rows by double4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator *(double4_mt16 a, double4x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4_mt16 mul([This] double4x2_mt16 a, double2_mt16 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static double2_mt16 mul([This] double4_mt16 a, double4x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // double4x2_mt16

#region double4x3_mt4

public partial struct double4x3_mt4
{
    /// <summary>
    /// Scale a double4x3_mt4 columns by double3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator *(double4x3_mt4 a, double3_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a double4x3_mt4 rows by double4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator *(double4_mt4 a, double4x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4_mt4 mul([This] double4x3_mt4 a, double3_mt4 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static double3_mt4 mul([This] double4_mt4 a, double4x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // double4x3_mt4

#region double4x3_mt8

public partial struct double4x3_mt8
{
    /// <summary>
    /// Scale a double4x3_mt8 columns by double3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator *(double4x3_mt8 a, double3_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a double4x3_mt8 rows by double4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator *(double4_mt8 a, double4x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4_mt8 mul([This] double4x3_mt8 a, double3_mt8 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static double3_mt8 mul([This] double4_mt8 a, double4x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // double4x3_mt8

#region double4x3_mt16

public partial struct double4x3_mt16
{
    /// <summary>
    /// Scale a double4x3_mt16 columns by double3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator *(double4x3_mt16 a, double3_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a double4x3_mt16 rows by double4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator *(double4_mt16 a, double4x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4_mt16 mul([This] double4x3_mt16 a, double3_mt16 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static double3_mt16 mul([This] double4_mt16 a, double4x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // double4x3_mt16

#region double4x4_mt4

public partial struct double4x4_mt4
{
    /// <summary>
    /// Scale a double4x4_mt4 columns by double4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator *(double4x4_mt4 a, double4_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a double4x4_mt4 rows by double4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator *(double4_mt4 a, double4x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4_mt4 mul([This] double4x4_mt4 a, double4_mt4 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static double4_mt4 mul([This] double4_mt4 a, double4x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // double4x4_mt4

#region double4x4_mt8

public partial struct double4x4_mt8
{
    /// <summary>
    /// Scale a double4x4_mt8 columns by double4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator *(double4x4_mt8 a, double4_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a double4x4_mt8 rows by double4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator *(double4_mt8 a, double4x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4_mt8 mul([This] double4x4_mt8 a, double4_mt8 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static double4_mt8 mul([This] double4_mt8 a, double4x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // double4x4_mt8

#region double4x4_mt16

public partial struct double4x4_mt16
{
    /// <summary>
    /// Scale a double4x4_mt16 columns by double4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator *(double4x4_mt16 a, double4_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a double4x4_mt16 rows by double4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator *(double4_mt16 a, double4x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4_mt16 mul([This] double4x4_mt16 a, double4_mt16 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static double4_mt16 mul([This] double4_mt16 a, double4x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // double4x4_mt16

#region int2x2_mt4

public partial struct int2x2_mt4
{
    /// <summary>
    /// Scale a int2x2_mt4 columns by int2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator *(int2x2_mt4 a, int2_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a int2x2_mt4 rows by int2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator *(int2_mt4 a, int2x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2_mt4 mul([This] int2x2_mt4 a, int2_mt4 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static int2_mt4 mul([This] int2_mt4 a, int2x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // int2x2_mt4

#region int2x2_mt8

public partial struct int2x2_mt8
{
    /// <summary>
    /// Scale a int2x2_mt8 columns by int2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator *(int2x2_mt8 a, int2_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a int2x2_mt8 rows by int2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator *(int2_mt8 a, int2x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2_mt8 mul([This] int2x2_mt8 a, int2_mt8 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static int2_mt8 mul([This] int2_mt8 a, int2x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // int2x2_mt8

#region int2x2_mt16

public partial struct int2x2_mt16
{
    /// <summary>
    /// Scale a int2x2_mt16 columns by int2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator *(int2x2_mt16 a, int2_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a int2x2_mt16 rows by int2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator *(int2_mt16 a, int2x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2_mt16 mul([This] int2x2_mt16 a, int2_mt16 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static int2_mt16 mul([This] int2_mt16 a, int2x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // int2x2_mt16

#region int2x3_mt4

public partial struct int2x3_mt4
{
    /// <summary>
    /// Scale a int2x3_mt4 columns by int3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator *(int2x3_mt4 a, int3_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a int2x3_mt4 rows by int2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator *(int2_mt4 a, int2x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2_mt4 mul([This] int2x3_mt4 a, int3_mt4 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static int3_mt4 mul([This] int2_mt4 a, int2x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // int2x3_mt4

#region int2x3_mt8

public partial struct int2x3_mt8
{
    /// <summary>
    /// Scale a int2x3_mt8 columns by int3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator *(int2x3_mt8 a, int3_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a int2x3_mt8 rows by int2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator *(int2_mt8 a, int2x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2_mt8 mul([This] int2x3_mt8 a, int3_mt8 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static int3_mt8 mul([This] int2_mt8 a, int2x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // int2x3_mt8

#region int2x3_mt16

public partial struct int2x3_mt16
{
    /// <summary>
    /// Scale a int2x3_mt16 columns by int3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator *(int2x3_mt16 a, int3_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a int2x3_mt16 rows by int2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator *(int2_mt16 a, int2x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2_mt16 mul([This] int2x3_mt16 a, int3_mt16 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static int3_mt16 mul([This] int2_mt16 a, int2x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // int2x3_mt16

#region int2x4_mt4

public partial struct int2x4_mt4
{
    /// <summary>
    /// Scale a int2x4_mt4 columns by int4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator *(int2x4_mt4 a, int4_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a int2x4_mt4 rows by int2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator *(int2_mt4 a, int2x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2_mt4 mul([This] int2x4_mt4 a, int4_mt4 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static int4_mt4 mul([This] int2_mt4 a, int2x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // int2x4_mt4

#region int2x4_mt8

public partial struct int2x4_mt8
{
    /// <summary>
    /// Scale a int2x4_mt8 columns by int4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator *(int2x4_mt8 a, int4_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a int2x4_mt8 rows by int2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator *(int2_mt8 a, int2x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2_mt8 mul([This] int2x4_mt8 a, int4_mt8 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static int4_mt8 mul([This] int2_mt8 a, int2x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // int2x4_mt8

#region int2x4_mt16

public partial struct int2x4_mt16
{
    /// <summary>
    /// Scale a int2x4_mt16 columns by int4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator *(int2x4_mt16 a, int4_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a int2x4_mt16 rows by int2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator *(int2_mt16 a, int2x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2_mt16 mul([This] int2x4_mt16 a, int4_mt16 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static int4_mt16 mul([This] int2_mt16 a, int2x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // int2x4_mt16

#region int3x2_mt4

public partial struct int3x2_mt4
{
    /// <summary>
    /// Scale a int3x2_mt4 columns by int2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator *(int3x2_mt4 a, int2_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a int3x2_mt4 rows by int3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator *(int3_mt4 a, int3x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3_mt4 mul([This] int3x2_mt4 a, int2_mt4 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static int2_mt4 mul([This] int3_mt4 a, int3x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // int3x2_mt4

#region int3x2_mt8

public partial struct int3x2_mt8
{
    /// <summary>
    /// Scale a int3x2_mt8 columns by int2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator *(int3x2_mt8 a, int2_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a int3x2_mt8 rows by int3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator *(int3_mt8 a, int3x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3_mt8 mul([This] int3x2_mt8 a, int2_mt8 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static int2_mt8 mul([This] int3_mt8 a, int3x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // int3x2_mt8

#region int3x2_mt16

public partial struct int3x2_mt16
{
    /// <summary>
    /// Scale a int3x2_mt16 columns by int2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator *(int3x2_mt16 a, int2_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a int3x2_mt16 rows by int3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator *(int3_mt16 a, int3x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3_mt16 mul([This] int3x2_mt16 a, int2_mt16 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static int2_mt16 mul([This] int3_mt16 a, int3x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // int3x2_mt16

#region int3x3_mt4

public partial struct int3x3_mt4
{
    /// <summary>
    /// Scale a int3x3_mt4 columns by int3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator *(int3x3_mt4 a, int3_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a int3x3_mt4 rows by int3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator *(int3_mt4 a, int3x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3_mt4 mul([This] int3x3_mt4 a, int3_mt4 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static int3_mt4 mul([This] int3_mt4 a, int3x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // int3x3_mt4

#region int3x3_mt8

public partial struct int3x3_mt8
{
    /// <summary>
    /// Scale a int3x3_mt8 columns by int3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator *(int3x3_mt8 a, int3_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a int3x3_mt8 rows by int3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator *(int3_mt8 a, int3x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3_mt8 mul([This] int3x3_mt8 a, int3_mt8 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static int3_mt8 mul([This] int3_mt8 a, int3x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // int3x3_mt8

#region int3x3_mt16

public partial struct int3x3_mt16
{
    /// <summary>
    /// Scale a int3x3_mt16 columns by int3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator *(int3x3_mt16 a, int3_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a int3x3_mt16 rows by int3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator *(int3_mt16 a, int3x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3_mt16 mul([This] int3x3_mt16 a, int3_mt16 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static int3_mt16 mul([This] int3_mt16 a, int3x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // int3x3_mt16

#region int3x4_mt4

public partial struct int3x4_mt4
{
    /// <summary>
    /// Scale a int3x4_mt4 columns by int4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator *(int3x4_mt4 a, int4_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a int3x4_mt4 rows by int3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator *(int3_mt4 a, int3x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3_mt4 mul([This] int3x4_mt4 a, int4_mt4 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static int4_mt4 mul([This] int3_mt4 a, int3x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // int3x4_mt4

#region int3x4_mt8

public partial struct int3x4_mt8
{
    /// <summary>
    /// Scale a int3x4_mt8 columns by int4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator *(int3x4_mt8 a, int4_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a int3x4_mt8 rows by int3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator *(int3_mt8 a, int3x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3_mt8 mul([This] int3x4_mt8 a, int4_mt8 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static int4_mt8 mul([This] int3_mt8 a, int3x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // int3x4_mt8

#region int3x4_mt16

public partial struct int3x4_mt16
{
    /// <summary>
    /// Scale a int3x4_mt16 columns by int4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator *(int3x4_mt16 a, int4_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a int3x4_mt16 rows by int3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator *(int3_mt16 a, int3x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3_mt16 mul([This] int3x4_mt16 a, int4_mt16 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static int4_mt16 mul([This] int3_mt16 a, int3x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // int3x4_mt16

#region int4x2_mt4

public partial struct int4x2_mt4
{
    /// <summary>
    /// Scale a int4x2_mt4 columns by int2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator *(int4x2_mt4 a, int2_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a int4x2_mt4 rows by int4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator *(int4_mt4 a, int4x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4_mt4 mul([This] int4x2_mt4 a, int2_mt4 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static int2_mt4 mul([This] int4_mt4 a, int4x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // int4x2_mt4

#region int4x2_mt8

public partial struct int4x2_mt8
{
    /// <summary>
    /// Scale a int4x2_mt8 columns by int2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator *(int4x2_mt8 a, int2_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a int4x2_mt8 rows by int4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator *(int4_mt8 a, int4x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4_mt8 mul([This] int4x2_mt8 a, int2_mt8 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static int2_mt8 mul([This] int4_mt8 a, int4x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // int4x2_mt8

#region int4x2_mt16

public partial struct int4x2_mt16
{
    /// <summary>
    /// Scale a int4x2_mt16 columns by int2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator *(int4x2_mt16 a, int2_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a int4x2_mt16 rows by int4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator *(int4_mt16 a, int4x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4_mt16 mul([This] int4x2_mt16 a, int2_mt16 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static int2_mt16 mul([This] int4_mt16 a, int4x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // int4x2_mt16

#region int4x3_mt4

public partial struct int4x3_mt4
{
    /// <summary>
    /// Scale a int4x3_mt4 columns by int3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator *(int4x3_mt4 a, int3_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a int4x3_mt4 rows by int4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator *(int4_mt4 a, int4x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4_mt4 mul([This] int4x3_mt4 a, int3_mt4 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static int3_mt4 mul([This] int4_mt4 a, int4x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // int4x3_mt4

#region int4x3_mt8

public partial struct int4x3_mt8
{
    /// <summary>
    /// Scale a int4x3_mt8 columns by int3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator *(int4x3_mt8 a, int3_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a int4x3_mt8 rows by int4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator *(int4_mt8 a, int4x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4_mt8 mul([This] int4x3_mt8 a, int3_mt8 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static int3_mt8 mul([This] int4_mt8 a, int4x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // int4x3_mt8

#region int4x3_mt16

public partial struct int4x3_mt16
{
    /// <summary>
    /// Scale a int4x3_mt16 columns by int3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator *(int4x3_mt16 a, int3_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a int4x3_mt16 rows by int4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator *(int4_mt16 a, int4x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4_mt16 mul([This] int4x3_mt16 a, int3_mt16 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static int3_mt16 mul([This] int4_mt16 a, int4x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // int4x3_mt16

#region int4x4_mt4

public partial struct int4x4_mt4
{
    /// <summary>
    /// Scale a int4x4_mt4 columns by int4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator *(int4x4_mt4 a, int4_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a int4x4_mt4 rows by int4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator *(int4_mt4 a, int4x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4_mt4 mul([This] int4x4_mt4 a, int4_mt4 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static int4_mt4 mul([This] int4_mt4 a, int4x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // int4x4_mt4

#region int4x4_mt8

public partial struct int4x4_mt8
{
    /// <summary>
    /// Scale a int4x4_mt8 columns by int4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator *(int4x4_mt8 a, int4_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a int4x4_mt8 rows by int4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator *(int4_mt8 a, int4x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4_mt8 mul([This] int4x4_mt8 a, int4_mt8 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static int4_mt8 mul([This] int4_mt8 a, int4x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // int4x4_mt8

#region int4x4_mt16

public partial struct int4x4_mt16
{
    /// <summary>
    /// Scale a int4x4_mt16 columns by int4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator *(int4x4_mt16 a, int4_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a int4x4_mt16 rows by int4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator *(int4_mt16 a, int4x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4_mt16 mul([This] int4x4_mt16 a, int4_mt16 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static int4_mt16 mul([This] int4_mt16 a, int4x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // int4x4_mt16

#region uint2x2_mt4

public partial struct uint2x2_mt4
{
    /// <summary>
    /// Scale a uint2x2_mt4 columns by uint2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator *(uint2x2_mt4 a, uint2_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a uint2x2_mt4 rows by uint2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator *(uint2_mt4 a, uint2x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2_mt4 mul([This] uint2x2_mt4 a, uint2_mt4 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static uint2_mt4 mul([This] uint2_mt4 a, uint2x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // uint2x2_mt4

#region uint2x2_mt8

public partial struct uint2x2_mt8
{
    /// <summary>
    /// Scale a uint2x2_mt8 columns by uint2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator *(uint2x2_mt8 a, uint2_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a uint2x2_mt8 rows by uint2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator *(uint2_mt8 a, uint2x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2_mt8 mul([This] uint2x2_mt8 a, uint2_mt8 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static uint2_mt8 mul([This] uint2_mt8 a, uint2x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // uint2x2_mt8

#region uint2x2_mt16

public partial struct uint2x2_mt16
{
    /// <summary>
    /// Scale a uint2x2_mt16 columns by uint2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator *(uint2x2_mt16 a, uint2_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a uint2x2_mt16 rows by uint2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator *(uint2_mt16 a, uint2x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2_mt16 mul([This] uint2x2_mt16 a, uint2_mt16 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static uint2_mt16 mul([This] uint2_mt16 a, uint2x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // uint2x2_mt16

#region uint2x3_mt4

public partial struct uint2x3_mt4
{
    /// <summary>
    /// Scale a uint2x3_mt4 columns by uint3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator *(uint2x3_mt4 a, uint3_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a uint2x3_mt4 rows by uint2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator *(uint2_mt4 a, uint2x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2_mt4 mul([This] uint2x3_mt4 a, uint3_mt4 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static uint3_mt4 mul([This] uint2_mt4 a, uint2x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // uint2x3_mt4

#region uint2x3_mt8

public partial struct uint2x3_mt8
{
    /// <summary>
    /// Scale a uint2x3_mt8 columns by uint3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator *(uint2x3_mt8 a, uint3_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a uint2x3_mt8 rows by uint2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator *(uint2_mt8 a, uint2x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2_mt8 mul([This] uint2x3_mt8 a, uint3_mt8 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static uint3_mt8 mul([This] uint2_mt8 a, uint2x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // uint2x3_mt8

#region uint2x3_mt16

public partial struct uint2x3_mt16
{
    /// <summary>
    /// Scale a uint2x3_mt16 columns by uint3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator *(uint2x3_mt16 a, uint3_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a uint2x3_mt16 rows by uint2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator *(uint2_mt16 a, uint2x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2_mt16 mul([This] uint2x3_mt16 a, uint3_mt16 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static uint3_mt16 mul([This] uint2_mt16 a, uint2x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // uint2x3_mt16

#region uint2x4_mt4

public partial struct uint2x4_mt4
{
    /// <summary>
    /// Scale a uint2x4_mt4 columns by uint4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator *(uint2x4_mt4 a, uint4_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a uint2x4_mt4 rows by uint2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator *(uint2_mt4 a, uint2x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2_mt4 mul([This] uint2x4_mt4 a, uint4_mt4 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static uint4_mt4 mul([This] uint2_mt4 a, uint2x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // uint2x4_mt4

#region uint2x4_mt8

public partial struct uint2x4_mt8
{
    /// <summary>
    /// Scale a uint2x4_mt8 columns by uint4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator *(uint2x4_mt8 a, uint4_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a uint2x4_mt8 rows by uint2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator *(uint2_mt8 a, uint2x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2_mt8 mul([This] uint2x4_mt8 a, uint4_mt8 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static uint4_mt8 mul([This] uint2_mt8 a, uint2x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // uint2x4_mt8

#region uint2x4_mt16

public partial struct uint2x4_mt16
{
    /// <summary>
    /// Scale a uint2x4_mt16 columns by uint4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator *(uint2x4_mt16 a, uint4_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a uint2x4_mt16 rows by uint2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator *(uint2_mt16 a, uint2x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2_mt16 mul([This] uint2x4_mt16 a, uint4_mt16 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static uint4_mt16 mul([This] uint2_mt16 a, uint2x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // uint2x4_mt16

#region uint3x2_mt4

public partial struct uint3x2_mt4
{
    /// <summary>
    /// Scale a uint3x2_mt4 columns by uint2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator *(uint3x2_mt4 a, uint2_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a uint3x2_mt4 rows by uint3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator *(uint3_mt4 a, uint3x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3_mt4 mul([This] uint3x2_mt4 a, uint2_mt4 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static uint2_mt4 mul([This] uint3_mt4 a, uint3x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // uint3x2_mt4

#region uint3x2_mt8

public partial struct uint3x2_mt8
{
    /// <summary>
    /// Scale a uint3x2_mt8 columns by uint2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator *(uint3x2_mt8 a, uint2_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a uint3x2_mt8 rows by uint3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator *(uint3_mt8 a, uint3x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3_mt8 mul([This] uint3x2_mt8 a, uint2_mt8 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static uint2_mt8 mul([This] uint3_mt8 a, uint3x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // uint3x2_mt8

#region uint3x2_mt16

public partial struct uint3x2_mt16
{
    /// <summary>
    /// Scale a uint3x2_mt16 columns by uint2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator *(uint3x2_mt16 a, uint2_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a uint3x2_mt16 rows by uint3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator *(uint3_mt16 a, uint3x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3_mt16 mul([This] uint3x2_mt16 a, uint2_mt16 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static uint2_mt16 mul([This] uint3_mt16 a, uint3x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // uint3x2_mt16

#region uint3x3_mt4

public partial struct uint3x3_mt4
{
    /// <summary>
    /// Scale a uint3x3_mt4 columns by uint3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator *(uint3x3_mt4 a, uint3_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a uint3x3_mt4 rows by uint3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator *(uint3_mt4 a, uint3x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3_mt4 mul([This] uint3x3_mt4 a, uint3_mt4 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static uint3_mt4 mul([This] uint3_mt4 a, uint3x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // uint3x3_mt4

#region uint3x3_mt8

public partial struct uint3x3_mt8
{
    /// <summary>
    /// Scale a uint3x3_mt8 columns by uint3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator *(uint3x3_mt8 a, uint3_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a uint3x3_mt8 rows by uint3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator *(uint3_mt8 a, uint3x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3_mt8 mul([This] uint3x3_mt8 a, uint3_mt8 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static uint3_mt8 mul([This] uint3_mt8 a, uint3x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // uint3x3_mt8

#region uint3x3_mt16

public partial struct uint3x3_mt16
{
    /// <summary>
    /// Scale a uint3x3_mt16 columns by uint3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator *(uint3x3_mt16 a, uint3_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a uint3x3_mt16 rows by uint3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator *(uint3_mt16 a, uint3x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3_mt16 mul([This] uint3x3_mt16 a, uint3_mt16 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static uint3_mt16 mul([This] uint3_mt16 a, uint3x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // uint3x3_mt16

#region uint3x4_mt4

public partial struct uint3x4_mt4
{
    /// <summary>
    /// Scale a uint3x4_mt4 columns by uint4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator *(uint3x4_mt4 a, uint4_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a uint3x4_mt4 rows by uint3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator *(uint3_mt4 a, uint3x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3_mt4 mul([This] uint3x4_mt4 a, uint4_mt4 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static uint4_mt4 mul([This] uint3_mt4 a, uint3x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // uint3x4_mt4

#region uint3x4_mt8

public partial struct uint3x4_mt8
{
    /// <summary>
    /// Scale a uint3x4_mt8 columns by uint4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator *(uint3x4_mt8 a, uint4_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a uint3x4_mt8 rows by uint3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator *(uint3_mt8 a, uint3x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3_mt8 mul([This] uint3x4_mt8 a, uint4_mt8 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static uint4_mt8 mul([This] uint3_mt8 a, uint3x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // uint3x4_mt8

#region uint3x4_mt16

public partial struct uint3x4_mt16
{
    /// <summary>
    /// Scale a uint3x4_mt16 columns by uint4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator *(uint3x4_mt16 a, uint4_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a uint3x4_mt16 rows by uint3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator *(uint3_mt16 a, uint3x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3_mt16 mul([This] uint3x4_mt16 a, uint4_mt16 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static uint4_mt16 mul([This] uint3_mt16 a, uint3x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // uint3x4_mt16

#region uint4x2_mt4

public partial struct uint4x2_mt4
{
    /// <summary>
    /// Scale a uint4x2_mt4 columns by uint2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator *(uint4x2_mt4 a, uint2_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a uint4x2_mt4 rows by uint4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator *(uint4_mt4 a, uint4x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4_mt4 mul([This] uint4x2_mt4 a, uint2_mt4 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static uint2_mt4 mul([This] uint4_mt4 a, uint4x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // uint4x2_mt4

#region uint4x2_mt8

public partial struct uint4x2_mt8
{
    /// <summary>
    /// Scale a uint4x2_mt8 columns by uint2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator *(uint4x2_mt8 a, uint2_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a uint4x2_mt8 rows by uint4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator *(uint4_mt8 a, uint4x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4_mt8 mul([This] uint4x2_mt8 a, uint2_mt8 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static uint2_mt8 mul([This] uint4_mt8 a, uint4x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // uint4x2_mt8

#region uint4x2_mt16

public partial struct uint4x2_mt16
{
    /// <summary>
    /// Scale a uint4x2_mt16 columns by uint2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator *(uint4x2_mt16 a, uint2_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a uint4x2_mt16 rows by uint4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator *(uint4_mt16 a, uint4x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4_mt16 mul([This] uint4x2_mt16 a, uint2_mt16 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static uint2_mt16 mul([This] uint4_mt16 a, uint4x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // uint4x2_mt16

#region uint4x3_mt4

public partial struct uint4x3_mt4
{
    /// <summary>
    /// Scale a uint4x3_mt4 columns by uint3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator *(uint4x3_mt4 a, uint3_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a uint4x3_mt4 rows by uint4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator *(uint4_mt4 a, uint4x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4_mt4 mul([This] uint4x3_mt4 a, uint3_mt4 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static uint3_mt4 mul([This] uint4_mt4 a, uint4x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // uint4x3_mt4

#region uint4x3_mt8

public partial struct uint4x3_mt8
{
    /// <summary>
    /// Scale a uint4x3_mt8 columns by uint3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator *(uint4x3_mt8 a, uint3_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a uint4x3_mt8 rows by uint4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator *(uint4_mt8 a, uint4x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4_mt8 mul([This] uint4x3_mt8 a, uint3_mt8 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static uint3_mt8 mul([This] uint4_mt8 a, uint4x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // uint4x3_mt8

#region uint4x3_mt16

public partial struct uint4x3_mt16
{
    /// <summary>
    /// Scale a uint4x3_mt16 columns by uint3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator *(uint4x3_mt16 a, uint3_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a uint4x3_mt16 rows by uint4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator *(uint4_mt16 a, uint4x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4_mt16 mul([This] uint4x3_mt16 a, uint3_mt16 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static uint3_mt16 mul([This] uint4_mt16 a, uint4x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // uint4x3_mt16

#region uint4x4_mt4

public partial struct uint4x4_mt4
{
    /// <summary>
    /// Scale a uint4x4_mt4 columns by uint4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator *(uint4x4_mt4 a, uint4_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a uint4x4_mt4 rows by uint4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator *(uint4_mt4 a, uint4x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4_mt4 mul([This] uint4x4_mt4 a, uint4_mt4 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static uint4_mt4 mul([This] uint4_mt4 a, uint4x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // uint4x4_mt4

#region uint4x4_mt8

public partial struct uint4x4_mt8
{
    /// <summary>
    /// Scale a uint4x4_mt8 columns by uint4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator *(uint4x4_mt8 a, uint4_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a uint4x4_mt8 rows by uint4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator *(uint4_mt8 a, uint4x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4_mt8 mul([This] uint4x4_mt8 a, uint4_mt8 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static uint4_mt8 mul([This] uint4_mt8 a, uint4x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // uint4x4_mt8

#region uint4x4_mt16

public partial struct uint4x4_mt16
{
    /// <summary>
    /// Scale a uint4x4_mt16 columns by uint4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator *(uint4x4_mt16 a, uint4_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a uint4x4_mt16 rows by uint4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator *(uint4_mt16 a, uint4x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4_mt16 mul([This] uint4x4_mt16 a, uint4_mt16 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static uint4_mt16 mul([This] uint4_mt16 a, uint4x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // uint4x4_mt16

#region long2x2_mt4

public partial struct long2x2_mt4
{
    /// <summary>
    /// Scale a long2x2_mt4 columns by long2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator *(long2x2_mt4 a, long2_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a long2x2_mt4 rows by long2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator *(long2_mt4 a, long2x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2_mt4 mul([This] long2x2_mt4 a, long2_mt4 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static long2_mt4 mul([This] long2_mt4 a, long2x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // long2x2_mt4

#region long2x2_mt8

public partial struct long2x2_mt8
{
    /// <summary>
    /// Scale a long2x2_mt8 columns by long2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator *(long2x2_mt8 a, long2_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a long2x2_mt8 rows by long2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator *(long2_mt8 a, long2x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2_mt8 mul([This] long2x2_mt8 a, long2_mt8 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static long2_mt8 mul([This] long2_mt8 a, long2x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // long2x2_mt8

#region long2x2_mt16

public partial struct long2x2_mt16
{
    /// <summary>
    /// Scale a long2x2_mt16 columns by long2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator *(long2x2_mt16 a, long2_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a long2x2_mt16 rows by long2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator *(long2_mt16 a, long2x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2_mt16 mul([This] long2x2_mt16 a, long2_mt16 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static long2_mt16 mul([This] long2_mt16 a, long2x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // long2x2_mt16

#region long2x3_mt4

public partial struct long2x3_mt4
{
    /// <summary>
    /// Scale a long2x3_mt4 columns by long3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator *(long2x3_mt4 a, long3_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a long2x3_mt4 rows by long2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator *(long2_mt4 a, long2x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2_mt4 mul([This] long2x3_mt4 a, long3_mt4 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static long3_mt4 mul([This] long2_mt4 a, long2x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // long2x3_mt4

#region long2x3_mt8

public partial struct long2x3_mt8
{
    /// <summary>
    /// Scale a long2x3_mt8 columns by long3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator *(long2x3_mt8 a, long3_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a long2x3_mt8 rows by long2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator *(long2_mt8 a, long2x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2_mt8 mul([This] long2x3_mt8 a, long3_mt8 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static long3_mt8 mul([This] long2_mt8 a, long2x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // long2x3_mt8

#region long2x3_mt16

public partial struct long2x3_mt16
{
    /// <summary>
    /// Scale a long2x3_mt16 columns by long3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator *(long2x3_mt16 a, long3_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a long2x3_mt16 rows by long2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator *(long2_mt16 a, long2x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2_mt16 mul([This] long2x3_mt16 a, long3_mt16 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static long3_mt16 mul([This] long2_mt16 a, long2x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // long2x3_mt16

#region long2x4_mt4

public partial struct long2x4_mt4
{
    /// <summary>
    /// Scale a long2x4_mt4 columns by long4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator *(long2x4_mt4 a, long4_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a long2x4_mt4 rows by long2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator *(long2_mt4 a, long2x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2_mt4 mul([This] long2x4_mt4 a, long4_mt4 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static long4_mt4 mul([This] long2_mt4 a, long2x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // long2x4_mt4

#region long2x4_mt8

public partial struct long2x4_mt8
{
    /// <summary>
    /// Scale a long2x4_mt8 columns by long4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator *(long2x4_mt8 a, long4_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a long2x4_mt8 rows by long2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator *(long2_mt8 a, long2x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2_mt8 mul([This] long2x4_mt8 a, long4_mt8 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static long4_mt8 mul([This] long2_mt8 a, long2x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // long2x4_mt8

#region long2x4_mt16

public partial struct long2x4_mt16
{
    /// <summary>
    /// Scale a long2x4_mt16 columns by long4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator *(long2x4_mt16 a, long4_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a long2x4_mt16 rows by long2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator *(long2_mt16 a, long2x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2_mt16 mul([This] long2x4_mt16 a, long4_mt16 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static long4_mt16 mul([This] long2_mt16 a, long2x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // long2x4_mt16

#region long3x2_mt4

public partial struct long3x2_mt4
{
    /// <summary>
    /// Scale a long3x2_mt4 columns by long2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator *(long3x2_mt4 a, long2_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a long3x2_mt4 rows by long3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator *(long3_mt4 a, long3x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3_mt4 mul([This] long3x2_mt4 a, long2_mt4 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static long2_mt4 mul([This] long3_mt4 a, long3x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // long3x2_mt4

#region long3x2_mt8

public partial struct long3x2_mt8
{
    /// <summary>
    /// Scale a long3x2_mt8 columns by long2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator *(long3x2_mt8 a, long2_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a long3x2_mt8 rows by long3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator *(long3_mt8 a, long3x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3_mt8 mul([This] long3x2_mt8 a, long2_mt8 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static long2_mt8 mul([This] long3_mt8 a, long3x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // long3x2_mt8

#region long3x2_mt16

public partial struct long3x2_mt16
{
    /// <summary>
    /// Scale a long3x2_mt16 columns by long2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator *(long3x2_mt16 a, long2_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a long3x2_mt16 rows by long3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator *(long3_mt16 a, long3x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3_mt16 mul([This] long3x2_mt16 a, long2_mt16 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static long2_mt16 mul([This] long3_mt16 a, long3x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // long3x2_mt16

#region long3x3_mt4

public partial struct long3x3_mt4
{
    /// <summary>
    /// Scale a long3x3_mt4 columns by long3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator *(long3x3_mt4 a, long3_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a long3x3_mt4 rows by long3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator *(long3_mt4 a, long3x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3_mt4 mul([This] long3x3_mt4 a, long3_mt4 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static long3_mt4 mul([This] long3_mt4 a, long3x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // long3x3_mt4

#region long3x3_mt8

public partial struct long3x3_mt8
{
    /// <summary>
    /// Scale a long3x3_mt8 columns by long3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator *(long3x3_mt8 a, long3_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a long3x3_mt8 rows by long3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator *(long3_mt8 a, long3x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3_mt8 mul([This] long3x3_mt8 a, long3_mt8 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static long3_mt8 mul([This] long3_mt8 a, long3x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // long3x3_mt8

#region long3x3_mt16

public partial struct long3x3_mt16
{
    /// <summary>
    /// Scale a long3x3_mt16 columns by long3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator *(long3x3_mt16 a, long3_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a long3x3_mt16 rows by long3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator *(long3_mt16 a, long3x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3_mt16 mul([This] long3x3_mt16 a, long3_mt16 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static long3_mt16 mul([This] long3_mt16 a, long3x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // long3x3_mt16

#region long3x4_mt4

public partial struct long3x4_mt4
{
    /// <summary>
    /// Scale a long3x4_mt4 columns by long4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator *(long3x4_mt4 a, long4_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a long3x4_mt4 rows by long3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator *(long3_mt4 a, long3x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3_mt4 mul([This] long3x4_mt4 a, long4_mt4 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static long4_mt4 mul([This] long3_mt4 a, long3x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // long3x4_mt4

#region long3x4_mt8

public partial struct long3x4_mt8
{
    /// <summary>
    /// Scale a long3x4_mt8 columns by long4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator *(long3x4_mt8 a, long4_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a long3x4_mt8 rows by long3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator *(long3_mt8 a, long3x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3_mt8 mul([This] long3x4_mt8 a, long4_mt8 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static long4_mt8 mul([This] long3_mt8 a, long3x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // long3x4_mt8

#region long3x4_mt16

public partial struct long3x4_mt16
{
    /// <summary>
    /// Scale a long3x4_mt16 columns by long4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator *(long3x4_mt16 a, long4_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a long3x4_mt16 rows by long3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator *(long3_mt16 a, long3x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3_mt16 mul([This] long3x4_mt16 a, long4_mt16 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static long4_mt16 mul([This] long3_mt16 a, long3x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // long3x4_mt16

#region long4x2_mt4

public partial struct long4x2_mt4
{
    /// <summary>
    /// Scale a long4x2_mt4 columns by long2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator *(long4x2_mt4 a, long2_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a long4x2_mt4 rows by long4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator *(long4_mt4 a, long4x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4_mt4 mul([This] long4x2_mt4 a, long2_mt4 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static long2_mt4 mul([This] long4_mt4 a, long4x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // long4x2_mt4

#region long4x2_mt8

public partial struct long4x2_mt8
{
    /// <summary>
    /// Scale a long4x2_mt8 columns by long2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator *(long4x2_mt8 a, long2_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a long4x2_mt8 rows by long4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator *(long4_mt8 a, long4x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4_mt8 mul([This] long4x2_mt8 a, long2_mt8 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static long2_mt8 mul([This] long4_mt8 a, long4x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // long4x2_mt8

#region long4x2_mt16

public partial struct long4x2_mt16
{
    /// <summary>
    /// Scale a long4x2_mt16 columns by long2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator *(long4x2_mt16 a, long2_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a long4x2_mt16 rows by long4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator *(long4_mt16 a, long4x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4_mt16 mul([This] long4x2_mt16 a, long2_mt16 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static long2_mt16 mul([This] long4_mt16 a, long4x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // long4x2_mt16

#region long4x3_mt4

public partial struct long4x3_mt4
{
    /// <summary>
    /// Scale a long4x3_mt4 columns by long3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator *(long4x3_mt4 a, long3_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a long4x3_mt4 rows by long4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator *(long4_mt4 a, long4x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4_mt4 mul([This] long4x3_mt4 a, long3_mt4 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static long3_mt4 mul([This] long4_mt4 a, long4x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // long4x3_mt4

#region long4x3_mt8

public partial struct long4x3_mt8
{
    /// <summary>
    /// Scale a long4x3_mt8 columns by long3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator *(long4x3_mt8 a, long3_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a long4x3_mt8 rows by long4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator *(long4_mt8 a, long4x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4_mt8 mul([This] long4x3_mt8 a, long3_mt8 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static long3_mt8 mul([This] long4_mt8 a, long4x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // long4x3_mt8

#region long4x3_mt16

public partial struct long4x3_mt16
{
    /// <summary>
    /// Scale a long4x3_mt16 columns by long3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator *(long4x3_mt16 a, long3_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a long4x3_mt16 rows by long4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator *(long4_mt16 a, long4x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4_mt16 mul([This] long4x3_mt16 a, long3_mt16 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static long3_mt16 mul([This] long4_mt16 a, long4x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // long4x3_mt16

#region long4x4_mt4

public partial struct long4x4_mt4
{
    /// <summary>
    /// Scale a long4x4_mt4 columns by long4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator *(long4x4_mt4 a, long4_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a long4x4_mt4 rows by long4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator *(long4_mt4 a, long4x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4_mt4 mul([This] long4x4_mt4 a, long4_mt4 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static long4_mt4 mul([This] long4_mt4 a, long4x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // long4x4_mt4

#region long4x4_mt8

public partial struct long4x4_mt8
{
    /// <summary>
    /// Scale a long4x4_mt8 columns by long4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator *(long4x4_mt8 a, long4_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a long4x4_mt8 rows by long4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator *(long4_mt8 a, long4x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4_mt8 mul([This] long4x4_mt8 a, long4_mt8 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static long4_mt8 mul([This] long4_mt8 a, long4x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // long4x4_mt8

#region long4x4_mt16

public partial struct long4x4_mt16
{
    /// <summary>
    /// Scale a long4x4_mt16 columns by long4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator *(long4x4_mt16 a, long4_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a long4x4_mt16 rows by long4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator *(long4_mt16 a, long4x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4_mt16 mul([This] long4x4_mt16 a, long4_mt16 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static long4_mt16 mul([This] long4_mt16 a, long4x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // long4x4_mt16

#region ulong2x2_mt4

public partial struct ulong2x2_mt4
{
    /// <summary>
    /// Scale a ulong2x2_mt4 columns by ulong2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator *(ulong2x2_mt4 a, ulong2_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a ulong2x2_mt4 rows by ulong2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator *(ulong2_mt4 a, ulong2x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2_mt4 mul([This] ulong2x2_mt4 a, ulong2_mt4 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static ulong2_mt4 mul([This] ulong2_mt4 a, ulong2x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // ulong2x2_mt4

#region ulong2x2_mt8

public partial struct ulong2x2_mt8
{
    /// <summary>
    /// Scale a ulong2x2_mt8 columns by ulong2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator *(ulong2x2_mt8 a, ulong2_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a ulong2x2_mt8 rows by ulong2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator *(ulong2_mt8 a, ulong2x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2_mt8 mul([This] ulong2x2_mt8 a, ulong2_mt8 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static ulong2_mt8 mul([This] ulong2_mt8 a, ulong2x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // ulong2x2_mt8

#region ulong2x2_mt16

public partial struct ulong2x2_mt16
{
    /// <summary>
    /// Scale a ulong2x2_mt16 columns by ulong2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator *(ulong2x2_mt16 a, ulong2_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy);

    /// <summary>
    /// Scale a ulong2x2_mt16 rows by ulong2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator *(ulong2_mt16 a, ulong2x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2_mt16 mul([This] ulong2x2_mt16 a, ulong2_mt16 b)
        => fma(a.c1, b.yy, a.c0 * b.xx); // a.c0 * b.xx + a.c1 * b.yy

    [MethodImpl(256 | 512)]
    public static ulong2_mt16 mul([This] ulong2_mt16 a, ulong2x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // ulong2x2_mt16

#region ulong2x3_mt4

public partial struct ulong2x3_mt4
{
    /// <summary>
    /// Scale a ulong2x3_mt4 columns by ulong3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator *(ulong2x3_mt4 a, ulong3_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a ulong2x3_mt4 rows by ulong2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator *(ulong2_mt4 a, ulong2x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2_mt4 mul([This] ulong2x3_mt4 a, ulong3_mt4 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static ulong3_mt4 mul([This] ulong2_mt4 a, ulong2x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // ulong2x3_mt4

#region ulong2x3_mt8

public partial struct ulong2x3_mt8
{
    /// <summary>
    /// Scale a ulong2x3_mt8 columns by ulong3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator *(ulong2x3_mt8 a, ulong3_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a ulong2x3_mt8 rows by ulong2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator *(ulong2_mt8 a, ulong2x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2_mt8 mul([This] ulong2x3_mt8 a, ulong3_mt8 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static ulong3_mt8 mul([This] ulong2_mt8 a, ulong2x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // ulong2x3_mt8

#region ulong2x3_mt16

public partial struct ulong2x3_mt16
{
    /// <summary>
    /// Scale a ulong2x3_mt16 columns by ulong3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator *(ulong2x3_mt16 a, ulong3_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz);

    /// <summary>
    /// Scale a ulong2x3_mt16 rows by ulong2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator *(ulong2_mt16 a, ulong2x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2_mt16 mul([This] ulong2x3_mt16 a, ulong3_mt16 b)
        => fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx)); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz

    [MethodImpl(256 | 512)]
    public static ulong3_mt16 mul([This] ulong2_mt16 a, ulong2x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // ulong2x3_mt16

#region ulong2x4_mt4

public partial struct ulong2x4_mt4
{
    /// <summary>
    /// Scale a ulong2x4_mt4 columns by ulong4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator *(ulong2x4_mt4 a, ulong4_mt4 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a ulong2x4_mt4 rows by ulong2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator *(ulong2_mt4 a, ulong2x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2_mt4 mul([This] ulong2x4_mt4 a, ulong4_mt4 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static ulong4_mt4 mul([This] ulong2_mt4 a, ulong2x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // ulong2x4_mt4

#region ulong2x4_mt8

public partial struct ulong2x4_mt8
{
    /// <summary>
    /// Scale a ulong2x4_mt8 columns by ulong4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator *(ulong2x4_mt8 a, ulong4_mt8 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a ulong2x4_mt8 rows by ulong2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator *(ulong2_mt8 a, ulong2x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2_mt8 mul([This] ulong2x4_mt8 a, ulong4_mt8 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static ulong4_mt8 mul([This] ulong2_mt8 a, ulong2x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // ulong2x4_mt8

#region ulong2x4_mt16

public partial struct ulong2x4_mt16
{
    /// <summary>
    /// Scale a ulong2x4_mt16 columns by ulong4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator *(ulong2x4_mt16 a, ulong4_mt16 b) 
        => new(a.c0 * b.xx, a.c1 * b.yy, a.c2 * b.zz, a.c3 * b.ww);

    /// <summary>
    /// Scale a ulong2x4_mt16 rows by ulong2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator *(ulong2_mt16 a, ulong2x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2_mt16 mul([This] ulong2x4_mt16 a, ulong4_mt16 b)
        => fma(a.c3, b.ww, fma(a.c2, b.zz, fma(a.c1, b.yy, a.c0 * b.xx))); // a.c0 * b.xx + a.c1 * b.yy + a.c2 * b.zz + a.c3 * b.ww

    [MethodImpl(256 | 512)]
    public static ulong4_mt16 mul([This] ulong2_mt16 a, ulong2x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // ulong2x4_mt16

#region ulong3x2_mt4

public partial struct ulong3x2_mt4
{
    /// <summary>
    /// Scale a ulong3x2_mt4 columns by ulong2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator *(ulong3x2_mt4 a, ulong2_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a ulong3x2_mt4 rows by ulong3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator *(ulong3_mt4 a, ulong3x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3_mt4 mul([This] ulong3x2_mt4 a, ulong2_mt4 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static ulong2_mt4 mul([This] ulong3_mt4 a, ulong3x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // ulong3x2_mt4

#region ulong3x2_mt8

public partial struct ulong3x2_mt8
{
    /// <summary>
    /// Scale a ulong3x2_mt8 columns by ulong2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator *(ulong3x2_mt8 a, ulong2_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a ulong3x2_mt8 rows by ulong3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator *(ulong3_mt8 a, ulong3x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3_mt8 mul([This] ulong3x2_mt8 a, ulong2_mt8 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static ulong2_mt8 mul([This] ulong3_mt8 a, ulong3x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // ulong3x2_mt8

#region ulong3x2_mt16

public partial struct ulong3x2_mt16
{
    /// <summary>
    /// Scale a ulong3x2_mt16 columns by ulong2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator *(ulong3x2_mt16 a, ulong2_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy);

    /// <summary>
    /// Scale a ulong3x2_mt16 rows by ulong3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator *(ulong3_mt16 a, ulong3x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3_mt16 mul([This] ulong3x2_mt16 a, ulong2_mt16 b)
        => fma(a.c1, b.yyy, a.c0 * b.xxx); // a.c0 * b.xxx + a.c1 * b.yyy

    [MethodImpl(256 | 512)]
    public static ulong2_mt16 mul([This] ulong3_mt16 a, ulong3x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // ulong3x2_mt16

#region ulong3x3_mt4

public partial struct ulong3x3_mt4
{
    /// <summary>
    /// Scale a ulong3x3_mt4 columns by ulong3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator *(ulong3x3_mt4 a, ulong3_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a ulong3x3_mt4 rows by ulong3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator *(ulong3_mt4 a, ulong3x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3_mt4 mul([This] ulong3x3_mt4 a, ulong3_mt4 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static ulong3_mt4 mul([This] ulong3_mt4 a, ulong3x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // ulong3x3_mt4

#region ulong3x3_mt8

public partial struct ulong3x3_mt8
{
    /// <summary>
    /// Scale a ulong3x3_mt8 columns by ulong3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator *(ulong3x3_mt8 a, ulong3_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a ulong3x3_mt8 rows by ulong3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator *(ulong3_mt8 a, ulong3x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3_mt8 mul([This] ulong3x3_mt8 a, ulong3_mt8 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static ulong3_mt8 mul([This] ulong3_mt8 a, ulong3x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // ulong3x3_mt8

#region ulong3x3_mt16

public partial struct ulong3x3_mt16
{
    /// <summary>
    /// Scale a ulong3x3_mt16 columns by ulong3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator *(ulong3x3_mt16 a, ulong3_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz);

    /// <summary>
    /// Scale a ulong3x3_mt16 rows by ulong3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator *(ulong3_mt16 a, ulong3x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3_mt16 mul([This] ulong3x3_mt16 a, ulong3_mt16 b)
        => fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx)); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz

    [MethodImpl(256 | 512)]
    public static ulong3_mt16 mul([This] ulong3_mt16 a, ulong3x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // ulong3x3_mt16

#region ulong3x4_mt4

public partial struct ulong3x4_mt4
{
    /// <summary>
    /// Scale a ulong3x4_mt4 columns by ulong4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator *(ulong3x4_mt4 a, ulong4_mt4 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a ulong3x4_mt4 rows by ulong3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator *(ulong3_mt4 a, ulong3x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3_mt4 mul([This] ulong3x4_mt4 a, ulong4_mt4 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static ulong4_mt4 mul([This] ulong3_mt4 a, ulong3x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // ulong3x4_mt4

#region ulong3x4_mt8

public partial struct ulong3x4_mt8
{
    /// <summary>
    /// Scale a ulong3x4_mt8 columns by ulong4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator *(ulong3x4_mt8 a, ulong4_mt8 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a ulong3x4_mt8 rows by ulong3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator *(ulong3_mt8 a, ulong3x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3_mt8 mul([This] ulong3x4_mt8 a, ulong4_mt8 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static ulong4_mt8 mul([This] ulong3_mt8 a, ulong3x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // ulong3x4_mt8

#region ulong3x4_mt16

public partial struct ulong3x4_mt16
{
    /// <summary>
    /// Scale a ulong3x4_mt16 columns by ulong4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator *(ulong3x4_mt16 a, ulong4_mt16 b) 
        => new(a.c0 * b.xxx, a.c1 * b.yyy, a.c2 * b.zzz, a.c3 * b.www);

    /// <summary>
    /// Scale a ulong3x4_mt16 rows by ulong3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator *(ulong3_mt16 a, ulong3x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3_mt16 mul([This] ulong3x4_mt16 a, ulong4_mt16 b)
        => fma(a.c3, b.www, fma(a.c2, b.zzz, fma(a.c1, b.yyy, a.c0 * b.xxx))); // a.c0 * b.xxx + a.c1 * b.yyy + a.c2 * b.zzz + a.c3 * b.www

    [MethodImpl(256 | 512)]
    public static ulong4_mt16 mul([This] ulong3_mt16 a, ulong3x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // ulong3x4_mt16

#region ulong4x2_mt4

public partial struct ulong4x2_mt4
{
    /// <summary>
    /// Scale a ulong4x2_mt4 columns by ulong2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator *(ulong4x2_mt4 a, ulong2_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a ulong4x2_mt4 rows by ulong4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator *(ulong4_mt4 a, ulong4x2_mt4 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4_mt4 mul([This] ulong4x2_mt4 a, ulong2_mt4 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static ulong2_mt4 mul([This] ulong4_mt4 a, ulong4x2_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // ulong4x2_mt4

#region ulong4x2_mt8

public partial struct ulong4x2_mt8
{
    /// <summary>
    /// Scale a ulong4x2_mt8 columns by ulong2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator *(ulong4x2_mt8 a, ulong2_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a ulong4x2_mt8 rows by ulong4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator *(ulong4_mt8 a, ulong4x2_mt8 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4_mt8 mul([This] ulong4x2_mt8 a, ulong2_mt8 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static ulong2_mt8 mul([This] ulong4_mt8 a, ulong4x2_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // ulong4x2_mt8

#region ulong4x2_mt16

public partial struct ulong4x2_mt16
{
    /// <summary>
    /// Scale a ulong4x2_mt16 columns by ulong2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator *(ulong4x2_mt16 a, ulong2_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy);

    /// <summary>
    /// Scale a ulong4x2_mt16 rows by ulong4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator *(ulong4_mt16 a, ulong4x2_mt16 b)
        => new(b.c0 * a, b.c1 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4_mt16 mul([This] ulong4x2_mt16 a, ulong2_mt16 b)
        => fma(a.c1, b.yyyy, a.c0 * b.xxxx); // a.c0 * b.xxxx + a.c1 * b.yyyy

    [MethodImpl(256 | 512)]
    public static ulong2_mt16 mul([This] ulong4_mt16 a, ulong4x2_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1));
}

#endregion // ulong4x2_mt16

#region ulong4x3_mt4

public partial struct ulong4x3_mt4
{
    /// <summary>
    /// Scale a ulong4x3_mt4 columns by ulong3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator *(ulong4x3_mt4 a, ulong3_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a ulong4x3_mt4 rows by ulong4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator *(ulong4_mt4 a, ulong4x3_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4_mt4 mul([This] ulong4x3_mt4 a, ulong3_mt4 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static ulong3_mt4 mul([This] ulong4_mt4 a, ulong4x3_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // ulong4x3_mt4

#region ulong4x3_mt8

public partial struct ulong4x3_mt8
{
    /// <summary>
    /// Scale a ulong4x3_mt8 columns by ulong3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator *(ulong4x3_mt8 a, ulong3_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a ulong4x3_mt8 rows by ulong4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator *(ulong4_mt8 a, ulong4x3_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4_mt8 mul([This] ulong4x3_mt8 a, ulong3_mt8 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static ulong3_mt8 mul([This] ulong4_mt8 a, ulong4x3_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // ulong4x3_mt8

#region ulong4x3_mt16

public partial struct ulong4x3_mt16
{
    /// <summary>
    /// Scale a ulong4x3_mt16 columns by ulong3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator *(ulong4x3_mt16 a, ulong3_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz);

    /// <summary>
    /// Scale a ulong4x3_mt16 rows by ulong4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator *(ulong4_mt16 a, ulong4x3_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4_mt16 mul([This] ulong4x3_mt16 a, ulong3_mt16 b)
        => fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx)); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz

    [MethodImpl(256 | 512)]
    public static ulong3_mt16 mul([This] ulong4_mt16 a, ulong4x3_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2));
}

#endregion // ulong4x3_mt16

#region ulong4x4_mt4

public partial struct ulong4x4_mt4
{
    /// <summary>
    /// Scale a ulong4x4_mt4 columns by ulong4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator *(ulong4x4_mt4 a, ulong4_mt4 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a ulong4x4_mt4 rows by ulong4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator *(ulong4_mt4 a, ulong4x4_mt4 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4_mt4 mul([This] ulong4x4_mt4 a, ulong4_mt4 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static ulong4_mt4 mul([This] ulong4_mt4 a, ulong4x4_mt4 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // ulong4x4_mt4

#region ulong4x4_mt8

public partial struct ulong4x4_mt8
{
    /// <summary>
    /// Scale a ulong4x4_mt8 columns by ulong4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator *(ulong4x4_mt8 a, ulong4_mt8 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a ulong4x4_mt8 rows by ulong4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator *(ulong4_mt8 a, ulong4x4_mt8 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4_mt8 mul([This] ulong4x4_mt8 a, ulong4_mt8 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static ulong4_mt8 mul([This] ulong4_mt8 a, ulong4x4_mt8 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // ulong4x4_mt8

#region ulong4x4_mt16

public partial struct ulong4x4_mt16
{
    /// <summary>
    /// Scale a ulong4x4_mt16 columns by ulong4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator *(ulong4x4_mt16 a, ulong4_mt16 b) 
        => new(a.c0 * b.xxxx, a.c1 * b.yyyy, a.c2 * b.zzzz, a.c3 * b.wwww);

    /// <summary>
    /// Scale a ulong4x4_mt16 rows by ulong4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator *(ulong4_mt16 a, ulong4x4_mt16 b)
        => new(b.c0 * a, b.c1 * a, b.c2 * a, b.c3 * a);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4_mt16 mul([This] ulong4x4_mt16 a, ulong4_mt16 b)
        => fma(a.c3, b.wwww, fma(a.c2, b.zzzz, fma(a.c1, b.yyyy, a.c0 * b.xxxx))); // a.c0 * b.xxxx + a.c1 * b.yyyy + a.c2 * b.zzzz + a.c3 * b.wwww

    [MethodImpl(256 | 512)]
    public static ulong4_mt16 mul([This] ulong4_mt16 a, ulong4x4_mt16 b)
        => new(dot(a, b.c0), dot(a, b.c1), dot(a, b.c2), dot(a, b.c3));
}

#endregion // ulong4x4_mt16
