// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region float2x2_mt4

public partial struct float2x2_mt4
{
    #region Constants

    public static float2x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float2x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator+(float2x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator-(float2x2_mt4 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator+(float2x2_mt4 a, float2x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator-(float2x2_mt4 a, float2x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a float2x2_mt4 by float2x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator*(float2x2_mt4 a, float2x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a float2x2_mt4 by float_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator*(float2x2_mt4 a, float_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float2x2_mt4 by float2x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator*(float_mt4 a, float2x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a float2x2_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator*(float2x2_mt4 a, float b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float2x2_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator*(float a, float2x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator/(float2x2_mt4 a, float2x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator/(float2x2_mt4 a, float_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator/(float_mt4 a, float2x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator/(float2x2_mt4 a, float b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator/(float a, float2x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator%(float2x2_mt4 a, float2x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator%(float2x2_mt4 a, float_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator%(float_mt4 a, float2x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator%(float2x2_mt4 a, float b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator%(float a, float2x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator --(float2x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 operator ++(float2x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2x2_mt4 abs([This] float2x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 sign([This] float2x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 min([This] float2x2_mt4 a, float2x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 max([This] float2x2_mt4 a, float2x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 clamp([This] float2x2_mt4 v, float2x2_mt4 min, float2x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static float2x2_mt4 square([This] float2x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt4 fma([This] float2x2_mt4 a, float2x2_mt4 b, float2x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt4 fms([This] float2x2_mt4 a, float2x2_mt4 b, float2x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt4 fnma([This] float2x2_mt4 a, float2x2_mt4 b, float2x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt4 fsm([This] float2x2_mt4 c, float2x2_mt4 a, float2x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt4 fam([This] float2x2_mt4 c, float2x2_mt4 a, float2x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt4 mad([This] float2x2_mt4 a, float2x2_mt4 b, float2x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float2_mt4 csum([This] float2x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static float2_mt4 cmin([This] float2x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static float2_mt4 cmax([This] float2x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // float2x2_mt4

#region float2x2_mt8

public partial struct float2x2_mt8
{
    #region Constants

    public static float2x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float2x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator+(float2x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator-(float2x2_mt8 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator+(float2x2_mt8 a, float2x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator-(float2x2_mt8 a, float2x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a float2x2_mt8 by float2x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator*(float2x2_mt8 a, float2x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a float2x2_mt8 by float_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator*(float2x2_mt8 a, float_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float2x2_mt8 by float2x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator*(float_mt8 a, float2x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a float2x2_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator*(float2x2_mt8 a, float b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float2x2_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator*(float a, float2x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator/(float2x2_mt8 a, float2x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator/(float2x2_mt8 a, float_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator/(float_mt8 a, float2x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator/(float2x2_mt8 a, float b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator/(float a, float2x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator%(float2x2_mt8 a, float2x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator%(float2x2_mt8 a, float_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator%(float_mt8 a, float2x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator%(float2x2_mt8 a, float b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator%(float a, float2x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator --(float2x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 operator ++(float2x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2x2_mt8 abs([This] float2x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 sign([This] float2x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 min([This] float2x2_mt8 a, float2x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 max([This] float2x2_mt8 a, float2x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 clamp([This] float2x2_mt8 v, float2x2_mt8 min, float2x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static float2x2_mt8 square([This] float2x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt8 fma([This] float2x2_mt8 a, float2x2_mt8 b, float2x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt8 fms([This] float2x2_mt8 a, float2x2_mt8 b, float2x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt8 fnma([This] float2x2_mt8 a, float2x2_mt8 b, float2x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt8 fsm([This] float2x2_mt8 c, float2x2_mt8 a, float2x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt8 fam([This] float2x2_mt8 c, float2x2_mt8 a, float2x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt8 mad([This] float2x2_mt8 a, float2x2_mt8 b, float2x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float2_mt8 csum([This] float2x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static float2_mt8 cmin([This] float2x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static float2_mt8 cmax([This] float2x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // float2x2_mt8

#region float2x2_mt16

public partial struct float2x2_mt16
{
    #region Constants

    public static float2x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float2x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator+(float2x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator-(float2x2_mt16 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator+(float2x2_mt16 a, float2x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator-(float2x2_mt16 a, float2x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a float2x2_mt16 by float2x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator*(float2x2_mt16 a, float2x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a float2x2_mt16 by float_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator*(float2x2_mt16 a, float_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float2x2_mt16 by float2x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator*(float_mt16 a, float2x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a float2x2_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator*(float2x2_mt16 a, float b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float2x2_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator*(float a, float2x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator/(float2x2_mt16 a, float2x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator/(float2x2_mt16 a, float_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator/(float_mt16 a, float2x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator/(float2x2_mt16 a, float b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator/(float a, float2x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator%(float2x2_mt16 a, float2x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator%(float2x2_mt16 a, float_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator%(float_mt16 a, float2x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator%(float2x2_mt16 a, float b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator%(float a, float2x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator --(float2x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 operator ++(float2x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2x2_mt16 abs([This] float2x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 sign([This] float2x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 min([This] float2x2_mt16 a, float2x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 max([This] float2x2_mt16 a, float2x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 clamp([This] float2x2_mt16 v, float2x2_mt16 min, float2x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static float2x2_mt16 square([This] float2x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt16 fma([This] float2x2_mt16 a, float2x2_mt16 b, float2x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt16 fms([This] float2x2_mt16 a, float2x2_mt16 b, float2x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt16 fnma([This] float2x2_mt16 a, float2x2_mt16 b, float2x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt16 fsm([This] float2x2_mt16 c, float2x2_mt16 a, float2x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt16 fam([This] float2x2_mt16 c, float2x2_mt16 a, float2x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt16 mad([This] float2x2_mt16 a, float2x2_mt16 b, float2x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float2_mt16 csum([This] float2x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static float2_mt16 cmin([This] float2x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static float2_mt16 cmax([This] float2x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // float2x2_mt16

#region float2x3_mt4

public partial struct float2x3_mt4
{
    #region Constants

    public static float2x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float2x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator+(float2x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator-(float2x3_mt4 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator+(float2x3_mt4 a, float2x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator-(float2x3_mt4 a, float2x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a float2x3_mt4 by float2x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator*(float2x3_mt4 a, float2x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a float2x3_mt4 by float_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator*(float2x3_mt4 a, float_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float2x3_mt4 by float2x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator*(float_mt4 a, float2x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a float2x3_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator*(float2x3_mt4 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float2x3_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator*(float a, float2x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator/(float2x3_mt4 a, float2x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator/(float2x3_mt4 a, float_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator/(float_mt4 a, float2x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator/(float2x3_mt4 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator/(float a, float2x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator%(float2x3_mt4 a, float2x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator%(float2x3_mt4 a, float_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator%(float_mt4 a, float2x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator%(float2x3_mt4 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator%(float a, float2x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator --(float2x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 operator ++(float2x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2x3_mt4 abs([This] float2x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 sign([This] float2x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 min([This] float2x3_mt4 a, float2x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 max([This] float2x3_mt4 a, float2x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 clamp([This] float2x3_mt4 v, float2x3_mt4 min, float2x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static float2x3_mt4 square([This] float2x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt4 fma([This] float2x3_mt4 a, float2x3_mt4 b, float2x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt4 fms([This] float2x3_mt4 a, float2x3_mt4 b, float2x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt4 fnma([This] float2x3_mt4 a, float2x3_mt4 b, float2x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt4 fsm([This] float2x3_mt4 c, float2x3_mt4 a, float2x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt4 fam([This] float2x3_mt4 c, float2x3_mt4 a, float2x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt4 mad([This] float2x3_mt4 a, float2x3_mt4 b, float2x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float3_mt4 csum([This] float2x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static float3_mt4 cmin([This] float2x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static float3_mt4 cmax([This] float2x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // float2x3_mt4

#region float2x3_mt8

public partial struct float2x3_mt8
{
    #region Constants

    public static float2x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float2x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator+(float2x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator-(float2x3_mt8 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator+(float2x3_mt8 a, float2x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator-(float2x3_mt8 a, float2x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a float2x3_mt8 by float2x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator*(float2x3_mt8 a, float2x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a float2x3_mt8 by float_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator*(float2x3_mt8 a, float_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float2x3_mt8 by float2x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator*(float_mt8 a, float2x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a float2x3_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator*(float2x3_mt8 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float2x3_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator*(float a, float2x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator/(float2x3_mt8 a, float2x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator/(float2x3_mt8 a, float_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator/(float_mt8 a, float2x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator/(float2x3_mt8 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator/(float a, float2x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator%(float2x3_mt8 a, float2x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator%(float2x3_mt8 a, float_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator%(float_mt8 a, float2x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator%(float2x3_mt8 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator%(float a, float2x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator --(float2x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 operator ++(float2x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2x3_mt8 abs([This] float2x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 sign([This] float2x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 min([This] float2x3_mt8 a, float2x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 max([This] float2x3_mt8 a, float2x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 clamp([This] float2x3_mt8 v, float2x3_mt8 min, float2x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static float2x3_mt8 square([This] float2x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt8 fma([This] float2x3_mt8 a, float2x3_mt8 b, float2x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt8 fms([This] float2x3_mt8 a, float2x3_mt8 b, float2x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt8 fnma([This] float2x3_mt8 a, float2x3_mt8 b, float2x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt8 fsm([This] float2x3_mt8 c, float2x3_mt8 a, float2x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt8 fam([This] float2x3_mt8 c, float2x3_mt8 a, float2x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt8 mad([This] float2x3_mt8 a, float2x3_mt8 b, float2x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float3_mt8 csum([This] float2x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static float3_mt8 cmin([This] float2x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static float3_mt8 cmax([This] float2x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // float2x3_mt8

#region float2x3_mt16

public partial struct float2x3_mt16
{
    #region Constants

    public static float2x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float2x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator+(float2x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator-(float2x3_mt16 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator+(float2x3_mt16 a, float2x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator-(float2x3_mt16 a, float2x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a float2x3_mt16 by float2x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator*(float2x3_mt16 a, float2x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a float2x3_mt16 by float_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator*(float2x3_mt16 a, float_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float2x3_mt16 by float2x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator*(float_mt16 a, float2x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a float2x3_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator*(float2x3_mt16 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float2x3_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator*(float a, float2x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator/(float2x3_mt16 a, float2x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator/(float2x3_mt16 a, float_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator/(float_mt16 a, float2x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator/(float2x3_mt16 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator/(float a, float2x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator%(float2x3_mt16 a, float2x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator%(float2x3_mt16 a, float_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator%(float_mt16 a, float2x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator%(float2x3_mt16 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator%(float a, float2x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator --(float2x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 operator ++(float2x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2x3_mt16 abs([This] float2x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 sign([This] float2x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 min([This] float2x3_mt16 a, float2x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 max([This] float2x3_mt16 a, float2x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 clamp([This] float2x3_mt16 v, float2x3_mt16 min, float2x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static float2x3_mt16 square([This] float2x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt16 fma([This] float2x3_mt16 a, float2x3_mt16 b, float2x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt16 fms([This] float2x3_mt16 a, float2x3_mt16 b, float2x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt16 fnma([This] float2x3_mt16 a, float2x3_mt16 b, float2x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt16 fsm([This] float2x3_mt16 c, float2x3_mt16 a, float2x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt16 fam([This] float2x3_mt16 c, float2x3_mt16 a, float2x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt16 mad([This] float2x3_mt16 a, float2x3_mt16 b, float2x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float3_mt16 csum([This] float2x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static float3_mt16 cmin([This] float2x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static float3_mt16 cmax([This] float2x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // float2x3_mt16

#region float2x4_mt4

public partial struct float2x4_mt4
{
    #region Constants

    public static float2x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float2x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator+(float2x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator-(float2x4_mt4 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator+(float2x4_mt4 a, float2x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator-(float2x4_mt4 a, float2x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a float2x4_mt4 by float2x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator*(float2x4_mt4 a, float2x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a float2x4_mt4 by float_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator*(float2x4_mt4 a, float_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float2x4_mt4 by float2x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator*(float_mt4 a, float2x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a float2x4_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator*(float2x4_mt4 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float2x4_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator*(float a, float2x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator/(float2x4_mt4 a, float2x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator/(float2x4_mt4 a, float_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator/(float_mt4 a, float2x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator/(float2x4_mt4 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator/(float a, float2x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator%(float2x4_mt4 a, float2x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator%(float2x4_mt4 a, float_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator%(float_mt4 a, float2x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator%(float2x4_mt4 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator%(float a, float2x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator --(float2x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 operator ++(float2x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2x4_mt4 abs([This] float2x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 sign([This] float2x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 min([This] float2x4_mt4 a, float2x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 max([This] float2x4_mt4 a, float2x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 clamp([This] float2x4_mt4 v, float2x4_mt4 min, float2x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static float2x4_mt4 square([This] float2x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt4 fma([This] float2x4_mt4 a, float2x4_mt4 b, float2x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt4 fms([This] float2x4_mt4 a, float2x4_mt4 b, float2x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt4 fnma([This] float2x4_mt4 a, float2x4_mt4 b, float2x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt4 fsm([This] float2x4_mt4 c, float2x4_mt4 a, float2x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt4 fam([This] float2x4_mt4 c, float2x4_mt4 a, float2x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt4 mad([This] float2x4_mt4 a, float2x4_mt4 b, float2x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float4_mt4 csum([This] float2x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static float4_mt4 cmin([This] float2x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static float4_mt4 cmax([This] float2x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // float2x4_mt4

#region float2x4_mt8

public partial struct float2x4_mt8
{
    #region Constants

    public static float2x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float2x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator+(float2x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator-(float2x4_mt8 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator+(float2x4_mt8 a, float2x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator-(float2x4_mt8 a, float2x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a float2x4_mt8 by float2x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator*(float2x4_mt8 a, float2x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a float2x4_mt8 by float_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator*(float2x4_mt8 a, float_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float2x4_mt8 by float2x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator*(float_mt8 a, float2x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a float2x4_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator*(float2x4_mt8 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float2x4_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator*(float a, float2x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator/(float2x4_mt8 a, float2x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator/(float2x4_mt8 a, float_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator/(float_mt8 a, float2x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator/(float2x4_mt8 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator/(float a, float2x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator%(float2x4_mt8 a, float2x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator%(float2x4_mt8 a, float_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator%(float_mt8 a, float2x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator%(float2x4_mt8 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator%(float a, float2x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator --(float2x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 operator ++(float2x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2x4_mt8 abs([This] float2x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 sign([This] float2x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 min([This] float2x4_mt8 a, float2x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 max([This] float2x4_mt8 a, float2x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 clamp([This] float2x4_mt8 v, float2x4_mt8 min, float2x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static float2x4_mt8 square([This] float2x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt8 fma([This] float2x4_mt8 a, float2x4_mt8 b, float2x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt8 fms([This] float2x4_mt8 a, float2x4_mt8 b, float2x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt8 fnma([This] float2x4_mt8 a, float2x4_mt8 b, float2x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt8 fsm([This] float2x4_mt8 c, float2x4_mt8 a, float2x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt8 fam([This] float2x4_mt8 c, float2x4_mt8 a, float2x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt8 mad([This] float2x4_mt8 a, float2x4_mt8 b, float2x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float4_mt8 csum([This] float2x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static float4_mt8 cmin([This] float2x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static float4_mt8 cmax([This] float2x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // float2x4_mt8

#region float2x4_mt16

public partial struct float2x4_mt16
{
    #region Constants

    public static float2x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float2x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator+(float2x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator-(float2x4_mt16 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator+(float2x4_mt16 a, float2x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator-(float2x4_mt16 a, float2x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a float2x4_mt16 by float2x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator*(float2x4_mt16 a, float2x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a float2x4_mt16 by float_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator*(float2x4_mt16 a, float_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float2x4_mt16 by float2x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator*(float_mt16 a, float2x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a float2x4_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator*(float2x4_mt16 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float2x4_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator*(float a, float2x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator/(float2x4_mt16 a, float2x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator/(float2x4_mt16 a, float_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator/(float_mt16 a, float2x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator/(float2x4_mt16 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator/(float a, float2x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator%(float2x4_mt16 a, float2x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator%(float2x4_mt16 a, float_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator%(float_mt16 a, float2x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator%(float2x4_mt16 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator%(float a, float2x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator --(float2x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 operator ++(float2x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2x4_mt16 abs([This] float2x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 sign([This] float2x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 min([This] float2x4_mt16 a, float2x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 max([This] float2x4_mt16 a, float2x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 clamp([This] float2x4_mt16 v, float2x4_mt16 min, float2x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static float2x4_mt16 square([This] float2x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt16 fma([This] float2x4_mt16 a, float2x4_mt16 b, float2x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt16 fms([This] float2x4_mt16 a, float2x4_mt16 b, float2x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt16 fnma([This] float2x4_mt16 a, float2x4_mt16 b, float2x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt16 fsm([This] float2x4_mt16 c, float2x4_mt16 a, float2x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt16 fam([This] float2x4_mt16 c, float2x4_mt16 a, float2x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt16 mad([This] float2x4_mt16 a, float2x4_mt16 b, float2x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float4_mt16 csum([This] float2x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static float4_mt16 cmin([This] float2x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static float4_mt16 cmax([This] float2x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // float2x4_mt16

#region float3x2_mt4

public partial struct float3x2_mt4
{
    #region Constants

    public static float3x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float3x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator+(float3x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator-(float3x2_mt4 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator+(float3x2_mt4 a, float3x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator-(float3x2_mt4 a, float3x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a float3x2_mt4 by float3x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator*(float3x2_mt4 a, float3x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a float3x2_mt4 by float_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator*(float3x2_mt4 a, float_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float3x2_mt4 by float3x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator*(float_mt4 a, float3x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a float3x2_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator*(float3x2_mt4 a, float b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float3x2_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator*(float a, float3x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator/(float3x2_mt4 a, float3x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator/(float3x2_mt4 a, float_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator/(float_mt4 a, float3x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator/(float3x2_mt4 a, float b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator/(float a, float3x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator%(float3x2_mt4 a, float3x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator%(float3x2_mt4 a, float_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator%(float_mt4 a, float3x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator%(float3x2_mt4 a, float b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator%(float a, float3x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator --(float3x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 operator ++(float3x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3x2_mt4 abs([This] float3x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 sign([This] float3x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 min([This] float3x2_mt4 a, float3x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 max([This] float3x2_mt4 a, float3x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 clamp([This] float3x2_mt4 v, float3x2_mt4 min, float3x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static float3x2_mt4 square([This] float3x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt4 fma([This] float3x2_mt4 a, float3x2_mt4 b, float3x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt4 fms([This] float3x2_mt4 a, float3x2_mt4 b, float3x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt4 fnma([This] float3x2_mt4 a, float3x2_mt4 b, float3x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt4 fsm([This] float3x2_mt4 c, float3x2_mt4 a, float3x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt4 fam([This] float3x2_mt4 c, float3x2_mt4 a, float3x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt4 mad([This] float3x2_mt4 a, float3x2_mt4 b, float3x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float2_mt4 csum([This] float3x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static float2_mt4 cmin([This] float3x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static float2_mt4 cmax([This] float3x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // float3x2_mt4

#region float3x2_mt8

public partial struct float3x2_mt8
{
    #region Constants

    public static float3x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float3x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator+(float3x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator-(float3x2_mt8 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator+(float3x2_mt8 a, float3x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator-(float3x2_mt8 a, float3x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a float3x2_mt8 by float3x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator*(float3x2_mt8 a, float3x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a float3x2_mt8 by float_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator*(float3x2_mt8 a, float_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float3x2_mt8 by float3x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator*(float_mt8 a, float3x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a float3x2_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator*(float3x2_mt8 a, float b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float3x2_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator*(float a, float3x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator/(float3x2_mt8 a, float3x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator/(float3x2_mt8 a, float_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator/(float_mt8 a, float3x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator/(float3x2_mt8 a, float b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator/(float a, float3x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator%(float3x2_mt8 a, float3x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator%(float3x2_mt8 a, float_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator%(float_mt8 a, float3x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator%(float3x2_mt8 a, float b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator%(float a, float3x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator --(float3x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 operator ++(float3x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3x2_mt8 abs([This] float3x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 sign([This] float3x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 min([This] float3x2_mt8 a, float3x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 max([This] float3x2_mt8 a, float3x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 clamp([This] float3x2_mt8 v, float3x2_mt8 min, float3x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static float3x2_mt8 square([This] float3x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt8 fma([This] float3x2_mt8 a, float3x2_mt8 b, float3x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt8 fms([This] float3x2_mt8 a, float3x2_mt8 b, float3x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt8 fnma([This] float3x2_mt8 a, float3x2_mt8 b, float3x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt8 fsm([This] float3x2_mt8 c, float3x2_mt8 a, float3x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt8 fam([This] float3x2_mt8 c, float3x2_mt8 a, float3x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt8 mad([This] float3x2_mt8 a, float3x2_mt8 b, float3x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float2_mt8 csum([This] float3x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static float2_mt8 cmin([This] float3x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static float2_mt8 cmax([This] float3x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // float3x2_mt8

#region float3x2_mt16

public partial struct float3x2_mt16
{
    #region Constants

    public static float3x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float3x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator+(float3x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator-(float3x2_mt16 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator+(float3x2_mt16 a, float3x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator-(float3x2_mt16 a, float3x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a float3x2_mt16 by float3x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator*(float3x2_mt16 a, float3x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a float3x2_mt16 by float_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator*(float3x2_mt16 a, float_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float3x2_mt16 by float3x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator*(float_mt16 a, float3x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a float3x2_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator*(float3x2_mt16 a, float b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float3x2_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator*(float a, float3x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator/(float3x2_mt16 a, float3x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator/(float3x2_mt16 a, float_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator/(float_mt16 a, float3x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator/(float3x2_mt16 a, float b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator/(float a, float3x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator%(float3x2_mt16 a, float3x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator%(float3x2_mt16 a, float_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator%(float_mt16 a, float3x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator%(float3x2_mt16 a, float b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator%(float a, float3x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator --(float3x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 operator ++(float3x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3x2_mt16 abs([This] float3x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 sign([This] float3x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 min([This] float3x2_mt16 a, float3x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 max([This] float3x2_mt16 a, float3x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 clamp([This] float3x2_mt16 v, float3x2_mt16 min, float3x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static float3x2_mt16 square([This] float3x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt16 fma([This] float3x2_mt16 a, float3x2_mt16 b, float3x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt16 fms([This] float3x2_mt16 a, float3x2_mt16 b, float3x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt16 fnma([This] float3x2_mt16 a, float3x2_mt16 b, float3x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt16 fsm([This] float3x2_mt16 c, float3x2_mt16 a, float3x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt16 fam([This] float3x2_mt16 c, float3x2_mt16 a, float3x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt16 mad([This] float3x2_mt16 a, float3x2_mt16 b, float3x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float2_mt16 csum([This] float3x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static float2_mt16 cmin([This] float3x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static float2_mt16 cmax([This] float3x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // float3x2_mt16

#region float3x3_mt4

public partial struct float3x3_mt4
{
    #region Constants

    public static float3x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float3x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator+(float3x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator-(float3x3_mt4 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator+(float3x3_mt4 a, float3x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator-(float3x3_mt4 a, float3x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a float3x3_mt4 by float3x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator*(float3x3_mt4 a, float3x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a float3x3_mt4 by float_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator*(float3x3_mt4 a, float_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float3x3_mt4 by float3x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator*(float_mt4 a, float3x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a float3x3_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator*(float3x3_mt4 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float3x3_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator*(float a, float3x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator/(float3x3_mt4 a, float3x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator/(float3x3_mt4 a, float_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator/(float_mt4 a, float3x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator/(float3x3_mt4 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator/(float a, float3x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator%(float3x3_mt4 a, float3x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator%(float3x3_mt4 a, float_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator%(float_mt4 a, float3x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator%(float3x3_mt4 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator%(float a, float3x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator --(float3x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 operator ++(float3x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3x3_mt4 abs([This] float3x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 sign([This] float3x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 min([This] float3x3_mt4 a, float3x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 max([This] float3x3_mt4 a, float3x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 clamp([This] float3x3_mt4 v, float3x3_mt4 min, float3x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static float3x3_mt4 square([This] float3x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt4 fma([This] float3x3_mt4 a, float3x3_mt4 b, float3x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt4 fms([This] float3x3_mt4 a, float3x3_mt4 b, float3x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt4 fnma([This] float3x3_mt4 a, float3x3_mt4 b, float3x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt4 fsm([This] float3x3_mt4 c, float3x3_mt4 a, float3x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt4 fam([This] float3x3_mt4 c, float3x3_mt4 a, float3x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt4 mad([This] float3x3_mt4 a, float3x3_mt4 b, float3x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float3_mt4 csum([This] float3x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static float3_mt4 cmin([This] float3x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static float3_mt4 cmax([This] float3x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // float3x3_mt4

#region float3x3_mt8

public partial struct float3x3_mt8
{
    #region Constants

    public static float3x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float3x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator+(float3x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator-(float3x3_mt8 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator+(float3x3_mt8 a, float3x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator-(float3x3_mt8 a, float3x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a float3x3_mt8 by float3x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator*(float3x3_mt8 a, float3x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a float3x3_mt8 by float_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator*(float3x3_mt8 a, float_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float3x3_mt8 by float3x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator*(float_mt8 a, float3x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a float3x3_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator*(float3x3_mt8 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float3x3_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator*(float a, float3x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator/(float3x3_mt8 a, float3x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator/(float3x3_mt8 a, float_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator/(float_mt8 a, float3x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator/(float3x3_mt8 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator/(float a, float3x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator%(float3x3_mt8 a, float3x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator%(float3x3_mt8 a, float_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator%(float_mt8 a, float3x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator%(float3x3_mt8 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator%(float a, float3x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator --(float3x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 operator ++(float3x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3x3_mt8 abs([This] float3x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 sign([This] float3x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 min([This] float3x3_mt8 a, float3x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 max([This] float3x3_mt8 a, float3x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 clamp([This] float3x3_mt8 v, float3x3_mt8 min, float3x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static float3x3_mt8 square([This] float3x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt8 fma([This] float3x3_mt8 a, float3x3_mt8 b, float3x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt8 fms([This] float3x3_mt8 a, float3x3_mt8 b, float3x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt8 fnma([This] float3x3_mt8 a, float3x3_mt8 b, float3x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt8 fsm([This] float3x3_mt8 c, float3x3_mt8 a, float3x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt8 fam([This] float3x3_mt8 c, float3x3_mt8 a, float3x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt8 mad([This] float3x3_mt8 a, float3x3_mt8 b, float3x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float3_mt8 csum([This] float3x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static float3_mt8 cmin([This] float3x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static float3_mt8 cmax([This] float3x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // float3x3_mt8

#region float3x3_mt16

public partial struct float3x3_mt16
{
    #region Constants

    public static float3x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float3x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator+(float3x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator-(float3x3_mt16 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator+(float3x3_mt16 a, float3x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator-(float3x3_mt16 a, float3x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a float3x3_mt16 by float3x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator*(float3x3_mt16 a, float3x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a float3x3_mt16 by float_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator*(float3x3_mt16 a, float_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float3x3_mt16 by float3x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator*(float_mt16 a, float3x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a float3x3_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator*(float3x3_mt16 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float3x3_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator*(float a, float3x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator/(float3x3_mt16 a, float3x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator/(float3x3_mt16 a, float_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator/(float_mt16 a, float3x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator/(float3x3_mt16 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator/(float a, float3x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator%(float3x3_mt16 a, float3x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator%(float3x3_mt16 a, float_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator%(float_mt16 a, float3x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator%(float3x3_mt16 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator%(float a, float3x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator --(float3x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 operator ++(float3x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3x3_mt16 abs([This] float3x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 sign([This] float3x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 min([This] float3x3_mt16 a, float3x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 max([This] float3x3_mt16 a, float3x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 clamp([This] float3x3_mt16 v, float3x3_mt16 min, float3x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static float3x3_mt16 square([This] float3x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt16 fma([This] float3x3_mt16 a, float3x3_mt16 b, float3x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt16 fms([This] float3x3_mt16 a, float3x3_mt16 b, float3x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt16 fnma([This] float3x3_mt16 a, float3x3_mt16 b, float3x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt16 fsm([This] float3x3_mt16 c, float3x3_mt16 a, float3x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt16 fam([This] float3x3_mt16 c, float3x3_mt16 a, float3x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt16 mad([This] float3x3_mt16 a, float3x3_mt16 b, float3x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float3_mt16 csum([This] float3x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static float3_mt16 cmin([This] float3x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static float3_mt16 cmax([This] float3x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // float3x3_mt16

#region float3x4_mt4

public partial struct float3x4_mt4
{
    #region Constants

    public static float3x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float3x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator+(float3x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator-(float3x4_mt4 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator+(float3x4_mt4 a, float3x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator-(float3x4_mt4 a, float3x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a float3x4_mt4 by float3x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator*(float3x4_mt4 a, float3x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a float3x4_mt4 by float_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator*(float3x4_mt4 a, float_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float3x4_mt4 by float3x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator*(float_mt4 a, float3x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a float3x4_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator*(float3x4_mt4 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float3x4_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator*(float a, float3x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator/(float3x4_mt4 a, float3x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator/(float3x4_mt4 a, float_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator/(float_mt4 a, float3x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator/(float3x4_mt4 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator/(float a, float3x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator%(float3x4_mt4 a, float3x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator%(float3x4_mt4 a, float_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator%(float_mt4 a, float3x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator%(float3x4_mt4 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator%(float a, float3x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator --(float3x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 operator ++(float3x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3x4_mt4 abs([This] float3x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 sign([This] float3x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 min([This] float3x4_mt4 a, float3x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 max([This] float3x4_mt4 a, float3x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 clamp([This] float3x4_mt4 v, float3x4_mt4 min, float3x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static float3x4_mt4 square([This] float3x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt4 fma([This] float3x4_mt4 a, float3x4_mt4 b, float3x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt4 fms([This] float3x4_mt4 a, float3x4_mt4 b, float3x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt4 fnma([This] float3x4_mt4 a, float3x4_mt4 b, float3x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt4 fsm([This] float3x4_mt4 c, float3x4_mt4 a, float3x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt4 fam([This] float3x4_mt4 c, float3x4_mt4 a, float3x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt4 mad([This] float3x4_mt4 a, float3x4_mt4 b, float3x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float4_mt4 csum([This] float3x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static float4_mt4 cmin([This] float3x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static float4_mt4 cmax([This] float3x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // float3x4_mt4

#region float3x4_mt8

public partial struct float3x4_mt8
{
    #region Constants

    public static float3x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float3x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator+(float3x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator-(float3x4_mt8 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator+(float3x4_mt8 a, float3x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator-(float3x4_mt8 a, float3x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a float3x4_mt8 by float3x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator*(float3x4_mt8 a, float3x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a float3x4_mt8 by float_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator*(float3x4_mt8 a, float_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float3x4_mt8 by float3x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator*(float_mt8 a, float3x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a float3x4_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator*(float3x4_mt8 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float3x4_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator*(float a, float3x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator/(float3x4_mt8 a, float3x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator/(float3x4_mt8 a, float_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator/(float_mt8 a, float3x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator/(float3x4_mt8 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator/(float a, float3x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator%(float3x4_mt8 a, float3x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator%(float3x4_mt8 a, float_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator%(float_mt8 a, float3x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator%(float3x4_mt8 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator%(float a, float3x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator --(float3x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 operator ++(float3x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3x4_mt8 abs([This] float3x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 sign([This] float3x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 min([This] float3x4_mt8 a, float3x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 max([This] float3x4_mt8 a, float3x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 clamp([This] float3x4_mt8 v, float3x4_mt8 min, float3x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static float3x4_mt8 square([This] float3x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt8 fma([This] float3x4_mt8 a, float3x4_mt8 b, float3x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt8 fms([This] float3x4_mt8 a, float3x4_mt8 b, float3x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt8 fnma([This] float3x4_mt8 a, float3x4_mt8 b, float3x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt8 fsm([This] float3x4_mt8 c, float3x4_mt8 a, float3x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt8 fam([This] float3x4_mt8 c, float3x4_mt8 a, float3x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt8 mad([This] float3x4_mt8 a, float3x4_mt8 b, float3x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float4_mt8 csum([This] float3x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static float4_mt8 cmin([This] float3x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static float4_mt8 cmax([This] float3x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // float3x4_mt8

#region float3x4_mt16

public partial struct float3x4_mt16
{
    #region Constants

    public static float3x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float3x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator+(float3x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator-(float3x4_mt16 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator+(float3x4_mt16 a, float3x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator-(float3x4_mt16 a, float3x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a float3x4_mt16 by float3x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator*(float3x4_mt16 a, float3x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a float3x4_mt16 by float_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator*(float3x4_mt16 a, float_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float3x4_mt16 by float3x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator*(float_mt16 a, float3x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a float3x4_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator*(float3x4_mt16 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float3x4_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator*(float a, float3x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator/(float3x4_mt16 a, float3x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator/(float3x4_mt16 a, float_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator/(float_mt16 a, float3x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator/(float3x4_mt16 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator/(float a, float3x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator%(float3x4_mt16 a, float3x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator%(float3x4_mt16 a, float_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator%(float_mt16 a, float3x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator%(float3x4_mt16 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator%(float a, float3x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator --(float3x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 operator ++(float3x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3x4_mt16 abs([This] float3x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 sign([This] float3x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 min([This] float3x4_mt16 a, float3x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 max([This] float3x4_mt16 a, float3x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 clamp([This] float3x4_mt16 v, float3x4_mt16 min, float3x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static float3x4_mt16 square([This] float3x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt16 fma([This] float3x4_mt16 a, float3x4_mt16 b, float3x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt16 fms([This] float3x4_mt16 a, float3x4_mt16 b, float3x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt16 fnma([This] float3x4_mt16 a, float3x4_mt16 b, float3x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt16 fsm([This] float3x4_mt16 c, float3x4_mt16 a, float3x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt16 fam([This] float3x4_mt16 c, float3x4_mt16 a, float3x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt16 mad([This] float3x4_mt16 a, float3x4_mt16 b, float3x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float4_mt16 csum([This] float3x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static float4_mt16 cmin([This] float3x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static float4_mt16 cmax([This] float3x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // float3x4_mt16

#region float4x2_mt4

public partial struct float4x2_mt4
{
    #region Constants

    public static float4x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float4x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator+(float4x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator-(float4x2_mt4 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator+(float4x2_mt4 a, float4x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator-(float4x2_mt4 a, float4x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a float4x2_mt4 by float4x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator*(float4x2_mt4 a, float4x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a float4x2_mt4 by float_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator*(float4x2_mt4 a, float_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float4x2_mt4 by float4x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator*(float_mt4 a, float4x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a float4x2_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator*(float4x2_mt4 a, float b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float4x2_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator*(float a, float4x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator/(float4x2_mt4 a, float4x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator/(float4x2_mt4 a, float_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator/(float_mt4 a, float4x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator/(float4x2_mt4 a, float b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator/(float a, float4x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator%(float4x2_mt4 a, float4x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator%(float4x2_mt4 a, float_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator%(float_mt4 a, float4x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator%(float4x2_mt4 a, float b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator%(float a, float4x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator --(float4x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 operator ++(float4x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4x2_mt4 abs([This] float4x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 sign([This] float4x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 min([This] float4x2_mt4 a, float4x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 max([This] float4x2_mt4 a, float4x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 clamp([This] float4x2_mt4 v, float4x2_mt4 min, float4x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static float4x2_mt4 square([This] float4x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt4 fma([This] float4x2_mt4 a, float4x2_mt4 b, float4x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt4 fms([This] float4x2_mt4 a, float4x2_mt4 b, float4x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt4 fnma([This] float4x2_mt4 a, float4x2_mt4 b, float4x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt4 fsm([This] float4x2_mt4 c, float4x2_mt4 a, float4x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt4 fam([This] float4x2_mt4 c, float4x2_mt4 a, float4x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt4 mad([This] float4x2_mt4 a, float4x2_mt4 b, float4x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float2_mt4 csum([This] float4x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static float2_mt4 cmin([This] float4x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static float2_mt4 cmax([This] float4x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // float4x2_mt4

#region float4x2_mt8

public partial struct float4x2_mt8
{
    #region Constants

    public static float4x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float4x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator+(float4x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator-(float4x2_mt8 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator+(float4x2_mt8 a, float4x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator-(float4x2_mt8 a, float4x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a float4x2_mt8 by float4x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator*(float4x2_mt8 a, float4x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a float4x2_mt8 by float_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator*(float4x2_mt8 a, float_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float4x2_mt8 by float4x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator*(float_mt8 a, float4x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a float4x2_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator*(float4x2_mt8 a, float b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float4x2_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator*(float a, float4x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator/(float4x2_mt8 a, float4x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator/(float4x2_mt8 a, float_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator/(float_mt8 a, float4x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator/(float4x2_mt8 a, float b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator/(float a, float4x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator%(float4x2_mt8 a, float4x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator%(float4x2_mt8 a, float_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator%(float_mt8 a, float4x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator%(float4x2_mt8 a, float b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator%(float a, float4x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator --(float4x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 operator ++(float4x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4x2_mt8 abs([This] float4x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 sign([This] float4x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 min([This] float4x2_mt8 a, float4x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 max([This] float4x2_mt8 a, float4x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 clamp([This] float4x2_mt8 v, float4x2_mt8 min, float4x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static float4x2_mt8 square([This] float4x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt8 fma([This] float4x2_mt8 a, float4x2_mt8 b, float4x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt8 fms([This] float4x2_mt8 a, float4x2_mt8 b, float4x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt8 fnma([This] float4x2_mt8 a, float4x2_mt8 b, float4x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt8 fsm([This] float4x2_mt8 c, float4x2_mt8 a, float4x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt8 fam([This] float4x2_mt8 c, float4x2_mt8 a, float4x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt8 mad([This] float4x2_mt8 a, float4x2_mt8 b, float4x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float2_mt8 csum([This] float4x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static float2_mt8 cmin([This] float4x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static float2_mt8 cmax([This] float4x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // float4x2_mt8

#region float4x2_mt16

public partial struct float4x2_mt16
{
    #region Constants

    public static float4x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float4x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator+(float4x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator-(float4x2_mt16 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator+(float4x2_mt16 a, float4x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator-(float4x2_mt16 a, float4x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a float4x2_mt16 by float4x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator*(float4x2_mt16 a, float4x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a float4x2_mt16 by float_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator*(float4x2_mt16 a, float_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float4x2_mt16 by float4x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator*(float_mt16 a, float4x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a float4x2_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator*(float4x2_mt16 a, float b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float4x2_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator*(float a, float4x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator/(float4x2_mt16 a, float4x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator/(float4x2_mt16 a, float_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator/(float_mt16 a, float4x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator/(float4x2_mt16 a, float b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator/(float a, float4x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator%(float4x2_mt16 a, float4x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator%(float4x2_mt16 a, float_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator%(float_mt16 a, float4x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator%(float4x2_mt16 a, float b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator%(float a, float4x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator --(float4x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 operator ++(float4x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4x2_mt16 abs([This] float4x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 sign([This] float4x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 min([This] float4x2_mt16 a, float4x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 max([This] float4x2_mt16 a, float4x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 clamp([This] float4x2_mt16 v, float4x2_mt16 min, float4x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static float4x2_mt16 square([This] float4x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt16 fma([This] float4x2_mt16 a, float4x2_mt16 b, float4x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt16 fms([This] float4x2_mt16 a, float4x2_mt16 b, float4x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt16 fnma([This] float4x2_mt16 a, float4x2_mt16 b, float4x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt16 fsm([This] float4x2_mt16 c, float4x2_mt16 a, float4x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt16 fam([This] float4x2_mt16 c, float4x2_mt16 a, float4x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt16 mad([This] float4x2_mt16 a, float4x2_mt16 b, float4x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float2_mt16 csum([This] float4x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static float2_mt16 cmin([This] float4x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static float2_mt16 cmax([This] float4x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // float4x2_mt16

#region float4x3_mt4

public partial struct float4x3_mt4
{
    #region Constants

    public static float4x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float4x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator+(float4x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator-(float4x3_mt4 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator+(float4x3_mt4 a, float4x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator-(float4x3_mt4 a, float4x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a float4x3_mt4 by float4x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator*(float4x3_mt4 a, float4x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a float4x3_mt4 by float_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator*(float4x3_mt4 a, float_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float4x3_mt4 by float4x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator*(float_mt4 a, float4x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a float4x3_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator*(float4x3_mt4 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float4x3_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator*(float a, float4x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator/(float4x3_mt4 a, float4x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator/(float4x3_mt4 a, float_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator/(float_mt4 a, float4x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator/(float4x3_mt4 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator/(float a, float4x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator%(float4x3_mt4 a, float4x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator%(float4x3_mt4 a, float_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator%(float_mt4 a, float4x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator%(float4x3_mt4 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator%(float a, float4x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator --(float4x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 operator ++(float4x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4x3_mt4 abs([This] float4x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 sign([This] float4x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 min([This] float4x3_mt4 a, float4x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 max([This] float4x3_mt4 a, float4x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 clamp([This] float4x3_mt4 v, float4x3_mt4 min, float4x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static float4x3_mt4 square([This] float4x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt4 fma([This] float4x3_mt4 a, float4x3_mt4 b, float4x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt4 fms([This] float4x3_mt4 a, float4x3_mt4 b, float4x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt4 fnma([This] float4x3_mt4 a, float4x3_mt4 b, float4x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt4 fsm([This] float4x3_mt4 c, float4x3_mt4 a, float4x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt4 fam([This] float4x3_mt4 c, float4x3_mt4 a, float4x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt4 mad([This] float4x3_mt4 a, float4x3_mt4 b, float4x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float3_mt4 csum([This] float4x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static float3_mt4 cmin([This] float4x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static float3_mt4 cmax([This] float4x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // float4x3_mt4

#region float4x3_mt8

public partial struct float4x3_mt8
{
    #region Constants

    public static float4x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float4x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator+(float4x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator-(float4x3_mt8 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator+(float4x3_mt8 a, float4x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator-(float4x3_mt8 a, float4x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a float4x3_mt8 by float4x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator*(float4x3_mt8 a, float4x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a float4x3_mt8 by float_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator*(float4x3_mt8 a, float_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float4x3_mt8 by float4x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator*(float_mt8 a, float4x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a float4x3_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator*(float4x3_mt8 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float4x3_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator*(float a, float4x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator/(float4x3_mt8 a, float4x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator/(float4x3_mt8 a, float_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator/(float_mt8 a, float4x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator/(float4x3_mt8 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator/(float a, float4x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator%(float4x3_mt8 a, float4x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator%(float4x3_mt8 a, float_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator%(float_mt8 a, float4x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator%(float4x3_mt8 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator%(float a, float4x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator --(float4x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 operator ++(float4x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4x3_mt8 abs([This] float4x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 sign([This] float4x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 min([This] float4x3_mt8 a, float4x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 max([This] float4x3_mt8 a, float4x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 clamp([This] float4x3_mt8 v, float4x3_mt8 min, float4x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static float4x3_mt8 square([This] float4x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt8 fma([This] float4x3_mt8 a, float4x3_mt8 b, float4x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt8 fms([This] float4x3_mt8 a, float4x3_mt8 b, float4x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt8 fnma([This] float4x3_mt8 a, float4x3_mt8 b, float4x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt8 fsm([This] float4x3_mt8 c, float4x3_mt8 a, float4x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt8 fam([This] float4x3_mt8 c, float4x3_mt8 a, float4x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt8 mad([This] float4x3_mt8 a, float4x3_mt8 b, float4x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float3_mt8 csum([This] float4x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static float3_mt8 cmin([This] float4x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static float3_mt8 cmax([This] float4x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // float4x3_mt8

#region float4x3_mt16

public partial struct float4x3_mt16
{
    #region Constants

    public static float4x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float4x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator+(float4x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator-(float4x3_mt16 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator+(float4x3_mt16 a, float4x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator-(float4x3_mt16 a, float4x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a float4x3_mt16 by float4x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator*(float4x3_mt16 a, float4x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a float4x3_mt16 by float_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator*(float4x3_mt16 a, float_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float4x3_mt16 by float4x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator*(float_mt16 a, float4x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a float4x3_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator*(float4x3_mt16 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float4x3_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator*(float a, float4x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator/(float4x3_mt16 a, float4x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator/(float4x3_mt16 a, float_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator/(float_mt16 a, float4x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator/(float4x3_mt16 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator/(float a, float4x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator%(float4x3_mt16 a, float4x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator%(float4x3_mt16 a, float_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator%(float_mt16 a, float4x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator%(float4x3_mt16 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator%(float a, float4x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator --(float4x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 operator ++(float4x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4x3_mt16 abs([This] float4x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 sign([This] float4x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 min([This] float4x3_mt16 a, float4x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 max([This] float4x3_mt16 a, float4x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 clamp([This] float4x3_mt16 v, float4x3_mt16 min, float4x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static float4x3_mt16 square([This] float4x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt16 fma([This] float4x3_mt16 a, float4x3_mt16 b, float4x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt16 fms([This] float4x3_mt16 a, float4x3_mt16 b, float4x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt16 fnma([This] float4x3_mt16 a, float4x3_mt16 b, float4x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt16 fsm([This] float4x3_mt16 c, float4x3_mt16 a, float4x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt16 fam([This] float4x3_mt16 c, float4x3_mt16 a, float4x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt16 mad([This] float4x3_mt16 a, float4x3_mt16 b, float4x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float3_mt16 csum([This] float4x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static float3_mt16 cmin([This] float4x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static float3_mt16 cmax([This] float4x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // float4x3_mt16

#region float4x4_mt4

public partial struct float4x4_mt4
{
    #region Constants

    public static float4x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float4x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator+(float4x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator-(float4x4_mt4 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator+(float4x4_mt4 a, float4x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator-(float4x4_mt4 a, float4x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a float4x4_mt4 by float4x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator*(float4x4_mt4 a, float4x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a float4x4_mt4 by float_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator*(float4x4_mt4 a, float_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float4x4_mt4 by float4x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator*(float_mt4 a, float4x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a float4x4_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator*(float4x4_mt4 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float4x4_mt4 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator*(float a, float4x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator/(float4x4_mt4 a, float4x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator/(float4x4_mt4 a, float_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator/(float_mt4 a, float4x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator/(float4x4_mt4 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator/(float a, float4x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator%(float4x4_mt4 a, float4x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator%(float4x4_mt4 a, float_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator%(float_mt4 a, float4x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator%(float4x4_mt4 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator%(float a, float4x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator --(float4x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 operator ++(float4x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4x4_mt4 abs([This] float4x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 sign([This] float4x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 min([This] float4x4_mt4 a, float4x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 max([This] float4x4_mt4 a, float4x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 clamp([This] float4x4_mt4 v, float4x4_mt4 min, float4x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static float4x4_mt4 square([This] float4x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt4 fma([This] float4x4_mt4 a, float4x4_mt4 b, float4x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt4 fms([This] float4x4_mt4 a, float4x4_mt4 b, float4x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt4 fnma([This] float4x4_mt4 a, float4x4_mt4 b, float4x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt4 fsm([This] float4x4_mt4 c, float4x4_mt4 a, float4x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt4 fam([This] float4x4_mt4 c, float4x4_mt4 a, float4x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt4 mad([This] float4x4_mt4 a, float4x4_mt4 b, float4x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float4_mt4 csum([This] float4x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static float4_mt4 cmin([This] float4x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static float4_mt4 cmax([This] float4x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // float4x4_mt4

#region float4x4_mt8

public partial struct float4x4_mt8
{
    #region Constants

    public static float4x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float4x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator+(float4x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator-(float4x4_mt8 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator+(float4x4_mt8 a, float4x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator-(float4x4_mt8 a, float4x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a float4x4_mt8 by float4x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator*(float4x4_mt8 a, float4x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a float4x4_mt8 by float_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator*(float4x4_mt8 a, float_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float4x4_mt8 by float4x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator*(float_mt8 a, float4x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a float4x4_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator*(float4x4_mt8 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float4x4_mt8 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator*(float a, float4x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator/(float4x4_mt8 a, float4x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator/(float4x4_mt8 a, float_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator/(float_mt8 a, float4x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator/(float4x4_mt8 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator/(float a, float4x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator%(float4x4_mt8 a, float4x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator%(float4x4_mt8 a, float_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator%(float_mt8 a, float4x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator%(float4x4_mt8 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator%(float a, float4x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator --(float4x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 operator ++(float4x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4x4_mt8 abs([This] float4x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 sign([This] float4x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 min([This] float4x4_mt8 a, float4x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 max([This] float4x4_mt8 a, float4x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 clamp([This] float4x4_mt8 v, float4x4_mt8 min, float4x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static float4x4_mt8 square([This] float4x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt8 fma([This] float4x4_mt8 a, float4x4_mt8 b, float4x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt8 fms([This] float4x4_mt8 a, float4x4_mt8 b, float4x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt8 fnma([This] float4x4_mt8 a, float4x4_mt8 b, float4x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt8 fsm([This] float4x4_mt8 c, float4x4_mt8 a, float4x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt8 fam([This] float4x4_mt8 c, float4x4_mt8 a, float4x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt8 mad([This] float4x4_mt8 a, float4x4_mt8 b, float4x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float4_mt8 csum([This] float4x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static float4_mt8 cmin([This] float4x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static float4_mt8 cmax([This] float4x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // float4x4_mt8

#region float4x4_mt16

public partial struct float4x4_mt16
{
    #region Constants

    public static float4x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float4x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator+(float4x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator-(float4x4_mt16 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator+(float4x4_mt16 a, float4x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator-(float4x4_mt16 a, float4x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a float4x4_mt16 by float4x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator*(float4x4_mt16 a, float4x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a float4x4_mt16 by float_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator*(float4x4_mt16 a, float_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float4x4_mt16 by float4x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator*(float_mt16 a, float4x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a float4x4_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator*(float4x4_mt16 a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float4x4_mt16 by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator*(float a, float4x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator/(float4x4_mt16 a, float4x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator/(float4x4_mt16 a, float_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator/(float_mt16 a, float4x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator/(float4x4_mt16 a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator/(float a, float4x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator%(float4x4_mt16 a, float4x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator%(float4x4_mt16 a, float_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator%(float_mt16 a, float4x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator%(float4x4_mt16 a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator%(float a, float4x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator --(float4x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 operator ++(float4x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4x4_mt16 abs([This] float4x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 sign([This] float4x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 min([This] float4x4_mt16 a, float4x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 max([This] float4x4_mt16 a, float4x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 clamp([This] float4x4_mt16 v, float4x4_mt16 min, float4x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static float4x4_mt16 square([This] float4x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt16 fma([This] float4x4_mt16 a, float4x4_mt16 b, float4x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt16 fms([This] float4x4_mt16 a, float4x4_mt16 b, float4x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt16 fnma([This] float4x4_mt16 a, float4x4_mt16 b, float4x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt16 fsm([This] float4x4_mt16 c, float4x4_mt16 a, float4x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt16 fam([This] float4x4_mt16 c, float4x4_mt16 a, float4x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt16 mad([This] float4x4_mt16 a, float4x4_mt16 b, float4x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float4_mt16 csum([This] float4x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static float4_mt16 cmin([This] float4x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static float4_mt16 cmax([This] float4x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // float4x4_mt16

#region double2x2_mt4

public partial struct double2x2_mt4
{
    #region Constants

    public static double2x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double2x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator+(double2x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator-(double2x2_mt4 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator+(double2x2_mt4 a, double2x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator-(double2x2_mt4 a, double2x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a double2x2_mt4 by double2x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator*(double2x2_mt4 a, double2x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a double2x2_mt4 by double_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator*(double2x2_mt4 a, double_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double2x2_mt4 by double2x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator*(double_mt4 a, double2x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a double2x2_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator*(double2x2_mt4 a, double b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double2x2_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator*(double a, double2x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator/(double2x2_mt4 a, double2x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator/(double2x2_mt4 a, double_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator/(double_mt4 a, double2x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator/(double2x2_mt4 a, double b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator/(double a, double2x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator%(double2x2_mt4 a, double2x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator%(double2x2_mt4 a, double_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator%(double_mt4 a, double2x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator%(double2x2_mt4 a, double b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator%(double a, double2x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator --(double2x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 operator ++(double2x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2x2_mt4 abs([This] double2x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 sign([This] double2x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 min([This] double2x2_mt4 a, double2x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 max([This] double2x2_mt4 a, double2x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 clamp([This] double2x2_mt4 v, double2x2_mt4 min, double2x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static double2x2_mt4 square([This] double2x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt4 fma([This] double2x2_mt4 a, double2x2_mt4 b, double2x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt4 fms([This] double2x2_mt4 a, double2x2_mt4 b, double2x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt4 fnma([This] double2x2_mt4 a, double2x2_mt4 b, double2x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt4 fsm([This] double2x2_mt4 c, double2x2_mt4 a, double2x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt4 fam([This] double2x2_mt4 c, double2x2_mt4 a, double2x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt4 mad([This] double2x2_mt4 a, double2x2_mt4 b, double2x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double2_mt4 csum([This] double2x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static double2_mt4 cmin([This] double2x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static double2_mt4 cmax([This] double2x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // double2x2_mt4

#region double2x2_mt8

public partial struct double2x2_mt8
{
    #region Constants

    public static double2x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double2x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator+(double2x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator-(double2x2_mt8 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator+(double2x2_mt8 a, double2x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator-(double2x2_mt8 a, double2x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a double2x2_mt8 by double2x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator*(double2x2_mt8 a, double2x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a double2x2_mt8 by double_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator*(double2x2_mt8 a, double_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double2x2_mt8 by double2x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator*(double_mt8 a, double2x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a double2x2_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator*(double2x2_mt8 a, double b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double2x2_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator*(double a, double2x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator/(double2x2_mt8 a, double2x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator/(double2x2_mt8 a, double_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator/(double_mt8 a, double2x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator/(double2x2_mt8 a, double b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator/(double a, double2x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator%(double2x2_mt8 a, double2x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator%(double2x2_mt8 a, double_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator%(double_mt8 a, double2x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator%(double2x2_mt8 a, double b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator%(double a, double2x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator --(double2x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 operator ++(double2x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2x2_mt8 abs([This] double2x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 sign([This] double2x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 min([This] double2x2_mt8 a, double2x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 max([This] double2x2_mt8 a, double2x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 clamp([This] double2x2_mt8 v, double2x2_mt8 min, double2x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static double2x2_mt8 square([This] double2x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt8 fma([This] double2x2_mt8 a, double2x2_mt8 b, double2x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt8 fms([This] double2x2_mt8 a, double2x2_mt8 b, double2x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt8 fnma([This] double2x2_mt8 a, double2x2_mt8 b, double2x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt8 fsm([This] double2x2_mt8 c, double2x2_mt8 a, double2x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt8 fam([This] double2x2_mt8 c, double2x2_mt8 a, double2x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt8 mad([This] double2x2_mt8 a, double2x2_mt8 b, double2x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double2_mt8 csum([This] double2x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static double2_mt8 cmin([This] double2x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static double2_mt8 cmax([This] double2x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // double2x2_mt8

#region double2x2_mt16

public partial struct double2x2_mt16
{
    #region Constants

    public static double2x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double2x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator+(double2x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator-(double2x2_mt16 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator+(double2x2_mt16 a, double2x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator-(double2x2_mt16 a, double2x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a double2x2_mt16 by double2x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator*(double2x2_mt16 a, double2x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a double2x2_mt16 by double_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator*(double2x2_mt16 a, double_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double2x2_mt16 by double2x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator*(double_mt16 a, double2x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a double2x2_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator*(double2x2_mt16 a, double b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double2x2_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator*(double a, double2x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator/(double2x2_mt16 a, double2x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator/(double2x2_mt16 a, double_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator/(double_mt16 a, double2x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator/(double2x2_mt16 a, double b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator/(double a, double2x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator%(double2x2_mt16 a, double2x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator%(double2x2_mt16 a, double_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator%(double_mt16 a, double2x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator%(double2x2_mt16 a, double b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator%(double a, double2x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator --(double2x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 operator ++(double2x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2x2_mt16 abs([This] double2x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 sign([This] double2x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 min([This] double2x2_mt16 a, double2x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 max([This] double2x2_mt16 a, double2x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 clamp([This] double2x2_mt16 v, double2x2_mt16 min, double2x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static double2x2_mt16 square([This] double2x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt16 fma([This] double2x2_mt16 a, double2x2_mt16 b, double2x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt16 fms([This] double2x2_mt16 a, double2x2_mt16 b, double2x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt16 fnma([This] double2x2_mt16 a, double2x2_mt16 b, double2x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt16 fsm([This] double2x2_mt16 c, double2x2_mt16 a, double2x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt16 fam([This] double2x2_mt16 c, double2x2_mt16 a, double2x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt16 mad([This] double2x2_mt16 a, double2x2_mt16 b, double2x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double2_mt16 csum([This] double2x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static double2_mt16 cmin([This] double2x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static double2_mt16 cmax([This] double2x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // double2x2_mt16

#region double2x3_mt4

public partial struct double2x3_mt4
{
    #region Constants

    public static double2x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double2x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator+(double2x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator-(double2x3_mt4 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator+(double2x3_mt4 a, double2x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator-(double2x3_mt4 a, double2x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a double2x3_mt4 by double2x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator*(double2x3_mt4 a, double2x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a double2x3_mt4 by double_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator*(double2x3_mt4 a, double_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double2x3_mt4 by double2x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator*(double_mt4 a, double2x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a double2x3_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator*(double2x3_mt4 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double2x3_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator*(double a, double2x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator/(double2x3_mt4 a, double2x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator/(double2x3_mt4 a, double_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator/(double_mt4 a, double2x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator/(double2x3_mt4 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator/(double a, double2x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator%(double2x3_mt4 a, double2x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator%(double2x3_mt4 a, double_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator%(double_mt4 a, double2x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator%(double2x3_mt4 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator%(double a, double2x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator --(double2x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 operator ++(double2x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2x3_mt4 abs([This] double2x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 sign([This] double2x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 min([This] double2x3_mt4 a, double2x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 max([This] double2x3_mt4 a, double2x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 clamp([This] double2x3_mt4 v, double2x3_mt4 min, double2x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static double2x3_mt4 square([This] double2x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt4 fma([This] double2x3_mt4 a, double2x3_mt4 b, double2x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt4 fms([This] double2x3_mt4 a, double2x3_mt4 b, double2x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt4 fnma([This] double2x3_mt4 a, double2x3_mt4 b, double2x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt4 fsm([This] double2x3_mt4 c, double2x3_mt4 a, double2x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt4 fam([This] double2x3_mt4 c, double2x3_mt4 a, double2x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt4 mad([This] double2x3_mt4 a, double2x3_mt4 b, double2x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double3_mt4 csum([This] double2x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static double3_mt4 cmin([This] double2x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static double3_mt4 cmax([This] double2x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // double2x3_mt4

#region double2x3_mt8

public partial struct double2x3_mt8
{
    #region Constants

    public static double2x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double2x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator+(double2x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator-(double2x3_mt8 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator+(double2x3_mt8 a, double2x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator-(double2x3_mt8 a, double2x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a double2x3_mt8 by double2x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator*(double2x3_mt8 a, double2x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a double2x3_mt8 by double_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator*(double2x3_mt8 a, double_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double2x3_mt8 by double2x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator*(double_mt8 a, double2x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a double2x3_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator*(double2x3_mt8 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double2x3_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator*(double a, double2x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator/(double2x3_mt8 a, double2x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator/(double2x3_mt8 a, double_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator/(double_mt8 a, double2x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator/(double2x3_mt8 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator/(double a, double2x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator%(double2x3_mt8 a, double2x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator%(double2x3_mt8 a, double_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator%(double_mt8 a, double2x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator%(double2x3_mt8 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator%(double a, double2x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator --(double2x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 operator ++(double2x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2x3_mt8 abs([This] double2x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 sign([This] double2x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 min([This] double2x3_mt8 a, double2x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 max([This] double2x3_mt8 a, double2x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 clamp([This] double2x3_mt8 v, double2x3_mt8 min, double2x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static double2x3_mt8 square([This] double2x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt8 fma([This] double2x3_mt8 a, double2x3_mt8 b, double2x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt8 fms([This] double2x3_mt8 a, double2x3_mt8 b, double2x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt8 fnma([This] double2x3_mt8 a, double2x3_mt8 b, double2x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt8 fsm([This] double2x3_mt8 c, double2x3_mt8 a, double2x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt8 fam([This] double2x3_mt8 c, double2x3_mt8 a, double2x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt8 mad([This] double2x3_mt8 a, double2x3_mt8 b, double2x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double3_mt8 csum([This] double2x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static double3_mt8 cmin([This] double2x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static double3_mt8 cmax([This] double2x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // double2x3_mt8

#region double2x3_mt16

public partial struct double2x3_mt16
{
    #region Constants

    public static double2x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double2x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator+(double2x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator-(double2x3_mt16 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator+(double2x3_mt16 a, double2x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator-(double2x3_mt16 a, double2x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a double2x3_mt16 by double2x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator*(double2x3_mt16 a, double2x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a double2x3_mt16 by double_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator*(double2x3_mt16 a, double_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double2x3_mt16 by double2x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator*(double_mt16 a, double2x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a double2x3_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator*(double2x3_mt16 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double2x3_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator*(double a, double2x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator/(double2x3_mt16 a, double2x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator/(double2x3_mt16 a, double_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator/(double_mt16 a, double2x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator/(double2x3_mt16 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator/(double a, double2x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator%(double2x3_mt16 a, double2x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator%(double2x3_mt16 a, double_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator%(double_mt16 a, double2x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator%(double2x3_mt16 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator%(double a, double2x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator --(double2x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 operator ++(double2x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2x3_mt16 abs([This] double2x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 sign([This] double2x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 min([This] double2x3_mt16 a, double2x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 max([This] double2x3_mt16 a, double2x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 clamp([This] double2x3_mt16 v, double2x3_mt16 min, double2x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static double2x3_mt16 square([This] double2x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt16 fma([This] double2x3_mt16 a, double2x3_mt16 b, double2x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt16 fms([This] double2x3_mt16 a, double2x3_mt16 b, double2x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt16 fnma([This] double2x3_mt16 a, double2x3_mt16 b, double2x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt16 fsm([This] double2x3_mt16 c, double2x3_mt16 a, double2x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt16 fam([This] double2x3_mt16 c, double2x3_mt16 a, double2x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt16 mad([This] double2x3_mt16 a, double2x3_mt16 b, double2x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double3_mt16 csum([This] double2x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static double3_mt16 cmin([This] double2x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static double3_mt16 cmax([This] double2x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // double2x3_mt16

#region double2x4_mt4

public partial struct double2x4_mt4
{
    #region Constants

    public static double2x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double2x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator+(double2x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator-(double2x4_mt4 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator+(double2x4_mt4 a, double2x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator-(double2x4_mt4 a, double2x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a double2x4_mt4 by double2x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator*(double2x4_mt4 a, double2x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a double2x4_mt4 by double_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator*(double2x4_mt4 a, double_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double2x4_mt4 by double2x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator*(double_mt4 a, double2x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a double2x4_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator*(double2x4_mt4 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double2x4_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator*(double a, double2x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator/(double2x4_mt4 a, double2x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator/(double2x4_mt4 a, double_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator/(double_mt4 a, double2x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator/(double2x4_mt4 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator/(double a, double2x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator%(double2x4_mt4 a, double2x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator%(double2x4_mt4 a, double_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator%(double_mt4 a, double2x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator%(double2x4_mt4 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator%(double a, double2x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator --(double2x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 operator ++(double2x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2x4_mt4 abs([This] double2x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 sign([This] double2x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 min([This] double2x4_mt4 a, double2x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 max([This] double2x4_mt4 a, double2x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 clamp([This] double2x4_mt4 v, double2x4_mt4 min, double2x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static double2x4_mt4 square([This] double2x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt4 fma([This] double2x4_mt4 a, double2x4_mt4 b, double2x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt4 fms([This] double2x4_mt4 a, double2x4_mt4 b, double2x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt4 fnma([This] double2x4_mt4 a, double2x4_mt4 b, double2x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt4 fsm([This] double2x4_mt4 c, double2x4_mt4 a, double2x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt4 fam([This] double2x4_mt4 c, double2x4_mt4 a, double2x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt4 mad([This] double2x4_mt4 a, double2x4_mt4 b, double2x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double4_mt4 csum([This] double2x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static double4_mt4 cmin([This] double2x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static double4_mt4 cmax([This] double2x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // double2x4_mt4

#region double2x4_mt8

public partial struct double2x4_mt8
{
    #region Constants

    public static double2x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double2x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator+(double2x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator-(double2x4_mt8 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator+(double2x4_mt8 a, double2x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator-(double2x4_mt8 a, double2x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a double2x4_mt8 by double2x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator*(double2x4_mt8 a, double2x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a double2x4_mt8 by double_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator*(double2x4_mt8 a, double_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double2x4_mt8 by double2x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator*(double_mt8 a, double2x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a double2x4_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator*(double2x4_mt8 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double2x4_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator*(double a, double2x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator/(double2x4_mt8 a, double2x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator/(double2x4_mt8 a, double_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator/(double_mt8 a, double2x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator/(double2x4_mt8 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator/(double a, double2x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator%(double2x4_mt8 a, double2x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator%(double2x4_mt8 a, double_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator%(double_mt8 a, double2x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator%(double2x4_mt8 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator%(double a, double2x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator --(double2x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 operator ++(double2x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2x4_mt8 abs([This] double2x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 sign([This] double2x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 min([This] double2x4_mt8 a, double2x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 max([This] double2x4_mt8 a, double2x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 clamp([This] double2x4_mt8 v, double2x4_mt8 min, double2x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static double2x4_mt8 square([This] double2x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt8 fma([This] double2x4_mt8 a, double2x4_mt8 b, double2x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt8 fms([This] double2x4_mt8 a, double2x4_mt8 b, double2x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt8 fnma([This] double2x4_mt8 a, double2x4_mt8 b, double2x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt8 fsm([This] double2x4_mt8 c, double2x4_mt8 a, double2x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt8 fam([This] double2x4_mt8 c, double2x4_mt8 a, double2x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt8 mad([This] double2x4_mt8 a, double2x4_mt8 b, double2x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double4_mt8 csum([This] double2x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static double4_mt8 cmin([This] double2x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static double4_mt8 cmax([This] double2x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // double2x4_mt8

#region double2x4_mt16

public partial struct double2x4_mt16
{
    #region Constants

    public static double2x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double2x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator+(double2x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator-(double2x4_mt16 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator+(double2x4_mt16 a, double2x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator-(double2x4_mt16 a, double2x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a double2x4_mt16 by double2x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator*(double2x4_mt16 a, double2x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a double2x4_mt16 by double_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator*(double2x4_mt16 a, double_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double2x4_mt16 by double2x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator*(double_mt16 a, double2x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a double2x4_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator*(double2x4_mt16 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double2x4_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator*(double a, double2x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator/(double2x4_mt16 a, double2x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator/(double2x4_mt16 a, double_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator/(double_mt16 a, double2x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator/(double2x4_mt16 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator/(double a, double2x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator%(double2x4_mt16 a, double2x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator%(double2x4_mt16 a, double_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator%(double_mt16 a, double2x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator%(double2x4_mt16 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator%(double a, double2x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator --(double2x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 operator ++(double2x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2x4_mt16 abs([This] double2x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 sign([This] double2x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 min([This] double2x4_mt16 a, double2x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 max([This] double2x4_mt16 a, double2x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 clamp([This] double2x4_mt16 v, double2x4_mt16 min, double2x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static double2x4_mt16 square([This] double2x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt16 fma([This] double2x4_mt16 a, double2x4_mt16 b, double2x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt16 fms([This] double2x4_mt16 a, double2x4_mt16 b, double2x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt16 fnma([This] double2x4_mt16 a, double2x4_mt16 b, double2x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt16 fsm([This] double2x4_mt16 c, double2x4_mt16 a, double2x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt16 fam([This] double2x4_mt16 c, double2x4_mt16 a, double2x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt16 mad([This] double2x4_mt16 a, double2x4_mt16 b, double2x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double4_mt16 csum([This] double2x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static double4_mt16 cmin([This] double2x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static double4_mt16 cmax([This] double2x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // double2x4_mt16

#region double3x2_mt4

public partial struct double3x2_mt4
{
    #region Constants

    public static double3x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double3x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator+(double3x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator-(double3x2_mt4 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator+(double3x2_mt4 a, double3x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator-(double3x2_mt4 a, double3x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a double3x2_mt4 by double3x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator*(double3x2_mt4 a, double3x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a double3x2_mt4 by double_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator*(double3x2_mt4 a, double_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double3x2_mt4 by double3x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator*(double_mt4 a, double3x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a double3x2_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator*(double3x2_mt4 a, double b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double3x2_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator*(double a, double3x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator/(double3x2_mt4 a, double3x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator/(double3x2_mt4 a, double_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator/(double_mt4 a, double3x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator/(double3x2_mt4 a, double b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator/(double a, double3x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator%(double3x2_mt4 a, double3x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator%(double3x2_mt4 a, double_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator%(double_mt4 a, double3x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator%(double3x2_mt4 a, double b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator%(double a, double3x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator --(double3x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 operator ++(double3x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3x2_mt4 abs([This] double3x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 sign([This] double3x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 min([This] double3x2_mt4 a, double3x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 max([This] double3x2_mt4 a, double3x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 clamp([This] double3x2_mt4 v, double3x2_mt4 min, double3x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static double3x2_mt4 square([This] double3x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt4 fma([This] double3x2_mt4 a, double3x2_mt4 b, double3x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt4 fms([This] double3x2_mt4 a, double3x2_mt4 b, double3x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt4 fnma([This] double3x2_mt4 a, double3x2_mt4 b, double3x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt4 fsm([This] double3x2_mt4 c, double3x2_mt4 a, double3x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt4 fam([This] double3x2_mt4 c, double3x2_mt4 a, double3x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt4 mad([This] double3x2_mt4 a, double3x2_mt4 b, double3x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double2_mt4 csum([This] double3x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static double2_mt4 cmin([This] double3x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static double2_mt4 cmax([This] double3x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // double3x2_mt4

#region double3x2_mt8

public partial struct double3x2_mt8
{
    #region Constants

    public static double3x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double3x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator+(double3x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator-(double3x2_mt8 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator+(double3x2_mt8 a, double3x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator-(double3x2_mt8 a, double3x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a double3x2_mt8 by double3x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator*(double3x2_mt8 a, double3x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a double3x2_mt8 by double_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator*(double3x2_mt8 a, double_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double3x2_mt8 by double3x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator*(double_mt8 a, double3x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a double3x2_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator*(double3x2_mt8 a, double b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double3x2_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator*(double a, double3x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator/(double3x2_mt8 a, double3x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator/(double3x2_mt8 a, double_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator/(double_mt8 a, double3x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator/(double3x2_mt8 a, double b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator/(double a, double3x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator%(double3x2_mt8 a, double3x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator%(double3x2_mt8 a, double_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator%(double_mt8 a, double3x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator%(double3x2_mt8 a, double b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator%(double a, double3x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator --(double3x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 operator ++(double3x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3x2_mt8 abs([This] double3x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 sign([This] double3x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 min([This] double3x2_mt8 a, double3x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 max([This] double3x2_mt8 a, double3x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 clamp([This] double3x2_mt8 v, double3x2_mt8 min, double3x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static double3x2_mt8 square([This] double3x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt8 fma([This] double3x2_mt8 a, double3x2_mt8 b, double3x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt8 fms([This] double3x2_mt8 a, double3x2_mt8 b, double3x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt8 fnma([This] double3x2_mt8 a, double3x2_mt8 b, double3x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt8 fsm([This] double3x2_mt8 c, double3x2_mt8 a, double3x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt8 fam([This] double3x2_mt8 c, double3x2_mt8 a, double3x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt8 mad([This] double3x2_mt8 a, double3x2_mt8 b, double3x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double2_mt8 csum([This] double3x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static double2_mt8 cmin([This] double3x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static double2_mt8 cmax([This] double3x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // double3x2_mt8

#region double3x2_mt16

public partial struct double3x2_mt16
{
    #region Constants

    public static double3x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double3x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator+(double3x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator-(double3x2_mt16 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator+(double3x2_mt16 a, double3x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator-(double3x2_mt16 a, double3x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a double3x2_mt16 by double3x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator*(double3x2_mt16 a, double3x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a double3x2_mt16 by double_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator*(double3x2_mt16 a, double_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double3x2_mt16 by double3x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator*(double_mt16 a, double3x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a double3x2_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator*(double3x2_mt16 a, double b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double3x2_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator*(double a, double3x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator/(double3x2_mt16 a, double3x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator/(double3x2_mt16 a, double_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator/(double_mt16 a, double3x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator/(double3x2_mt16 a, double b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator/(double a, double3x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator%(double3x2_mt16 a, double3x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator%(double3x2_mt16 a, double_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator%(double_mt16 a, double3x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator%(double3x2_mt16 a, double b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator%(double a, double3x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator --(double3x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 operator ++(double3x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3x2_mt16 abs([This] double3x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 sign([This] double3x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 min([This] double3x2_mt16 a, double3x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 max([This] double3x2_mt16 a, double3x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 clamp([This] double3x2_mt16 v, double3x2_mt16 min, double3x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static double3x2_mt16 square([This] double3x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt16 fma([This] double3x2_mt16 a, double3x2_mt16 b, double3x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt16 fms([This] double3x2_mt16 a, double3x2_mt16 b, double3x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt16 fnma([This] double3x2_mt16 a, double3x2_mt16 b, double3x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt16 fsm([This] double3x2_mt16 c, double3x2_mt16 a, double3x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt16 fam([This] double3x2_mt16 c, double3x2_mt16 a, double3x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt16 mad([This] double3x2_mt16 a, double3x2_mt16 b, double3x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double2_mt16 csum([This] double3x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static double2_mt16 cmin([This] double3x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static double2_mt16 cmax([This] double3x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // double3x2_mt16

#region double3x3_mt4

public partial struct double3x3_mt4
{
    #region Constants

    public static double3x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double3x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator+(double3x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator-(double3x3_mt4 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator+(double3x3_mt4 a, double3x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator-(double3x3_mt4 a, double3x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a double3x3_mt4 by double3x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator*(double3x3_mt4 a, double3x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a double3x3_mt4 by double_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator*(double3x3_mt4 a, double_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double3x3_mt4 by double3x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator*(double_mt4 a, double3x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a double3x3_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator*(double3x3_mt4 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double3x3_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator*(double a, double3x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator/(double3x3_mt4 a, double3x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator/(double3x3_mt4 a, double_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator/(double_mt4 a, double3x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator/(double3x3_mt4 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator/(double a, double3x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator%(double3x3_mt4 a, double3x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator%(double3x3_mt4 a, double_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator%(double_mt4 a, double3x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator%(double3x3_mt4 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator%(double a, double3x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator --(double3x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 operator ++(double3x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3x3_mt4 abs([This] double3x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 sign([This] double3x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 min([This] double3x3_mt4 a, double3x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 max([This] double3x3_mt4 a, double3x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 clamp([This] double3x3_mt4 v, double3x3_mt4 min, double3x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static double3x3_mt4 square([This] double3x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt4 fma([This] double3x3_mt4 a, double3x3_mt4 b, double3x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt4 fms([This] double3x3_mt4 a, double3x3_mt4 b, double3x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt4 fnma([This] double3x3_mt4 a, double3x3_mt4 b, double3x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt4 fsm([This] double3x3_mt4 c, double3x3_mt4 a, double3x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt4 fam([This] double3x3_mt4 c, double3x3_mt4 a, double3x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt4 mad([This] double3x3_mt4 a, double3x3_mt4 b, double3x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double3_mt4 csum([This] double3x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static double3_mt4 cmin([This] double3x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static double3_mt4 cmax([This] double3x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // double3x3_mt4

#region double3x3_mt8

public partial struct double3x3_mt8
{
    #region Constants

    public static double3x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double3x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator+(double3x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator-(double3x3_mt8 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator+(double3x3_mt8 a, double3x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator-(double3x3_mt8 a, double3x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a double3x3_mt8 by double3x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator*(double3x3_mt8 a, double3x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a double3x3_mt8 by double_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator*(double3x3_mt8 a, double_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double3x3_mt8 by double3x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator*(double_mt8 a, double3x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a double3x3_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator*(double3x3_mt8 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double3x3_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator*(double a, double3x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator/(double3x3_mt8 a, double3x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator/(double3x3_mt8 a, double_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator/(double_mt8 a, double3x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator/(double3x3_mt8 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator/(double a, double3x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator%(double3x3_mt8 a, double3x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator%(double3x3_mt8 a, double_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator%(double_mt8 a, double3x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator%(double3x3_mt8 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator%(double a, double3x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator --(double3x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 operator ++(double3x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3x3_mt8 abs([This] double3x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 sign([This] double3x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 min([This] double3x3_mt8 a, double3x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 max([This] double3x3_mt8 a, double3x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 clamp([This] double3x3_mt8 v, double3x3_mt8 min, double3x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static double3x3_mt8 square([This] double3x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt8 fma([This] double3x3_mt8 a, double3x3_mt8 b, double3x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt8 fms([This] double3x3_mt8 a, double3x3_mt8 b, double3x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt8 fnma([This] double3x3_mt8 a, double3x3_mt8 b, double3x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt8 fsm([This] double3x3_mt8 c, double3x3_mt8 a, double3x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt8 fam([This] double3x3_mt8 c, double3x3_mt8 a, double3x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt8 mad([This] double3x3_mt8 a, double3x3_mt8 b, double3x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double3_mt8 csum([This] double3x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static double3_mt8 cmin([This] double3x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static double3_mt8 cmax([This] double3x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // double3x3_mt8

#region double3x3_mt16

public partial struct double3x3_mt16
{
    #region Constants

    public static double3x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double3x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator+(double3x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator-(double3x3_mt16 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator+(double3x3_mt16 a, double3x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator-(double3x3_mt16 a, double3x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a double3x3_mt16 by double3x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator*(double3x3_mt16 a, double3x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a double3x3_mt16 by double_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator*(double3x3_mt16 a, double_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double3x3_mt16 by double3x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator*(double_mt16 a, double3x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a double3x3_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator*(double3x3_mt16 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double3x3_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator*(double a, double3x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator/(double3x3_mt16 a, double3x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator/(double3x3_mt16 a, double_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator/(double_mt16 a, double3x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator/(double3x3_mt16 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator/(double a, double3x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator%(double3x3_mt16 a, double3x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator%(double3x3_mt16 a, double_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator%(double_mt16 a, double3x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator%(double3x3_mt16 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator%(double a, double3x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator --(double3x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 operator ++(double3x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3x3_mt16 abs([This] double3x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 sign([This] double3x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 min([This] double3x3_mt16 a, double3x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 max([This] double3x3_mt16 a, double3x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 clamp([This] double3x3_mt16 v, double3x3_mt16 min, double3x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static double3x3_mt16 square([This] double3x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt16 fma([This] double3x3_mt16 a, double3x3_mt16 b, double3x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt16 fms([This] double3x3_mt16 a, double3x3_mt16 b, double3x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt16 fnma([This] double3x3_mt16 a, double3x3_mt16 b, double3x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt16 fsm([This] double3x3_mt16 c, double3x3_mt16 a, double3x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt16 fam([This] double3x3_mt16 c, double3x3_mt16 a, double3x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt16 mad([This] double3x3_mt16 a, double3x3_mt16 b, double3x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double3_mt16 csum([This] double3x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static double3_mt16 cmin([This] double3x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static double3_mt16 cmax([This] double3x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // double3x3_mt16

#region double3x4_mt4

public partial struct double3x4_mt4
{
    #region Constants

    public static double3x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double3x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator+(double3x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator-(double3x4_mt4 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator+(double3x4_mt4 a, double3x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator-(double3x4_mt4 a, double3x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a double3x4_mt4 by double3x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator*(double3x4_mt4 a, double3x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a double3x4_mt4 by double_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator*(double3x4_mt4 a, double_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double3x4_mt4 by double3x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator*(double_mt4 a, double3x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a double3x4_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator*(double3x4_mt4 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double3x4_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator*(double a, double3x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator/(double3x4_mt4 a, double3x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator/(double3x4_mt4 a, double_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator/(double_mt4 a, double3x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator/(double3x4_mt4 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator/(double a, double3x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator%(double3x4_mt4 a, double3x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator%(double3x4_mt4 a, double_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator%(double_mt4 a, double3x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator%(double3x4_mt4 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator%(double a, double3x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator --(double3x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 operator ++(double3x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3x4_mt4 abs([This] double3x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 sign([This] double3x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 min([This] double3x4_mt4 a, double3x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 max([This] double3x4_mt4 a, double3x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 clamp([This] double3x4_mt4 v, double3x4_mt4 min, double3x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static double3x4_mt4 square([This] double3x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt4 fma([This] double3x4_mt4 a, double3x4_mt4 b, double3x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt4 fms([This] double3x4_mt4 a, double3x4_mt4 b, double3x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt4 fnma([This] double3x4_mt4 a, double3x4_mt4 b, double3x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt4 fsm([This] double3x4_mt4 c, double3x4_mt4 a, double3x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt4 fam([This] double3x4_mt4 c, double3x4_mt4 a, double3x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt4 mad([This] double3x4_mt4 a, double3x4_mt4 b, double3x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double4_mt4 csum([This] double3x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static double4_mt4 cmin([This] double3x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static double4_mt4 cmax([This] double3x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // double3x4_mt4

#region double3x4_mt8

public partial struct double3x4_mt8
{
    #region Constants

    public static double3x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double3x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator+(double3x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator-(double3x4_mt8 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator+(double3x4_mt8 a, double3x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator-(double3x4_mt8 a, double3x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a double3x4_mt8 by double3x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator*(double3x4_mt8 a, double3x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a double3x4_mt8 by double_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator*(double3x4_mt8 a, double_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double3x4_mt8 by double3x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator*(double_mt8 a, double3x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a double3x4_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator*(double3x4_mt8 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double3x4_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator*(double a, double3x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator/(double3x4_mt8 a, double3x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator/(double3x4_mt8 a, double_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator/(double_mt8 a, double3x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator/(double3x4_mt8 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator/(double a, double3x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator%(double3x4_mt8 a, double3x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator%(double3x4_mt8 a, double_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator%(double_mt8 a, double3x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator%(double3x4_mt8 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator%(double a, double3x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator --(double3x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 operator ++(double3x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3x4_mt8 abs([This] double3x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 sign([This] double3x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 min([This] double3x4_mt8 a, double3x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 max([This] double3x4_mt8 a, double3x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 clamp([This] double3x4_mt8 v, double3x4_mt8 min, double3x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static double3x4_mt8 square([This] double3x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt8 fma([This] double3x4_mt8 a, double3x4_mt8 b, double3x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt8 fms([This] double3x4_mt8 a, double3x4_mt8 b, double3x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt8 fnma([This] double3x4_mt8 a, double3x4_mt8 b, double3x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt8 fsm([This] double3x4_mt8 c, double3x4_mt8 a, double3x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt8 fam([This] double3x4_mt8 c, double3x4_mt8 a, double3x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt8 mad([This] double3x4_mt8 a, double3x4_mt8 b, double3x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double4_mt8 csum([This] double3x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static double4_mt8 cmin([This] double3x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static double4_mt8 cmax([This] double3x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // double3x4_mt8

#region double3x4_mt16

public partial struct double3x4_mt16
{
    #region Constants

    public static double3x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double3x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator+(double3x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator-(double3x4_mt16 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator+(double3x4_mt16 a, double3x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator-(double3x4_mt16 a, double3x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a double3x4_mt16 by double3x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator*(double3x4_mt16 a, double3x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a double3x4_mt16 by double_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator*(double3x4_mt16 a, double_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double3x4_mt16 by double3x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator*(double_mt16 a, double3x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a double3x4_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator*(double3x4_mt16 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double3x4_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator*(double a, double3x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator/(double3x4_mt16 a, double3x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator/(double3x4_mt16 a, double_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator/(double_mt16 a, double3x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator/(double3x4_mt16 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator/(double a, double3x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator%(double3x4_mt16 a, double3x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator%(double3x4_mt16 a, double_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator%(double_mt16 a, double3x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator%(double3x4_mt16 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator%(double a, double3x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator --(double3x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 operator ++(double3x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3x4_mt16 abs([This] double3x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 sign([This] double3x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 min([This] double3x4_mt16 a, double3x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 max([This] double3x4_mt16 a, double3x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 clamp([This] double3x4_mt16 v, double3x4_mt16 min, double3x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static double3x4_mt16 square([This] double3x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt16 fma([This] double3x4_mt16 a, double3x4_mt16 b, double3x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt16 fms([This] double3x4_mt16 a, double3x4_mt16 b, double3x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt16 fnma([This] double3x4_mt16 a, double3x4_mt16 b, double3x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt16 fsm([This] double3x4_mt16 c, double3x4_mt16 a, double3x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt16 fam([This] double3x4_mt16 c, double3x4_mt16 a, double3x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt16 mad([This] double3x4_mt16 a, double3x4_mt16 b, double3x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double4_mt16 csum([This] double3x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static double4_mt16 cmin([This] double3x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static double4_mt16 cmax([This] double3x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // double3x4_mt16

#region double4x2_mt4

public partial struct double4x2_mt4
{
    #region Constants

    public static double4x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double4x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator+(double4x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator-(double4x2_mt4 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator+(double4x2_mt4 a, double4x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator-(double4x2_mt4 a, double4x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a double4x2_mt4 by double4x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator*(double4x2_mt4 a, double4x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a double4x2_mt4 by double_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator*(double4x2_mt4 a, double_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double4x2_mt4 by double4x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator*(double_mt4 a, double4x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a double4x2_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator*(double4x2_mt4 a, double b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double4x2_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator*(double a, double4x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator/(double4x2_mt4 a, double4x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator/(double4x2_mt4 a, double_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator/(double_mt4 a, double4x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator/(double4x2_mt4 a, double b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator/(double a, double4x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator%(double4x2_mt4 a, double4x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator%(double4x2_mt4 a, double_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator%(double_mt4 a, double4x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator%(double4x2_mt4 a, double b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator%(double a, double4x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator --(double4x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 operator ++(double4x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4x2_mt4 abs([This] double4x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 sign([This] double4x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 min([This] double4x2_mt4 a, double4x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 max([This] double4x2_mt4 a, double4x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 clamp([This] double4x2_mt4 v, double4x2_mt4 min, double4x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static double4x2_mt4 square([This] double4x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt4 fma([This] double4x2_mt4 a, double4x2_mt4 b, double4x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt4 fms([This] double4x2_mt4 a, double4x2_mt4 b, double4x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt4 fnma([This] double4x2_mt4 a, double4x2_mt4 b, double4x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt4 fsm([This] double4x2_mt4 c, double4x2_mt4 a, double4x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt4 fam([This] double4x2_mt4 c, double4x2_mt4 a, double4x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt4 mad([This] double4x2_mt4 a, double4x2_mt4 b, double4x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double2_mt4 csum([This] double4x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static double2_mt4 cmin([This] double4x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static double2_mt4 cmax([This] double4x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // double4x2_mt4

#region double4x2_mt8

public partial struct double4x2_mt8
{
    #region Constants

    public static double4x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double4x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator+(double4x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator-(double4x2_mt8 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator+(double4x2_mt8 a, double4x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator-(double4x2_mt8 a, double4x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a double4x2_mt8 by double4x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator*(double4x2_mt8 a, double4x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a double4x2_mt8 by double_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator*(double4x2_mt8 a, double_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double4x2_mt8 by double4x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator*(double_mt8 a, double4x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a double4x2_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator*(double4x2_mt8 a, double b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double4x2_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator*(double a, double4x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator/(double4x2_mt8 a, double4x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator/(double4x2_mt8 a, double_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator/(double_mt8 a, double4x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator/(double4x2_mt8 a, double b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator/(double a, double4x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator%(double4x2_mt8 a, double4x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator%(double4x2_mt8 a, double_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator%(double_mt8 a, double4x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator%(double4x2_mt8 a, double b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator%(double a, double4x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator --(double4x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 operator ++(double4x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4x2_mt8 abs([This] double4x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 sign([This] double4x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 min([This] double4x2_mt8 a, double4x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 max([This] double4x2_mt8 a, double4x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 clamp([This] double4x2_mt8 v, double4x2_mt8 min, double4x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static double4x2_mt8 square([This] double4x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt8 fma([This] double4x2_mt8 a, double4x2_mt8 b, double4x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt8 fms([This] double4x2_mt8 a, double4x2_mt8 b, double4x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt8 fnma([This] double4x2_mt8 a, double4x2_mt8 b, double4x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt8 fsm([This] double4x2_mt8 c, double4x2_mt8 a, double4x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt8 fam([This] double4x2_mt8 c, double4x2_mt8 a, double4x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt8 mad([This] double4x2_mt8 a, double4x2_mt8 b, double4x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double2_mt8 csum([This] double4x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static double2_mt8 cmin([This] double4x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static double2_mt8 cmax([This] double4x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // double4x2_mt8

#region double4x2_mt16

public partial struct double4x2_mt16
{
    #region Constants

    public static double4x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double4x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator+(double4x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator-(double4x2_mt16 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator+(double4x2_mt16 a, double4x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator-(double4x2_mt16 a, double4x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a double4x2_mt16 by double4x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator*(double4x2_mt16 a, double4x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a double4x2_mt16 by double_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator*(double4x2_mt16 a, double_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double4x2_mt16 by double4x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator*(double_mt16 a, double4x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a double4x2_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator*(double4x2_mt16 a, double b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double4x2_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator*(double a, double4x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator/(double4x2_mt16 a, double4x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator/(double4x2_mt16 a, double_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator/(double_mt16 a, double4x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator/(double4x2_mt16 a, double b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator/(double a, double4x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator%(double4x2_mt16 a, double4x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator%(double4x2_mt16 a, double_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator%(double_mt16 a, double4x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator%(double4x2_mt16 a, double b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator%(double a, double4x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator --(double4x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 operator ++(double4x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4x2_mt16 abs([This] double4x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 sign([This] double4x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 min([This] double4x2_mt16 a, double4x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 max([This] double4x2_mt16 a, double4x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 clamp([This] double4x2_mt16 v, double4x2_mt16 min, double4x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static double4x2_mt16 square([This] double4x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt16 fma([This] double4x2_mt16 a, double4x2_mt16 b, double4x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt16 fms([This] double4x2_mt16 a, double4x2_mt16 b, double4x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt16 fnma([This] double4x2_mt16 a, double4x2_mt16 b, double4x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt16 fsm([This] double4x2_mt16 c, double4x2_mt16 a, double4x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt16 fam([This] double4x2_mt16 c, double4x2_mt16 a, double4x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt16 mad([This] double4x2_mt16 a, double4x2_mt16 b, double4x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double2_mt16 csum([This] double4x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static double2_mt16 cmin([This] double4x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static double2_mt16 cmax([This] double4x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // double4x2_mt16

#region double4x3_mt4

public partial struct double4x3_mt4
{
    #region Constants

    public static double4x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double4x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator+(double4x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator-(double4x3_mt4 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator+(double4x3_mt4 a, double4x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator-(double4x3_mt4 a, double4x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a double4x3_mt4 by double4x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator*(double4x3_mt4 a, double4x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a double4x3_mt4 by double_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator*(double4x3_mt4 a, double_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double4x3_mt4 by double4x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator*(double_mt4 a, double4x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a double4x3_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator*(double4x3_mt4 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double4x3_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator*(double a, double4x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator/(double4x3_mt4 a, double4x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator/(double4x3_mt4 a, double_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator/(double_mt4 a, double4x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator/(double4x3_mt4 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator/(double a, double4x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator%(double4x3_mt4 a, double4x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator%(double4x3_mt4 a, double_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator%(double_mt4 a, double4x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator%(double4x3_mt4 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator%(double a, double4x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator --(double4x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 operator ++(double4x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4x3_mt4 abs([This] double4x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 sign([This] double4x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 min([This] double4x3_mt4 a, double4x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 max([This] double4x3_mt4 a, double4x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 clamp([This] double4x3_mt4 v, double4x3_mt4 min, double4x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static double4x3_mt4 square([This] double4x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt4 fma([This] double4x3_mt4 a, double4x3_mt4 b, double4x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt4 fms([This] double4x3_mt4 a, double4x3_mt4 b, double4x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt4 fnma([This] double4x3_mt4 a, double4x3_mt4 b, double4x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt4 fsm([This] double4x3_mt4 c, double4x3_mt4 a, double4x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt4 fam([This] double4x3_mt4 c, double4x3_mt4 a, double4x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt4 mad([This] double4x3_mt4 a, double4x3_mt4 b, double4x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double3_mt4 csum([This] double4x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static double3_mt4 cmin([This] double4x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static double3_mt4 cmax([This] double4x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // double4x3_mt4

#region double4x3_mt8

public partial struct double4x3_mt8
{
    #region Constants

    public static double4x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double4x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator+(double4x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator-(double4x3_mt8 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator+(double4x3_mt8 a, double4x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator-(double4x3_mt8 a, double4x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a double4x3_mt8 by double4x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator*(double4x3_mt8 a, double4x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a double4x3_mt8 by double_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator*(double4x3_mt8 a, double_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double4x3_mt8 by double4x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator*(double_mt8 a, double4x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a double4x3_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator*(double4x3_mt8 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double4x3_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator*(double a, double4x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator/(double4x3_mt8 a, double4x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator/(double4x3_mt8 a, double_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator/(double_mt8 a, double4x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator/(double4x3_mt8 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator/(double a, double4x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator%(double4x3_mt8 a, double4x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator%(double4x3_mt8 a, double_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator%(double_mt8 a, double4x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator%(double4x3_mt8 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator%(double a, double4x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator --(double4x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 operator ++(double4x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4x3_mt8 abs([This] double4x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 sign([This] double4x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 min([This] double4x3_mt8 a, double4x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 max([This] double4x3_mt8 a, double4x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 clamp([This] double4x3_mt8 v, double4x3_mt8 min, double4x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static double4x3_mt8 square([This] double4x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt8 fma([This] double4x3_mt8 a, double4x3_mt8 b, double4x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt8 fms([This] double4x3_mt8 a, double4x3_mt8 b, double4x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt8 fnma([This] double4x3_mt8 a, double4x3_mt8 b, double4x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt8 fsm([This] double4x3_mt8 c, double4x3_mt8 a, double4x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt8 fam([This] double4x3_mt8 c, double4x3_mt8 a, double4x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt8 mad([This] double4x3_mt8 a, double4x3_mt8 b, double4x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double3_mt8 csum([This] double4x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static double3_mt8 cmin([This] double4x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static double3_mt8 cmax([This] double4x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // double4x3_mt8

#region double4x3_mt16

public partial struct double4x3_mt16
{
    #region Constants

    public static double4x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double4x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator+(double4x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator-(double4x3_mt16 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator+(double4x3_mt16 a, double4x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator-(double4x3_mt16 a, double4x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a double4x3_mt16 by double4x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator*(double4x3_mt16 a, double4x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a double4x3_mt16 by double_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator*(double4x3_mt16 a, double_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double4x3_mt16 by double4x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator*(double_mt16 a, double4x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a double4x3_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator*(double4x3_mt16 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double4x3_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator*(double a, double4x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator/(double4x3_mt16 a, double4x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator/(double4x3_mt16 a, double_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator/(double_mt16 a, double4x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator/(double4x3_mt16 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator/(double a, double4x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator%(double4x3_mt16 a, double4x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator%(double4x3_mt16 a, double_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator%(double_mt16 a, double4x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator%(double4x3_mt16 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator%(double a, double4x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator --(double4x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 operator ++(double4x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4x3_mt16 abs([This] double4x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 sign([This] double4x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 min([This] double4x3_mt16 a, double4x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 max([This] double4x3_mt16 a, double4x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 clamp([This] double4x3_mt16 v, double4x3_mt16 min, double4x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static double4x3_mt16 square([This] double4x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt16 fma([This] double4x3_mt16 a, double4x3_mt16 b, double4x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt16 fms([This] double4x3_mt16 a, double4x3_mt16 b, double4x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt16 fnma([This] double4x3_mt16 a, double4x3_mt16 b, double4x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt16 fsm([This] double4x3_mt16 c, double4x3_mt16 a, double4x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt16 fam([This] double4x3_mt16 c, double4x3_mt16 a, double4x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt16 mad([This] double4x3_mt16 a, double4x3_mt16 b, double4x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double3_mt16 csum([This] double4x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static double3_mt16 cmin([This] double4x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static double3_mt16 cmax([This] double4x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // double4x3_mt16

#region double4x4_mt4

public partial struct double4x4_mt4
{
    #region Constants

    public static double4x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double4x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator+(double4x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator-(double4x4_mt4 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator+(double4x4_mt4 a, double4x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator-(double4x4_mt4 a, double4x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a double4x4_mt4 by double4x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator*(double4x4_mt4 a, double4x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a double4x4_mt4 by double_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator*(double4x4_mt4 a, double_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double4x4_mt4 by double4x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator*(double_mt4 a, double4x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a double4x4_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator*(double4x4_mt4 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double4x4_mt4 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator*(double a, double4x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator/(double4x4_mt4 a, double4x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator/(double4x4_mt4 a, double_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator/(double_mt4 a, double4x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator/(double4x4_mt4 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator/(double a, double4x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator%(double4x4_mt4 a, double4x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator%(double4x4_mt4 a, double_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator%(double_mt4 a, double4x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator%(double4x4_mt4 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator%(double a, double4x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator --(double4x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 operator ++(double4x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4x4_mt4 abs([This] double4x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 sign([This] double4x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 min([This] double4x4_mt4 a, double4x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 max([This] double4x4_mt4 a, double4x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 clamp([This] double4x4_mt4 v, double4x4_mt4 min, double4x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static double4x4_mt4 square([This] double4x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt4 fma([This] double4x4_mt4 a, double4x4_mt4 b, double4x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt4 fms([This] double4x4_mt4 a, double4x4_mt4 b, double4x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt4 fnma([This] double4x4_mt4 a, double4x4_mt4 b, double4x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt4 fsm([This] double4x4_mt4 c, double4x4_mt4 a, double4x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt4 fam([This] double4x4_mt4 c, double4x4_mt4 a, double4x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt4 mad([This] double4x4_mt4 a, double4x4_mt4 b, double4x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double4_mt4 csum([This] double4x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static double4_mt4 cmin([This] double4x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static double4_mt4 cmax([This] double4x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // double4x4_mt4

#region double4x4_mt8

public partial struct double4x4_mt8
{
    #region Constants

    public static double4x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double4x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator+(double4x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator-(double4x4_mt8 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator+(double4x4_mt8 a, double4x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator-(double4x4_mt8 a, double4x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a double4x4_mt8 by double4x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator*(double4x4_mt8 a, double4x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a double4x4_mt8 by double_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator*(double4x4_mt8 a, double_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double4x4_mt8 by double4x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator*(double_mt8 a, double4x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a double4x4_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator*(double4x4_mt8 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double4x4_mt8 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator*(double a, double4x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator/(double4x4_mt8 a, double4x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator/(double4x4_mt8 a, double_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator/(double_mt8 a, double4x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator/(double4x4_mt8 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator/(double a, double4x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator%(double4x4_mt8 a, double4x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator%(double4x4_mt8 a, double_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator%(double_mt8 a, double4x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator%(double4x4_mt8 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator%(double a, double4x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator --(double4x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 operator ++(double4x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4x4_mt8 abs([This] double4x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 sign([This] double4x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 min([This] double4x4_mt8 a, double4x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 max([This] double4x4_mt8 a, double4x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 clamp([This] double4x4_mt8 v, double4x4_mt8 min, double4x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static double4x4_mt8 square([This] double4x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt8 fma([This] double4x4_mt8 a, double4x4_mt8 b, double4x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt8 fms([This] double4x4_mt8 a, double4x4_mt8 b, double4x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt8 fnma([This] double4x4_mt8 a, double4x4_mt8 b, double4x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt8 fsm([This] double4x4_mt8 c, double4x4_mt8 a, double4x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt8 fam([This] double4x4_mt8 c, double4x4_mt8 a, double4x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt8 mad([This] double4x4_mt8 a, double4x4_mt8 b, double4x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double4_mt8 csum([This] double4x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static double4_mt8 cmin([This] double4x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static double4_mt8 cmax([This] double4x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // double4x4_mt8

#region double4x4_mt16

public partial struct double4x4_mt16
{
    #region Constants

    public static double4x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double4x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator+(double4x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator-(double4x4_mt16 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator+(double4x4_mt16 a, double4x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator-(double4x4_mt16 a, double4x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a double4x4_mt16 by double4x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator*(double4x4_mt16 a, double4x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a double4x4_mt16 by double_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator*(double4x4_mt16 a, double_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double4x4_mt16 by double4x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator*(double_mt16 a, double4x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a double4x4_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator*(double4x4_mt16 a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double4x4_mt16 by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator*(double a, double4x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator/(double4x4_mt16 a, double4x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator/(double4x4_mt16 a, double_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator/(double_mt16 a, double4x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator/(double4x4_mt16 a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator/(double a, double4x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator%(double4x4_mt16 a, double4x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator%(double4x4_mt16 a, double_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator%(double_mt16 a, double4x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator%(double4x4_mt16 a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator%(double a, double4x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator --(double4x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 operator ++(double4x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4x4_mt16 abs([This] double4x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 sign([This] double4x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 min([This] double4x4_mt16 a, double4x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 max([This] double4x4_mt16 a, double4x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 clamp([This] double4x4_mt16 v, double4x4_mt16 min, double4x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static double4x4_mt16 square([This] double4x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt16 fma([This] double4x4_mt16 a, double4x4_mt16 b, double4x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt16 fms([This] double4x4_mt16 a, double4x4_mt16 b, double4x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt16 fnma([This] double4x4_mt16 a, double4x4_mt16 b, double4x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt16 fsm([This] double4x4_mt16 c, double4x4_mt16 a, double4x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt16 fam([This] double4x4_mt16 c, double4x4_mt16 a, double4x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt16 mad([This] double4x4_mt16 a, double4x4_mt16 b, double4x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double4_mt16 csum([This] double4x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static double4_mt16 cmin([This] double4x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static double4_mt16 cmax([This] double4x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // double4x4_mt16

#region int2x2_mt4

public partial struct int2x2_mt4
{
    #region Constants

    public static int2x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int2x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator+(int2x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator-(int2x2_mt4 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator+(int2x2_mt4 a, int2x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator-(int2x2_mt4 a, int2x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a int2x2_mt4 by int2x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator*(int2x2_mt4 a, int2x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a int2x2_mt4 by int_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator*(int2x2_mt4 a, int_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int2x2_mt4 by int2x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator*(int_mt4 a, int2x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a int2x2_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator*(int2x2_mt4 a, int b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int2x2_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator*(int a, int2x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator/(int2x2_mt4 a, int2x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator/(int2x2_mt4 a, int_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator/(int_mt4 a, int2x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator/(int2x2_mt4 a, int b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator/(int a, int2x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator%(int2x2_mt4 a, int2x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator%(int2x2_mt4 a, int_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator%(int_mt4 a, int2x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator%(int2x2_mt4 a, int b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator%(int a, int2x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator --(int2x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 operator ++(int2x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2x2_mt4 abs([This] int2x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 sign([This] int2x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 min([This] int2x2_mt4 a, int2x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 max([This] int2x2_mt4 a, int2x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 clamp([This] int2x2_mt4 v, int2x2_mt4 min, int2x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static int2x2_mt4 square([This] int2x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt4 fma([This] int2x2_mt4 a, int2x2_mt4 b, int2x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt4 fms([This] int2x2_mt4 a, int2x2_mt4 b, int2x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt4 fnma([This] int2x2_mt4 a, int2x2_mt4 b, int2x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt4 fsm([This] int2x2_mt4 c, int2x2_mt4 a, int2x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt4 fam([This] int2x2_mt4 c, int2x2_mt4 a, int2x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt4 mad([This] int2x2_mt4 a, int2x2_mt4 b, int2x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int2_mt4 csum([This] int2x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static int2_mt4 cmin([This] int2x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static int2_mt4 cmax([This] int2x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // int2x2_mt4

#region int2x2_mt8

public partial struct int2x2_mt8
{
    #region Constants

    public static int2x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int2x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator+(int2x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator-(int2x2_mt8 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator+(int2x2_mt8 a, int2x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator-(int2x2_mt8 a, int2x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a int2x2_mt8 by int2x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator*(int2x2_mt8 a, int2x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a int2x2_mt8 by int_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator*(int2x2_mt8 a, int_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int2x2_mt8 by int2x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator*(int_mt8 a, int2x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a int2x2_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator*(int2x2_mt8 a, int b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int2x2_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator*(int a, int2x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator/(int2x2_mt8 a, int2x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator/(int2x2_mt8 a, int_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator/(int_mt8 a, int2x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator/(int2x2_mt8 a, int b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator/(int a, int2x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator%(int2x2_mt8 a, int2x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator%(int2x2_mt8 a, int_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator%(int_mt8 a, int2x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator%(int2x2_mt8 a, int b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator%(int a, int2x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator --(int2x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 operator ++(int2x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2x2_mt8 abs([This] int2x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 sign([This] int2x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 min([This] int2x2_mt8 a, int2x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 max([This] int2x2_mt8 a, int2x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 clamp([This] int2x2_mt8 v, int2x2_mt8 min, int2x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static int2x2_mt8 square([This] int2x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt8 fma([This] int2x2_mt8 a, int2x2_mt8 b, int2x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt8 fms([This] int2x2_mt8 a, int2x2_mt8 b, int2x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt8 fnma([This] int2x2_mt8 a, int2x2_mt8 b, int2x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt8 fsm([This] int2x2_mt8 c, int2x2_mt8 a, int2x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt8 fam([This] int2x2_mt8 c, int2x2_mt8 a, int2x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt8 mad([This] int2x2_mt8 a, int2x2_mt8 b, int2x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int2_mt8 csum([This] int2x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static int2_mt8 cmin([This] int2x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static int2_mt8 cmax([This] int2x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // int2x2_mt8

#region int2x2_mt16

public partial struct int2x2_mt16
{
    #region Constants

    public static int2x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int2x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator+(int2x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator-(int2x2_mt16 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator+(int2x2_mt16 a, int2x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator-(int2x2_mt16 a, int2x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a int2x2_mt16 by int2x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator*(int2x2_mt16 a, int2x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a int2x2_mt16 by int_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator*(int2x2_mt16 a, int_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int2x2_mt16 by int2x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator*(int_mt16 a, int2x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a int2x2_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator*(int2x2_mt16 a, int b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int2x2_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator*(int a, int2x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator/(int2x2_mt16 a, int2x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator/(int2x2_mt16 a, int_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator/(int_mt16 a, int2x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator/(int2x2_mt16 a, int b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator/(int a, int2x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator%(int2x2_mt16 a, int2x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator%(int2x2_mt16 a, int_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator%(int_mt16 a, int2x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator%(int2x2_mt16 a, int b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator%(int a, int2x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator --(int2x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 operator ++(int2x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2x2_mt16 abs([This] int2x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 sign([This] int2x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 min([This] int2x2_mt16 a, int2x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 max([This] int2x2_mt16 a, int2x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 clamp([This] int2x2_mt16 v, int2x2_mt16 min, int2x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static int2x2_mt16 square([This] int2x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt16 fma([This] int2x2_mt16 a, int2x2_mt16 b, int2x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt16 fms([This] int2x2_mt16 a, int2x2_mt16 b, int2x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt16 fnma([This] int2x2_mt16 a, int2x2_mt16 b, int2x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt16 fsm([This] int2x2_mt16 c, int2x2_mt16 a, int2x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt16 fam([This] int2x2_mt16 c, int2x2_mt16 a, int2x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt16 mad([This] int2x2_mt16 a, int2x2_mt16 b, int2x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int2_mt16 csum([This] int2x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static int2_mt16 cmin([This] int2x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static int2_mt16 cmax([This] int2x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // int2x2_mt16

#region int2x3_mt4

public partial struct int2x3_mt4
{
    #region Constants

    public static int2x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int2x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator+(int2x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator-(int2x3_mt4 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator+(int2x3_mt4 a, int2x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator-(int2x3_mt4 a, int2x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a int2x3_mt4 by int2x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator*(int2x3_mt4 a, int2x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a int2x3_mt4 by int_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator*(int2x3_mt4 a, int_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int2x3_mt4 by int2x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator*(int_mt4 a, int2x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a int2x3_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator*(int2x3_mt4 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int2x3_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator*(int a, int2x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator/(int2x3_mt4 a, int2x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator/(int2x3_mt4 a, int_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator/(int_mt4 a, int2x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator/(int2x3_mt4 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator/(int a, int2x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator%(int2x3_mt4 a, int2x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator%(int2x3_mt4 a, int_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator%(int_mt4 a, int2x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator%(int2x3_mt4 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator%(int a, int2x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator --(int2x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 operator ++(int2x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2x3_mt4 abs([This] int2x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 sign([This] int2x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 min([This] int2x3_mt4 a, int2x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 max([This] int2x3_mt4 a, int2x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 clamp([This] int2x3_mt4 v, int2x3_mt4 min, int2x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static int2x3_mt4 square([This] int2x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt4 fma([This] int2x3_mt4 a, int2x3_mt4 b, int2x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt4 fms([This] int2x3_mt4 a, int2x3_mt4 b, int2x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt4 fnma([This] int2x3_mt4 a, int2x3_mt4 b, int2x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt4 fsm([This] int2x3_mt4 c, int2x3_mt4 a, int2x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt4 fam([This] int2x3_mt4 c, int2x3_mt4 a, int2x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt4 mad([This] int2x3_mt4 a, int2x3_mt4 b, int2x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int3_mt4 csum([This] int2x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static int3_mt4 cmin([This] int2x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static int3_mt4 cmax([This] int2x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // int2x3_mt4

#region int2x3_mt8

public partial struct int2x3_mt8
{
    #region Constants

    public static int2x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int2x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator+(int2x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator-(int2x3_mt8 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator+(int2x3_mt8 a, int2x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator-(int2x3_mt8 a, int2x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a int2x3_mt8 by int2x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator*(int2x3_mt8 a, int2x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a int2x3_mt8 by int_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator*(int2x3_mt8 a, int_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int2x3_mt8 by int2x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator*(int_mt8 a, int2x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a int2x3_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator*(int2x3_mt8 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int2x3_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator*(int a, int2x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator/(int2x3_mt8 a, int2x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator/(int2x3_mt8 a, int_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator/(int_mt8 a, int2x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator/(int2x3_mt8 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator/(int a, int2x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator%(int2x3_mt8 a, int2x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator%(int2x3_mt8 a, int_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator%(int_mt8 a, int2x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator%(int2x3_mt8 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator%(int a, int2x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator --(int2x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 operator ++(int2x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2x3_mt8 abs([This] int2x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 sign([This] int2x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 min([This] int2x3_mt8 a, int2x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 max([This] int2x3_mt8 a, int2x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 clamp([This] int2x3_mt8 v, int2x3_mt8 min, int2x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static int2x3_mt8 square([This] int2x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt8 fma([This] int2x3_mt8 a, int2x3_mt8 b, int2x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt8 fms([This] int2x3_mt8 a, int2x3_mt8 b, int2x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt8 fnma([This] int2x3_mt8 a, int2x3_mt8 b, int2x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt8 fsm([This] int2x3_mt8 c, int2x3_mt8 a, int2x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt8 fam([This] int2x3_mt8 c, int2x3_mt8 a, int2x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt8 mad([This] int2x3_mt8 a, int2x3_mt8 b, int2x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int3_mt8 csum([This] int2x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static int3_mt8 cmin([This] int2x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static int3_mt8 cmax([This] int2x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // int2x3_mt8

#region int2x3_mt16

public partial struct int2x3_mt16
{
    #region Constants

    public static int2x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int2x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator+(int2x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator-(int2x3_mt16 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator+(int2x3_mt16 a, int2x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator-(int2x3_mt16 a, int2x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a int2x3_mt16 by int2x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator*(int2x3_mt16 a, int2x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a int2x3_mt16 by int_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator*(int2x3_mt16 a, int_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int2x3_mt16 by int2x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator*(int_mt16 a, int2x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a int2x3_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator*(int2x3_mt16 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int2x3_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator*(int a, int2x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator/(int2x3_mt16 a, int2x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator/(int2x3_mt16 a, int_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator/(int_mt16 a, int2x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator/(int2x3_mt16 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator/(int a, int2x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator%(int2x3_mt16 a, int2x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator%(int2x3_mt16 a, int_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator%(int_mt16 a, int2x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator%(int2x3_mt16 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator%(int a, int2x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator --(int2x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 operator ++(int2x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2x3_mt16 abs([This] int2x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 sign([This] int2x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 min([This] int2x3_mt16 a, int2x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 max([This] int2x3_mt16 a, int2x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 clamp([This] int2x3_mt16 v, int2x3_mt16 min, int2x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static int2x3_mt16 square([This] int2x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt16 fma([This] int2x3_mt16 a, int2x3_mt16 b, int2x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt16 fms([This] int2x3_mt16 a, int2x3_mt16 b, int2x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt16 fnma([This] int2x3_mt16 a, int2x3_mt16 b, int2x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt16 fsm([This] int2x3_mt16 c, int2x3_mt16 a, int2x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt16 fam([This] int2x3_mt16 c, int2x3_mt16 a, int2x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt16 mad([This] int2x3_mt16 a, int2x3_mt16 b, int2x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int3_mt16 csum([This] int2x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static int3_mt16 cmin([This] int2x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static int3_mt16 cmax([This] int2x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // int2x3_mt16

#region int2x4_mt4

public partial struct int2x4_mt4
{
    #region Constants

    public static int2x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int2x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator+(int2x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator-(int2x4_mt4 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator+(int2x4_mt4 a, int2x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator-(int2x4_mt4 a, int2x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a int2x4_mt4 by int2x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator*(int2x4_mt4 a, int2x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a int2x4_mt4 by int_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator*(int2x4_mt4 a, int_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int2x4_mt4 by int2x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator*(int_mt4 a, int2x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a int2x4_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator*(int2x4_mt4 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int2x4_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator*(int a, int2x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator/(int2x4_mt4 a, int2x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator/(int2x4_mt4 a, int_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator/(int_mt4 a, int2x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator/(int2x4_mt4 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator/(int a, int2x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator%(int2x4_mt4 a, int2x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator%(int2x4_mt4 a, int_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator%(int_mt4 a, int2x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator%(int2x4_mt4 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator%(int a, int2x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator --(int2x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 operator ++(int2x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2x4_mt4 abs([This] int2x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 sign([This] int2x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 min([This] int2x4_mt4 a, int2x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 max([This] int2x4_mt4 a, int2x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 clamp([This] int2x4_mt4 v, int2x4_mt4 min, int2x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static int2x4_mt4 square([This] int2x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt4 fma([This] int2x4_mt4 a, int2x4_mt4 b, int2x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt4 fms([This] int2x4_mt4 a, int2x4_mt4 b, int2x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt4 fnma([This] int2x4_mt4 a, int2x4_mt4 b, int2x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt4 fsm([This] int2x4_mt4 c, int2x4_mt4 a, int2x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt4 fam([This] int2x4_mt4 c, int2x4_mt4 a, int2x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt4 mad([This] int2x4_mt4 a, int2x4_mt4 b, int2x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int4_mt4 csum([This] int2x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static int4_mt4 cmin([This] int2x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static int4_mt4 cmax([This] int2x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // int2x4_mt4

#region int2x4_mt8

public partial struct int2x4_mt8
{
    #region Constants

    public static int2x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int2x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator+(int2x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator-(int2x4_mt8 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator+(int2x4_mt8 a, int2x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator-(int2x4_mt8 a, int2x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a int2x4_mt8 by int2x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator*(int2x4_mt8 a, int2x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a int2x4_mt8 by int_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator*(int2x4_mt8 a, int_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int2x4_mt8 by int2x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator*(int_mt8 a, int2x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a int2x4_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator*(int2x4_mt8 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int2x4_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator*(int a, int2x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator/(int2x4_mt8 a, int2x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator/(int2x4_mt8 a, int_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator/(int_mt8 a, int2x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator/(int2x4_mt8 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator/(int a, int2x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator%(int2x4_mt8 a, int2x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator%(int2x4_mt8 a, int_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator%(int_mt8 a, int2x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator%(int2x4_mt8 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator%(int a, int2x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator --(int2x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 operator ++(int2x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2x4_mt8 abs([This] int2x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 sign([This] int2x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 min([This] int2x4_mt8 a, int2x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 max([This] int2x4_mt8 a, int2x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 clamp([This] int2x4_mt8 v, int2x4_mt8 min, int2x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static int2x4_mt8 square([This] int2x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt8 fma([This] int2x4_mt8 a, int2x4_mt8 b, int2x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt8 fms([This] int2x4_mt8 a, int2x4_mt8 b, int2x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt8 fnma([This] int2x4_mt8 a, int2x4_mt8 b, int2x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt8 fsm([This] int2x4_mt8 c, int2x4_mt8 a, int2x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt8 fam([This] int2x4_mt8 c, int2x4_mt8 a, int2x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt8 mad([This] int2x4_mt8 a, int2x4_mt8 b, int2x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int4_mt8 csum([This] int2x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static int4_mt8 cmin([This] int2x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static int4_mt8 cmax([This] int2x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // int2x4_mt8

#region int2x4_mt16

public partial struct int2x4_mt16
{
    #region Constants

    public static int2x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int2x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator+(int2x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator-(int2x4_mt16 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator+(int2x4_mt16 a, int2x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator-(int2x4_mt16 a, int2x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a int2x4_mt16 by int2x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator*(int2x4_mt16 a, int2x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a int2x4_mt16 by int_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator*(int2x4_mt16 a, int_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int2x4_mt16 by int2x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator*(int_mt16 a, int2x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a int2x4_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator*(int2x4_mt16 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int2x4_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator*(int a, int2x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator/(int2x4_mt16 a, int2x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator/(int2x4_mt16 a, int_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator/(int_mt16 a, int2x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator/(int2x4_mt16 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator/(int a, int2x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator%(int2x4_mt16 a, int2x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator%(int2x4_mt16 a, int_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator%(int_mt16 a, int2x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator%(int2x4_mt16 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator%(int a, int2x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator --(int2x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 operator ++(int2x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2x4_mt16 abs([This] int2x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 sign([This] int2x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 min([This] int2x4_mt16 a, int2x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 max([This] int2x4_mt16 a, int2x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 clamp([This] int2x4_mt16 v, int2x4_mt16 min, int2x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static int2x4_mt16 square([This] int2x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt16 fma([This] int2x4_mt16 a, int2x4_mt16 b, int2x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt16 fms([This] int2x4_mt16 a, int2x4_mt16 b, int2x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt16 fnma([This] int2x4_mt16 a, int2x4_mt16 b, int2x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt16 fsm([This] int2x4_mt16 c, int2x4_mt16 a, int2x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt16 fam([This] int2x4_mt16 c, int2x4_mt16 a, int2x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt16 mad([This] int2x4_mt16 a, int2x4_mt16 b, int2x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int4_mt16 csum([This] int2x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static int4_mt16 cmin([This] int2x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static int4_mt16 cmax([This] int2x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // int2x4_mt16

#region int3x2_mt4

public partial struct int3x2_mt4
{
    #region Constants

    public static int3x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int3x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator+(int3x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator-(int3x2_mt4 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator+(int3x2_mt4 a, int3x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator-(int3x2_mt4 a, int3x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a int3x2_mt4 by int3x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator*(int3x2_mt4 a, int3x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a int3x2_mt4 by int_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator*(int3x2_mt4 a, int_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int3x2_mt4 by int3x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator*(int_mt4 a, int3x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a int3x2_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator*(int3x2_mt4 a, int b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int3x2_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator*(int a, int3x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator/(int3x2_mt4 a, int3x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator/(int3x2_mt4 a, int_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator/(int_mt4 a, int3x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator/(int3x2_mt4 a, int b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator/(int a, int3x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator%(int3x2_mt4 a, int3x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator%(int3x2_mt4 a, int_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator%(int_mt4 a, int3x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator%(int3x2_mt4 a, int b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator%(int a, int3x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator --(int3x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 operator ++(int3x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3x2_mt4 abs([This] int3x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 sign([This] int3x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 min([This] int3x2_mt4 a, int3x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 max([This] int3x2_mt4 a, int3x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 clamp([This] int3x2_mt4 v, int3x2_mt4 min, int3x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static int3x2_mt4 square([This] int3x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt4 fma([This] int3x2_mt4 a, int3x2_mt4 b, int3x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt4 fms([This] int3x2_mt4 a, int3x2_mt4 b, int3x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt4 fnma([This] int3x2_mt4 a, int3x2_mt4 b, int3x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt4 fsm([This] int3x2_mt4 c, int3x2_mt4 a, int3x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt4 fam([This] int3x2_mt4 c, int3x2_mt4 a, int3x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt4 mad([This] int3x2_mt4 a, int3x2_mt4 b, int3x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int2_mt4 csum([This] int3x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static int2_mt4 cmin([This] int3x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static int2_mt4 cmax([This] int3x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // int3x2_mt4

#region int3x2_mt8

public partial struct int3x2_mt8
{
    #region Constants

    public static int3x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int3x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator+(int3x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator-(int3x2_mt8 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator+(int3x2_mt8 a, int3x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator-(int3x2_mt8 a, int3x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a int3x2_mt8 by int3x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator*(int3x2_mt8 a, int3x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a int3x2_mt8 by int_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator*(int3x2_mt8 a, int_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int3x2_mt8 by int3x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator*(int_mt8 a, int3x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a int3x2_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator*(int3x2_mt8 a, int b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int3x2_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator*(int a, int3x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator/(int3x2_mt8 a, int3x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator/(int3x2_mt8 a, int_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator/(int_mt8 a, int3x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator/(int3x2_mt8 a, int b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator/(int a, int3x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator%(int3x2_mt8 a, int3x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator%(int3x2_mt8 a, int_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator%(int_mt8 a, int3x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator%(int3x2_mt8 a, int b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator%(int a, int3x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator --(int3x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 operator ++(int3x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3x2_mt8 abs([This] int3x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 sign([This] int3x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 min([This] int3x2_mt8 a, int3x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 max([This] int3x2_mt8 a, int3x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 clamp([This] int3x2_mt8 v, int3x2_mt8 min, int3x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static int3x2_mt8 square([This] int3x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt8 fma([This] int3x2_mt8 a, int3x2_mt8 b, int3x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt8 fms([This] int3x2_mt8 a, int3x2_mt8 b, int3x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt8 fnma([This] int3x2_mt8 a, int3x2_mt8 b, int3x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt8 fsm([This] int3x2_mt8 c, int3x2_mt8 a, int3x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt8 fam([This] int3x2_mt8 c, int3x2_mt8 a, int3x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt8 mad([This] int3x2_mt8 a, int3x2_mt8 b, int3x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int2_mt8 csum([This] int3x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static int2_mt8 cmin([This] int3x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static int2_mt8 cmax([This] int3x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // int3x2_mt8

#region int3x2_mt16

public partial struct int3x2_mt16
{
    #region Constants

    public static int3x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int3x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator+(int3x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator-(int3x2_mt16 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator+(int3x2_mt16 a, int3x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator-(int3x2_mt16 a, int3x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a int3x2_mt16 by int3x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator*(int3x2_mt16 a, int3x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a int3x2_mt16 by int_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator*(int3x2_mt16 a, int_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int3x2_mt16 by int3x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator*(int_mt16 a, int3x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a int3x2_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator*(int3x2_mt16 a, int b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int3x2_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator*(int a, int3x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator/(int3x2_mt16 a, int3x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator/(int3x2_mt16 a, int_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator/(int_mt16 a, int3x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator/(int3x2_mt16 a, int b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator/(int a, int3x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator%(int3x2_mt16 a, int3x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator%(int3x2_mt16 a, int_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator%(int_mt16 a, int3x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator%(int3x2_mt16 a, int b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator%(int a, int3x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator --(int3x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 operator ++(int3x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3x2_mt16 abs([This] int3x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 sign([This] int3x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 min([This] int3x2_mt16 a, int3x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 max([This] int3x2_mt16 a, int3x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 clamp([This] int3x2_mt16 v, int3x2_mt16 min, int3x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static int3x2_mt16 square([This] int3x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt16 fma([This] int3x2_mt16 a, int3x2_mt16 b, int3x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt16 fms([This] int3x2_mt16 a, int3x2_mt16 b, int3x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt16 fnma([This] int3x2_mt16 a, int3x2_mt16 b, int3x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt16 fsm([This] int3x2_mt16 c, int3x2_mt16 a, int3x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt16 fam([This] int3x2_mt16 c, int3x2_mt16 a, int3x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt16 mad([This] int3x2_mt16 a, int3x2_mt16 b, int3x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int2_mt16 csum([This] int3x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static int2_mt16 cmin([This] int3x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static int2_mt16 cmax([This] int3x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // int3x2_mt16

#region int3x3_mt4

public partial struct int3x3_mt4
{
    #region Constants

    public static int3x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int3x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator+(int3x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator-(int3x3_mt4 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator+(int3x3_mt4 a, int3x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator-(int3x3_mt4 a, int3x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a int3x3_mt4 by int3x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator*(int3x3_mt4 a, int3x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a int3x3_mt4 by int_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator*(int3x3_mt4 a, int_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int3x3_mt4 by int3x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator*(int_mt4 a, int3x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a int3x3_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator*(int3x3_mt4 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int3x3_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator*(int a, int3x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator/(int3x3_mt4 a, int3x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator/(int3x3_mt4 a, int_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator/(int_mt4 a, int3x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator/(int3x3_mt4 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator/(int a, int3x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator%(int3x3_mt4 a, int3x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator%(int3x3_mt4 a, int_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator%(int_mt4 a, int3x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator%(int3x3_mt4 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator%(int a, int3x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator --(int3x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 operator ++(int3x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3x3_mt4 abs([This] int3x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 sign([This] int3x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 min([This] int3x3_mt4 a, int3x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 max([This] int3x3_mt4 a, int3x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 clamp([This] int3x3_mt4 v, int3x3_mt4 min, int3x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static int3x3_mt4 square([This] int3x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt4 fma([This] int3x3_mt4 a, int3x3_mt4 b, int3x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt4 fms([This] int3x3_mt4 a, int3x3_mt4 b, int3x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt4 fnma([This] int3x3_mt4 a, int3x3_mt4 b, int3x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt4 fsm([This] int3x3_mt4 c, int3x3_mt4 a, int3x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt4 fam([This] int3x3_mt4 c, int3x3_mt4 a, int3x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt4 mad([This] int3x3_mt4 a, int3x3_mt4 b, int3x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int3_mt4 csum([This] int3x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static int3_mt4 cmin([This] int3x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static int3_mt4 cmax([This] int3x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // int3x3_mt4

#region int3x3_mt8

public partial struct int3x3_mt8
{
    #region Constants

    public static int3x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int3x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator+(int3x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator-(int3x3_mt8 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator+(int3x3_mt8 a, int3x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator-(int3x3_mt8 a, int3x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a int3x3_mt8 by int3x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator*(int3x3_mt8 a, int3x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a int3x3_mt8 by int_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator*(int3x3_mt8 a, int_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int3x3_mt8 by int3x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator*(int_mt8 a, int3x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a int3x3_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator*(int3x3_mt8 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int3x3_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator*(int a, int3x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator/(int3x3_mt8 a, int3x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator/(int3x3_mt8 a, int_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator/(int_mt8 a, int3x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator/(int3x3_mt8 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator/(int a, int3x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator%(int3x3_mt8 a, int3x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator%(int3x3_mt8 a, int_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator%(int_mt8 a, int3x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator%(int3x3_mt8 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator%(int a, int3x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator --(int3x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 operator ++(int3x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3x3_mt8 abs([This] int3x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 sign([This] int3x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 min([This] int3x3_mt8 a, int3x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 max([This] int3x3_mt8 a, int3x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 clamp([This] int3x3_mt8 v, int3x3_mt8 min, int3x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static int3x3_mt8 square([This] int3x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt8 fma([This] int3x3_mt8 a, int3x3_mt8 b, int3x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt8 fms([This] int3x3_mt8 a, int3x3_mt8 b, int3x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt8 fnma([This] int3x3_mt8 a, int3x3_mt8 b, int3x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt8 fsm([This] int3x3_mt8 c, int3x3_mt8 a, int3x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt8 fam([This] int3x3_mt8 c, int3x3_mt8 a, int3x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt8 mad([This] int3x3_mt8 a, int3x3_mt8 b, int3x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int3_mt8 csum([This] int3x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static int3_mt8 cmin([This] int3x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static int3_mt8 cmax([This] int3x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // int3x3_mt8

#region int3x3_mt16

public partial struct int3x3_mt16
{
    #region Constants

    public static int3x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int3x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator+(int3x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator-(int3x3_mt16 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator+(int3x3_mt16 a, int3x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator-(int3x3_mt16 a, int3x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a int3x3_mt16 by int3x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator*(int3x3_mt16 a, int3x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a int3x3_mt16 by int_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator*(int3x3_mt16 a, int_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int3x3_mt16 by int3x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator*(int_mt16 a, int3x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a int3x3_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator*(int3x3_mt16 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int3x3_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator*(int a, int3x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator/(int3x3_mt16 a, int3x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator/(int3x3_mt16 a, int_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator/(int_mt16 a, int3x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator/(int3x3_mt16 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator/(int a, int3x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator%(int3x3_mt16 a, int3x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator%(int3x3_mt16 a, int_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator%(int_mt16 a, int3x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator%(int3x3_mt16 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator%(int a, int3x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator --(int3x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 operator ++(int3x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3x3_mt16 abs([This] int3x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 sign([This] int3x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 min([This] int3x3_mt16 a, int3x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 max([This] int3x3_mt16 a, int3x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 clamp([This] int3x3_mt16 v, int3x3_mt16 min, int3x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static int3x3_mt16 square([This] int3x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt16 fma([This] int3x3_mt16 a, int3x3_mt16 b, int3x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt16 fms([This] int3x3_mt16 a, int3x3_mt16 b, int3x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt16 fnma([This] int3x3_mt16 a, int3x3_mt16 b, int3x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt16 fsm([This] int3x3_mt16 c, int3x3_mt16 a, int3x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt16 fam([This] int3x3_mt16 c, int3x3_mt16 a, int3x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt16 mad([This] int3x3_mt16 a, int3x3_mt16 b, int3x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int3_mt16 csum([This] int3x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static int3_mt16 cmin([This] int3x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static int3_mt16 cmax([This] int3x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // int3x3_mt16

#region int3x4_mt4

public partial struct int3x4_mt4
{
    #region Constants

    public static int3x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int3x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator+(int3x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator-(int3x4_mt4 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator+(int3x4_mt4 a, int3x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator-(int3x4_mt4 a, int3x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a int3x4_mt4 by int3x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator*(int3x4_mt4 a, int3x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a int3x4_mt4 by int_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator*(int3x4_mt4 a, int_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int3x4_mt4 by int3x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator*(int_mt4 a, int3x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a int3x4_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator*(int3x4_mt4 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int3x4_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator*(int a, int3x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator/(int3x4_mt4 a, int3x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator/(int3x4_mt4 a, int_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator/(int_mt4 a, int3x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator/(int3x4_mt4 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator/(int a, int3x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator%(int3x4_mt4 a, int3x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator%(int3x4_mt4 a, int_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator%(int_mt4 a, int3x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator%(int3x4_mt4 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator%(int a, int3x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator --(int3x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 operator ++(int3x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3x4_mt4 abs([This] int3x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 sign([This] int3x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 min([This] int3x4_mt4 a, int3x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 max([This] int3x4_mt4 a, int3x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 clamp([This] int3x4_mt4 v, int3x4_mt4 min, int3x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static int3x4_mt4 square([This] int3x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt4 fma([This] int3x4_mt4 a, int3x4_mt4 b, int3x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt4 fms([This] int3x4_mt4 a, int3x4_mt4 b, int3x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt4 fnma([This] int3x4_mt4 a, int3x4_mt4 b, int3x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt4 fsm([This] int3x4_mt4 c, int3x4_mt4 a, int3x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt4 fam([This] int3x4_mt4 c, int3x4_mt4 a, int3x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt4 mad([This] int3x4_mt4 a, int3x4_mt4 b, int3x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int4_mt4 csum([This] int3x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static int4_mt4 cmin([This] int3x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static int4_mt4 cmax([This] int3x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // int3x4_mt4

#region int3x4_mt8

public partial struct int3x4_mt8
{
    #region Constants

    public static int3x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int3x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator+(int3x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator-(int3x4_mt8 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator+(int3x4_mt8 a, int3x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator-(int3x4_mt8 a, int3x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a int3x4_mt8 by int3x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator*(int3x4_mt8 a, int3x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a int3x4_mt8 by int_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator*(int3x4_mt8 a, int_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int3x4_mt8 by int3x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator*(int_mt8 a, int3x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a int3x4_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator*(int3x4_mt8 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int3x4_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator*(int a, int3x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator/(int3x4_mt8 a, int3x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator/(int3x4_mt8 a, int_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator/(int_mt8 a, int3x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator/(int3x4_mt8 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator/(int a, int3x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator%(int3x4_mt8 a, int3x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator%(int3x4_mt8 a, int_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator%(int_mt8 a, int3x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator%(int3x4_mt8 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator%(int a, int3x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator --(int3x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 operator ++(int3x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3x4_mt8 abs([This] int3x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 sign([This] int3x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 min([This] int3x4_mt8 a, int3x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 max([This] int3x4_mt8 a, int3x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 clamp([This] int3x4_mt8 v, int3x4_mt8 min, int3x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static int3x4_mt8 square([This] int3x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt8 fma([This] int3x4_mt8 a, int3x4_mt8 b, int3x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt8 fms([This] int3x4_mt8 a, int3x4_mt8 b, int3x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt8 fnma([This] int3x4_mt8 a, int3x4_mt8 b, int3x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt8 fsm([This] int3x4_mt8 c, int3x4_mt8 a, int3x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt8 fam([This] int3x4_mt8 c, int3x4_mt8 a, int3x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt8 mad([This] int3x4_mt8 a, int3x4_mt8 b, int3x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int4_mt8 csum([This] int3x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static int4_mt8 cmin([This] int3x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static int4_mt8 cmax([This] int3x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // int3x4_mt8

#region int3x4_mt16

public partial struct int3x4_mt16
{
    #region Constants

    public static int3x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int3x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator+(int3x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator-(int3x4_mt16 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator+(int3x4_mt16 a, int3x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator-(int3x4_mt16 a, int3x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a int3x4_mt16 by int3x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator*(int3x4_mt16 a, int3x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a int3x4_mt16 by int_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator*(int3x4_mt16 a, int_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int3x4_mt16 by int3x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator*(int_mt16 a, int3x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a int3x4_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator*(int3x4_mt16 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int3x4_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator*(int a, int3x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator/(int3x4_mt16 a, int3x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator/(int3x4_mt16 a, int_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator/(int_mt16 a, int3x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator/(int3x4_mt16 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator/(int a, int3x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator%(int3x4_mt16 a, int3x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator%(int3x4_mt16 a, int_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator%(int_mt16 a, int3x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator%(int3x4_mt16 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator%(int a, int3x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator --(int3x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 operator ++(int3x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3x4_mt16 abs([This] int3x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 sign([This] int3x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 min([This] int3x4_mt16 a, int3x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 max([This] int3x4_mt16 a, int3x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 clamp([This] int3x4_mt16 v, int3x4_mt16 min, int3x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static int3x4_mt16 square([This] int3x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt16 fma([This] int3x4_mt16 a, int3x4_mt16 b, int3x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt16 fms([This] int3x4_mt16 a, int3x4_mt16 b, int3x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt16 fnma([This] int3x4_mt16 a, int3x4_mt16 b, int3x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt16 fsm([This] int3x4_mt16 c, int3x4_mt16 a, int3x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt16 fam([This] int3x4_mt16 c, int3x4_mt16 a, int3x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt16 mad([This] int3x4_mt16 a, int3x4_mt16 b, int3x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int4_mt16 csum([This] int3x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static int4_mt16 cmin([This] int3x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static int4_mt16 cmax([This] int3x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // int3x4_mt16

#region int4x2_mt4

public partial struct int4x2_mt4
{
    #region Constants

    public static int4x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int4x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator+(int4x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator-(int4x2_mt4 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator+(int4x2_mt4 a, int4x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator-(int4x2_mt4 a, int4x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a int4x2_mt4 by int4x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator*(int4x2_mt4 a, int4x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a int4x2_mt4 by int_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator*(int4x2_mt4 a, int_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int4x2_mt4 by int4x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator*(int_mt4 a, int4x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a int4x2_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator*(int4x2_mt4 a, int b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int4x2_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator*(int a, int4x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator/(int4x2_mt4 a, int4x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator/(int4x2_mt4 a, int_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator/(int_mt4 a, int4x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator/(int4x2_mt4 a, int b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator/(int a, int4x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator%(int4x2_mt4 a, int4x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator%(int4x2_mt4 a, int_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator%(int_mt4 a, int4x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator%(int4x2_mt4 a, int b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator%(int a, int4x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator --(int4x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 operator ++(int4x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4x2_mt4 abs([This] int4x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 sign([This] int4x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 min([This] int4x2_mt4 a, int4x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 max([This] int4x2_mt4 a, int4x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 clamp([This] int4x2_mt4 v, int4x2_mt4 min, int4x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static int4x2_mt4 square([This] int4x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt4 fma([This] int4x2_mt4 a, int4x2_mt4 b, int4x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt4 fms([This] int4x2_mt4 a, int4x2_mt4 b, int4x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt4 fnma([This] int4x2_mt4 a, int4x2_mt4 b, int4x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt4 fsm([This] int4x2_mt4 c, int4x2_mt4 a, int4x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt4 fam([This] int4x2_mt4 c, int4x2_mt4 a, int4x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt4 mad([This] int4x2_mt4 a, int4x2_mt4 b, int4x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int2_mt4 csum([This] int4x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static int2_mt4 cmin([This] int4x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static int2_mt4 cmax([This] int4x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // int4x2_mt4

#region int4x2_mt8

public partial struct int4x2_mt8
{
    #region Constants

    public static int4x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int4x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator+(int4x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator-(int4x2_mt8 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator+(int4x2_mt8 a, int4x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator-(int4x2_mt8 a, int4x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a int4x2_mt8 by int4x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator*(int4x2_mt8 a, int4x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a int4x2_mt8 by int_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator*(int4x2_mt8 a, int_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int4x2_mt8 by int4x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator*(int_mt8 a, int4x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a int4x2_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator*(int4x2_mt8 a, int b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int4x2_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator*(int a, int4x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator/(int4x2_mt8 a, int4x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator/(int4x2_mt8 a, int_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator/(int_mt8 a, int4x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator/(int4x2_mt8 a, int b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator/(int a, int4x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator%(int4x2_mt8 a, int4x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator%(int4x2_mt8 a, int_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator%(int_mt8 a, int4x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator%(int4x2_mt8 a, int b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator%(int a, int4x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator --(int4x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 operator ++(int4x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4x2_mt8 abs([This] int4x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 sign([This] int4x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 min([This] int4x2_mt8 a, int4x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 max([This] int4x2_mt8 a, int4x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 clamp([This] int4x2_mt8 v, int4x2_mt8 min, int4x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static int4x2_mt8 square([This] int4x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt8 fma([This] int4x2_mt8 a, int4x2_mt8 b, int4x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt8 fms([This] int4x2_mt8 a, int4x2_mt8 b, int4x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt8 fnma([This] int4x2_mt8 a, int4x2_mt8 b, int4x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt8 fsm([This] int4x2_mt8 c, int4x2_mt8 a, int4x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt8 fam([This] int4x2_mt8 c, int4x2_mt8 a, int4x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt8 mad([This] int4x2_mt8 a, int4x2_mt8 b, int4x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int2_mt8 csum([This] int4x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static int2_mt8 cmin([This] int4x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static int2_mt8 cmax([This] int4x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // int4x2_mt8

#region int4x2_mt16

public partial struct int4x2_mt16
{
    #region Constants

    public static int4x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int4x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator+(int4x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator-(int4x2_mt16 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator+(int4x2_mt16 a, int4x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator-(int4x2_mt16 a, int4x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a int4x2_mt16 by int4x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator*(int4x2_mt16 a, int4x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a int4x2_mt16 by int_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator*(int4x2_mt16 a, int_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int4x2_mt16 by int4x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator*(int_mt16 a, int4x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a int4x2_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator*(int4x2_mt16 a, int b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int4x2_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator*(int a, int4x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator/(int4x2_mt16 a, int4x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator/(int4x2_mt16 a, int_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator/(int_mt16 a, int4x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator/(int4x2_mt16 a, int b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator/(int a, int4x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator%(int4x2_mt16 a, int4x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator%(int4x2_mt16 a, int_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator%(int_mt16 a, int4x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator%(int4x2_mt16 a, int b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator%(int a, int4x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator --(int4x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 operator ++(int4x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4x2_mt16 abs([This] int4x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 sign([This] int4x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 min([This] int4x2_mt16 a, int4x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 max([This] int4x2_mt16 a, int4x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 clamp([This] int4x2_mt16 v, int4x2_mt16 min, int4x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static int4x2_mt16 square([This] int4x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt16 fma([This] int4x2_mt16 a, int4x2_mt16 b, int4x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt16 fms([This] int4x2_mt16 a, int4x2_mt16 b, int4x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt16 fnma([This] int4x2_mt16 a, int4x2_mt16 b, int4x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt16 fsm([This] int4x2_mt16 c, int4x2_mt16 a, int4x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt16 fam([This] int4x2_mt16 c, int4x2_mt16 a, int4x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt16 mad([This] int4x2_mt16 a, int4x2_mt16 b, int4x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int2_mt16 csum([This] int4x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static int2_mt16 cmin([This] int4x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static int2_mt16 cmax([This] int4x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // int4x2_mt16

#region int4x3_mt4

public partial struct int4x3_mt4
{
    #region Constants

    public static int4x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int4x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator+(int4x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator-(int4x3_mt4 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator+(int4x3_mt4 a, int4x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator-(int4x3_mt4 a, int4x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a int4x3_mt4 by int4x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator*(int4x3_mt4 a, int4x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a int4x3_mt4 by int_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator*(int4x3_mt4 a, int_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int4x3_mt4 by int4x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator*(int_mt4 a, int4x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a int4x3_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator*(int4x3_mt4 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int4x3_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator*(int a, int4x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator/(int4x3_mt4 a, int4x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator/(int4x3_mt4 a, int_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator/(int_mt4 a, int4x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator/(int4x3_mt4 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator/(int a, int4x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator%(int4x3_mt4 a, int4x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator%(int4x3_mt4 a, int_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator%(int_mt4 a, int4x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator%(int4x3_mt4 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator%(int a, int4x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator --(int4x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 operator ++(int4x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4x3_mt4 abs([This] int4x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 sign([This] int4x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 min([This] int4x3_mt4 a, int4x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 max([This] int4x3_mt4 a, int4x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 clamp([This] int4x3_mt4 v, int4x3_mt4 min, int4x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static int4x3_mt4 square([This] int4x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt4 fma([This] int4x3_mt4 a, int4x3_mt4 b, int4x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt4 fms([This] int4x3_mt4 a, int4x3_mt4 b, int4x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt4 fnma([This] int4x3_mt4 a, int4x3_mt4 b, int4x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt4 fsm([This] int4x3_mt4 c, int4x3_mt4 a, int4x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt4 fam([This] int4x3_mt4 c, int4x3_mt4 a, int4x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt4 mad([This] int4x3_mt4 a, int4x3_mt4 b, int4x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int3_mt4 csum([This] int4x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static int3_mt4 cmin([This] int4x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static int3_mt4 cmax([This] int4x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // int4x3_mt4

#region int4x3_mt8

public partial struct int4x3_mt8
{
    #region Constants

    public static int4x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int4x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator+(int4x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator-(int4x3_mt8 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator+(int4x3_mt8 a, int4x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator-(int4x3_mt8 a, int4x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a int4x3_mt8 by int4x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator*(int4x3_mt8 a, int4x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a int4x3_mt8 by int_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator*(int4x3_mt8 a, int_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int4x3_mt8 by int4x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator*(int_mt8 a, int4x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a int4x3_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator*(int4x3_mt8 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int4x3_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator*(int a, int4x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator/(int4x3_mt8 a, int4x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator/(int4x3_mt8 a, int_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator/(int_mt8 a, int4x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator/(int4x3_mt8 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator/(int a, int4x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator%(int4x3_mt8 a, int4x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator%(int4x3_mt8 a, int_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator%(int_mt8 a, int4x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator%(int4x3_mt8 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator%(int a, int4x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator --(int4x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 operator ++(int4x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4x3_mt8 abs([This] int4x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 sign([This] int4x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 min([This] int4x3_mt8 a, int4x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 max([This] int4x3_mt8 a, int4x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 clamp([This] int4x3_mt8 v, int4x3_mt8 min, int4x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static int4x3_mt8 square([This] int4x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt8 fma([This] int4x3_mt8 a, int4x3_mt8 b, int4x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt8 fms([This] int4x3_mt8 a, int4x3_mt8 b, int4x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt8 fnma([This] int4x3_mt8 a, int4x3_mt8 b, int4x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt8 fsm([This] int4x3_mt8 c, int4x3_mt8 a, int4x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt8 fam([This] int4x3_mt8 c, int4x3_mt8 a, int4x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt8 mad([This] int4x3_mt8 a, int4x3_mt8 b, int4x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int3_mt8 csum([This] int4x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static int3_mt8 cmin([This] int4x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static int3_mt8 cmax([This] int4x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // int4x3_mt8

#region int4x3_mt16

public partial struct int4x3_mt16
{
    #region Constants

    public static int4x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int4x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator+(int4x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator-(int4x3_mt16 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator+(int4x3_mt16 a, int4x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator-(int4x3_mt16 a, int4x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a int4x3_mt16 by int4x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator*(int4x3_mt16 a, int4x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a int4x3_mt16 by int_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator*(int4x3_mt16 a, int_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int4x3_mt16 by int4x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator*(int_mt16 a, int4x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a int4x3_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator*(int4x3_mt16 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int4x3_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator*(int a, int4x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator/(int4x3_mt16 a, int4x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator/(int4x3_mt16 a, int_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator/(int_mt16 a, int4x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator/(int4x3_mt16 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator/(int a, int4x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator%(int4x3_mt16 a, int4x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator%(int4x3_mt16 a, int_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator%(int_mt16 a, int4x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator%(int4x3_mt16 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator%(int a, int4x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator --(int4x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 operator ++(int4x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4x3_mt16 abs([This] int4x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 sign([This] int4x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 min([This] int4x3_mt16 a, int4x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 max([This] int4x3_mt16 a, int4x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 clamp([This] int4x3_mt16 v, int4x3_mt16 min, int4x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static int4x3_mt16 square([This] int4x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt16 fma([This] int4x3_mt16 a, int4x3_mt16 b, int4x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt16 fms([This] int4x3_mt16 a, int4x3_mt16 b, int4x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt16 fnma([This] int4x3_mt16 a, int4x3_mt16 b, int4x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt16 fsm([This] int4x3_mt16 c, int4x3_mt16 a, int4x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt16 fam([This] int4x3_mt16 c, int4x3_mt16 a, int4x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt16 mad([This] int4x3_mt16 a, int4x3_mt16 b, int4x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int3_mt16 csum([This] int4x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static int3_mt16 cmin([This] int4x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static int3_mt16 cmax([This] int4x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // int4x3_mt16

#region int4x4_mt4

public partial struct int4x4_mt4
{
    #region Constants

    public static int4x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int4x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator+(int4x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator-(int4x4_mt4 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator+(int4x4_mt4 a, int4x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator-(int4x4_mt4 a, int4x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a int4x4_mt4 by int4x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator*(int4x4_mt4 a, int4x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a int4x4_mt4 by int_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator*(int4x4_mt4 a, int_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int4x4_mt4 by int4x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator*(int_mt4 a, int4x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a int4x4_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator*(int4x4_mt4 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int4x4_mt4 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator*(int a, int4x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator/(int4x4_mt4 a, int4x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator/(int4x4_mt4 a, int_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator/(int_mt4 a, int4x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator/(int4x4_mt4 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator/(int a, int4x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator%(int4x4_mt4 a, int4x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator%(int4x4_mt4 a, int_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator%(int_mt4 a, int4x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator%(int4x4_mt4 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator%(int a, int4x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator --(int4x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 operator ++(int4x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4x4_mt4 abs([This] int4x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 sign([This] int4x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 min([This] int4x4_mt4 a, int4x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 max([This] int4x4_mt4 a, int4x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 clamp([This] int4x4_mt4 v, int4x4_mt4 min, int4x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static int4x4_mt4 square([This] int4x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt4 fma([This] int4x4_mt4 a, int4x4_mt4 b, int4x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt4 fms([This] int4x4_mt4 a, int4x4_mt4 b, int4x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt4 fnma([This] int4x4_mt4 a, int4x4_mt4 b, int4x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt4 fsm([This] int4x4_mt4 c, int4x4_mt4 a, int4x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt4 fam([This] int4x4_mt4 c, int4x4_mt4 a, int4x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt4 mad([This] int4x4_mt4 a, int4x4_mt4 b, int4x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int4_mt4 csum([This] int4x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static int4_mt4 cmin([This] int4x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static int4_mt4 cmax([This] int4x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // int4x4_mt4

#region int4x4_mt8

public partial struct int4x4_mt8
{
    #region Constants

    public static int4x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int4x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator+(int4x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator-(int4x4_mt8 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator+(int4x4_mt8 a, int4x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator-(int4x4_mt8 a, int4x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a int4x4_mt8 by int4x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator*(int4x4_mt8 a, int4x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a int4x4_mt8 by int_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator*(int4x4_mt8 a, int_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int4x4_mt8 by int4x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator*(int_mt8 a, int4x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a int4x4_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator*(int4x4_mt8 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int4x4_mt8 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator*(int a, int4x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator/(int4x4_mt8 a, int4x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator/(int4x4_mt8 a, int_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator/(int_mt8 a, int4x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator/(int4x4_mt8 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator/(int a, int4x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator%(int4x4_mt8 a, int4x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator%(int4x4_mt8 a, int_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator%(int_mt8 a, int4x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator%(int4x4_mt8 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator%(int a, int4x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator --(int4x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 operator ++(int4x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4x4_mt8 abs([This] int4x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 sign([This] int4x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 min([This] int4x4_mt8 a, int4x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 max([This] int4x4_mt8 a, int4x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 clamp([This] int4x4_mt8 v, int4x4_mt8 min, int4x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static int4x4_mt8 square([This] int4x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt8 fma([This] int4x4_mt8 a, int4x4_mt8 b, int4x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt8 fms([This] int4x4_mt8 a, int4x4_mt8 b, int4x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt8 fnma([This] int4x4_mt8 a, int4x4_mt8 b, int4x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt8 fsm([This] int4x4_mt8 c, int4x4_mt8 a, int4x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt8 fam([This] int4x4_mt8 c, int4x4_mt8 a, int4x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt8 mad([This] int4x4_mt8 a, int4x4_mt8 b, int4x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int4_mt8 csum([This] int4x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static int4_mt8 cmin([This] int4x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static int4_mt8 cmax([This] int4x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // int4x4_mt8

#region int4x4_mt16

public partial struct int4x4_mt16
{
    #region Constants

    public static int4x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int4x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator+(int4x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator-(int4x4_mt16 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator+(int4x4_mt16 a, int4x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator-(int4x4_mt16 a, int4x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a int4x4_mt16 by int4x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator*(int4x4_mt16 a, int4x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a int4x4_mt16 by int_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator*(int4x4_mt16 a, int_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int4x4_mt16 by int4x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator*(int_mt16 a, int4x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a int4x4_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator*(int4x4_mt16 a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int4x4_mt16 by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator*(int a, int4x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator/(int4x4_mt16 a, int4x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator/(int4x4_mt16 a, int_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator/(int_mt16 a, int4x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator/(int4x4_mt16 a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator/(int a, int4x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator%(int4x4_mt16 a, int4x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator%(int4x4_mt16 a, int_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator%(int_mt16 a, int4x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator%(int4x4_mt16 a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator%(int a, int4x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator --(int4x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 operator ++(int4x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4x4_mt16 abs([This] int4x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 sign([This] int4x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 min([This] int4x4_mt16 a, int4x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 max([This] int4x4_mt16 a, int4x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 clamp([This] int4x4_mt16 v, int4x4_mt16 min, int4x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static int4x4_mt16 square([This] int4x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt16 fma([This] int4x4_mt16 a, int4x4_mt16 b, int4x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt16 fms([This] int4x4_mt16 a, int4x4_mt16 b, int4x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt16 fnma([This] int4x4_mt16 a, int4x4_mt16 b, int4x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt16 fsm([This] int4x4_mt16 c, int4x4_mt16 a, int4x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt16 fam([This] int4x4_mt16 c, int4x4_mt16 a, int4x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt16 mad([This] int4x4_mt16 a, int4x4_mt16 b, int4x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int4_mt16 csum([This] int4x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static int4_mt16 cmin([This] int4x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static int4_mt16 cmax([This] int4x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // int4x4_mt16

#region uint2x2_mt4

public partial struct uint2x2_mt4
{
    #region Constants

    public static uint2x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint2x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator+(uint2x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator+(uint2x2_mt4 a, uint2x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator-(uint2x2_mt4 a, uint2x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a uint2x2_mt4 by uint2x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator*(uint2x2_mt4 a, uint2x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a uint2x2_mt4 by uint_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator*(uint2x2_mt4 a, uint_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint2x2_mt4 by uint2x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator*(uint_mt4 a, uint2x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a uint2x2_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator*(uint2x2_mt4 a, uint b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint2x2_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator*(uint a, uint2x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator/(uint2x2_mt4 a, uint2x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator/(uint2x2_mt4 a, uint_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator/(uint_mt4 a, uint2x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator/(uint2x2_mt4 a, uint b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator/(uint a, uint2x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator%(uint2x2_mt4 a, uint2x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator%(uint2x2_mt4 a, uint_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator%(uint_mt4 a, uint2x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator%(uint2x2_mt4 a, uint b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator%(uint a, uint2x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator --(uint2x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 operator ++(uint2x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 abs([This] uint2x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 sign([This] uint2x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 min([This] uint2x2_mt4 a, uint2x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 max([This] uint2x2_mt4 a, uint2x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 clamp([This] uint2x2_mt4 v, uint2x2_mt4 min, uint2x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 square([This] uint2x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 fma([This] uint2x2_mt4 a, uint2x2_mt4 b, uint2x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 fms([This] uint2x2_mt4 a, uint2x2_mt4 b, uint2x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 fnma([This] uint2x2_mt4 a, uint2x2_mt4 b, uint2x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 fsm([This] uint2x2_mt4 c, uint2x2_mt4 a, uint2x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 fam([This] uint2x2_mt4 c, uint2x2_mt4 a, uint2x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt4 mad([This] uint2x2_mt4 a, uint2x2_mt4 b, uint2x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint2_mt4 csum([This] uint2x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static uint2_mt4 cmin([This] uint2x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static uint2_mt4 cmax([This] uint2x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // uint2x2_mt4

#region uint2x2_mt8

public partial struct uint2x2_mt8
{
    #region Constants

    public static uint2x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint2x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator+(uint2x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator+(uint2x2_mt8 a, uint2x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator-(uint2x2_mt8 a, uint2x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a uint2x2_mt8 by uint2x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator*(uint2x2_mt8 a, uint2x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a uint2x2_mt8 by uint_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator*(uint2x2_mt8 a, uint_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint2x2_mt8 by uint2x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator*(uint_mt8 a, uint2x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a uint2x2_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator*(uint2x2_mt8 a, uint b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint2x2_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator*(uint a, uint2x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator/(uint2x2_mt8 a, uint2x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator/(uint2x2_mt8 a, uint_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator/(uint_mt8 a, uint2x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator/(uint2x2_mt8 a, uint b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator/(uint a, uint2x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator%(uint2x2_mt8 a, uint2x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator%(uint2x2_mt8 a, uint_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator%(uint_mt8 a, uint2x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator%(uint2x2_mt8 a, uint b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator%(uint a, uint2x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator --(uint2x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 operator ++(uint2x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 abs([This] uint2x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 sign([This] uint2x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 min([This] uint2x2_mt8 a, uint2x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 max([This] uint2x2_mt8 a, uint2x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 clamp([This] uint2x2_mt8 v, uint2x2_mt8 min, uint2x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 square([This] uint2x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 fma([This] uint2x2_mt8 a, uint2x2_mt8 b, uint2x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 fms([This] uint2x2_mt8 a, uint2x2_mt8 b, uint2x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 fnma([This] uint2x2_mt8 a, uint2x2_mt8 b, uint2x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 fsm([This] uint2x2_mt8 c, uint2x2_mt8 a, uint2x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 fam([This] uint2x2_mt8 c, uint2x2_mt8 a, uint2x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt8 mad([This] uint2x2_mt8 a, uint2x2_mt8 b, uint2x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint2_mt8 csum([This] uint2x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static uint2_mt8 cmin([This] uint2x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static uint2_mt8 cmax([This] uint2x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // uint2x2_mt8

#region uint2x2_mt16

public partial struct uint2x2_mt16
{
    #region Constants

    public static uint2x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint2x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator+(uint2x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator+(uint2x2_mt16 a, uint2x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator-(uint2x2_mt16 a, uint2x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a uint2x2_mt16 by uint2x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator*(uint2x2_mt16 a, uint2x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a uint2x2_mt16 by uint_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator*(uint2x2_mt16 a, uint_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint2x2_mt16 by uint2x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator*(uint_mt16 a, uint2x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a uint2x2_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator*(uint2x2_mt16 a, uint b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint2x2_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator*(uint a, uint2x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator/(uint2x2_mt16 a, uint2x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator/(uint2x2_mt16 a, uint_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator/(uint_mt16 a, uint2x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator/(uint2x2_mt16 a, uint b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator/(uint a, uint2x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator%(uint2x2_mt16 a, uint2x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator%(uint2x2_mt16 a, uint_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator%(uint_mt16 a, uint2x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator%(uint2x2_mt16 a, uint b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator%(uint a, uint2x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator --(uint2x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 operator ++(uint2x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 abs([This] uint2x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 sign([This] uint2x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 min([This] uint2x2_mt16 a, uint2x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 max([This] uint2x2_mt16 a, uint2x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 clamp([This] uint2x2_mt16 v, uint2x2_mt16 min, uint2x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 square([This] uint2x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 fma([This] uint2x2_mt16 a, uint2x2_mt16 b, uint2x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 fms([This] uint2x2_mt16 a, uint2x2_mt16 b, uint2x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 fnma([This] uint2x2_mt16 a, uint2x2_mt16 b, uint2x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 fsm([This] uint2x2_mt16 c, uint2x2_mt16 a, uint2x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 fam([This] uint2x2_mt16 c, uint2x2_mt16 a, uint2x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt16 mad([This] uint2x2_mt16 a, uint2x2_mt16 b, uint2x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint2_mt16 csum([This] uint2x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static uint2_mt16 cmin([This] uint2x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static uint2_mt16 cmax([This] uint2x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // uint2x2_mt16

#region uint2x3_mt4

public partial struct uint2x3_mt4
{
    #region Constants

    public static uint2x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint2x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator+(uint2x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator+(uint2x3_mt4 a, uint2x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator-(uint2x3_mt4 a, uint2x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a uint2x3_mt4 by uint2x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator*(uint2x3_mt4 a, uint2x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a uint2x3_mt4 by uint_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator*(uint2x3_mt4 a, uint_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint2x3_mt4 by uint2x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator*(uint_mt4 a, uint2x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a uint2x3_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator*(uint2x3_mt4 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint2x3_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator*(uint a, uint2x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator/(uint2x3_mt4 a, uint2x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator/(uint2x3_mt4 a, uint_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator/(uint_mt4 a, uint2x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator/(uint2x3_mt4 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator/(uint a, uint2x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator%(uint2x3_mt4 a, uint2x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator%(uint2x3_mt4 a, uint_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator%(uint_mt4 a, uint2x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator%(uint2x3_mt4 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator%(uint a, uint2x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator --(uint2x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 operator ++(uint2x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 abs([This] uint2x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 sign([This] uint2x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 min([This] uint2x3_mt4 a, uint2x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 max([This] uint2x3_mt4 a, uint2x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 clamp([This] uint2x3_mt4 v, uint2x3_mt4 min, uint2x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 square([This] uint2x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 fma([This] uint2x3_mt4 a, uint2x3_mt4 b, uint2x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 fms([This] uint2x3_mt4 a, uint2x3_mt4 b, uint2x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 fnma([This] uint2x3_mt4 a, uint2x3_mt4 b, uint2x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 fsm([This] uint2x3_mt4 c, uint2x3_mt4 a, uint2x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 fam([This] uint2x3_mt4 c, uint2x3_mt4 a, uint2x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt4 mad([This] uint2x3_mt4 a, uint2x3_mt4 b, uint2x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint3_mt4 csum([This] uint2x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static uint3_mt4 cmin([This] uint2x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static uint3_mt4 cmax([This] uint2x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // uint2x3_mt4

#region uint2x3_mt8

public partial struct uint2x3_mt8
{
    #region Constants

    public static uint2x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint2x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator+(uint2x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator+(uint2x3_mt8 a, uint2x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator-(uint2x3_mt8 a, uint2x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a uint2x3_mt8 by uint2x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator*(uint2x3_mt8 a, uint2x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a uint2x3_mt8 by uint_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator*(uint2x3_mt8 a, uint_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint2x3_mt8 by uint2x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator*(uint_mt8 a, uint2x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a uint2x3_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator*(uint2x3_mt8 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint2x3_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator*(uint a, uint2x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator/(uint2x3_mt8 a, uint2x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator/(uint2x3_mt8 a, uint_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator/(uint_mt8 a, uint2x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator/(uint2x3_mt8 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator/(uint a, uint2x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator%(uint2x3_mt8 a, uint2x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator%(uint2x3_mt8 a, uint_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator%(uint_mt8 a, uint2x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator%(uint2x3_mt8 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator%(uint a, uint2x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator --(uint2x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 operator ++(uint2x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 abs([This] uint2x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 sign([This] uint2x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 min([This] uint2x3_mt8 a, uint2x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 max([This] uint2x3_mt8 a, uint2x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 clamp([This] uint2x3_mt8 v, uint2x3_mt8 min, uint2x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 square([This] uint2x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 fma([This] uint2x3_mt8 a, uint2x3_mt8 b, uint2x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 fms([This] uint2x3_mt8 a, uint2x3_mt8 b, uint2x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 fnma([This] uint2x3_mt8 a, uint2x3_mt8 b, uint2x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 fsm([This] uint2x3_mt8 c, uint2x3_mt8 a, uint2x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 fam([This] uint2x3_mt8 c, uint2x3_mt8 a, uint2x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt8 mad([This] uint2x3_mt8 a, uint2x3_mt8 b, uint2x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint3_mt8 csum([This] uint2x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static uint3_mt8 cmin([This] uint2x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static uint3_mt8 cmax([This] uint2x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // uint2x3_mt8

#region uint2x3_mt16

public partial struct uint2x3_mt16
{
    #region Constants

    public static uint2x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint2x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator+(uint2x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator+(uint2x3_mt16 a, uint2x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator-(uint2x3_mt16 a, uint2x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a uint2x3_mt16 by uint2x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator*(uint2x3_mt16 a, uint2x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a uint2x3_mt16 by uint_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator*(uint2x3_mt16 a, uint_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint2x3_mt16 by uint2x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator*(uint_mt16 a, uint2x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a uint2x3_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator*(uint2x3_mt16 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint2x3_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator*(uint a, uint2x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator/(uint2x3_mt16 a, uint2x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator/(uint2x3_mt16 a, uint_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator/(uint_mt16 a, uint2x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator/(uint2x3_mt16 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator/(uint a, uint2x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator%(uint2x3_mt16 a, uint2x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator%(uint2x3_mt16 a, uint_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator%(uint_mt16 a, uint2x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator%(uint2x3_mt16 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator%(uint a, uint2x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator --(uint2x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 operator ++(uint2x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 abs([This] uint2x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 sign([This] uint2x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 min([This] uint2x3_mt16 a, uint2x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 max([This] uint2x3_mt16 a, uint2x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 clamp([This] uint2x3_mt16 v, uint2x3_mt16 min, uint2x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 square([This] uint2x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 fma([This] uint2x3_mt16 a, uint2x3_mt16 b, uint2x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 fms([This] uint2x3_mt16 a, uint2x3_mt16 b, uint2x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 fnma([This] uint2x3_mt16 a, uint2x3_mt16 b, uint2x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 fsm([This] uint2x3_mt16 c, uint2x3_mt16 a, uint2x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 fam([This] uint2x3_mt16 c, uint2x3_mt16 a, uint2x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt16 mad([This] uint2x3_mt16 a, uint2x3_mt16 b, uint2x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint3_mt16 csum([This] uint2x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static uint3_mt16 cmin([This] uint2x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static uint3_mt16 cmax([This] uint2x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // uint2x3_mt16

#region uint2x4_mt4

public partial struct uint2x4_mt4
{
    #region Constants

    public static uint2x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint2x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator+(uint2x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator+(uint2x4_mt4 a, uint2x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator-(uint2x4_mt4 a, uint2x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a uint2x4_mt4 by uint2x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator*(uint2x4_mt4 a, uint2x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a uint2x4_mt4 by uint_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator*(uint2x4_mt4 a, uint_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint2x4_mt4 by uint2x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator*(uint_mt4 a, uint2x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a uint2x4_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator*(uint2x4_mt4 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint2x4_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator*(uint a, uint2x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator/(uint2x4_mt4 a, uint2x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator/(uint2x4_mt4 a, uint_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator/(uint_mt4 a, uint2x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator/(uint2x4_mt4 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator/(uint a, uint2x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator%(uint2x4_mt4 a, uint2x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator%(uint2x4_mt4 a, uint_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator%(uint_mt4 a, uint2x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator%(uint2x4_mt4 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator%(uint a, uint2x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator --(uint2x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 operator ++(uint2x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 abs([This] uint2x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 sign([This] uint2x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 min([This] uint2x4_mt4 a, uint2x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 max([This] uint2x4_mt4 a, uint2x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 clamp([This] uint2x4_mt4 v, uint2x4_mt4 min, uint2x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 square([This] uint2x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 fma([This] uint2x4_mt4 a, uint2x4_mt4 b, uint2x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 fms([This] uint2x4_mt4 a, uint2x4_mt4 b, uint2x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 fnma([This] uint2x4_mt4 a, uint2x4_mt4 b, uint2x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 fsm([This] uint2x4_mt4 c, uint2x4_mt4 a, uint2x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 fam([This] uint2x4_mt4 c, uint2x4_mt4 a, uint2x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt4 mad([This] uint2x4_mt4 a, uint2x4_mt4 b, uint2x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint4_mt4 csum([This] uint2x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static uint4_mt4 cmin([This] uint2x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static uint4_mt4 cmax([This] uint2x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // uint2x4_mt4

#region uint2x4_mt8

public partial struct uint2x4_mt8
{
    #region Constants

    public static uint2x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint2x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator+(uint2x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator+(uint2x4_mt8 a, uint2x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator-(uint2x4_mt8 a, uint2x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a uint2x4_mt8 by uint2x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator*(uint2x4_mt8 a, uint2x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a uint2x4_mt8 by uint_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator*(uint2x4_mt8 a, uint_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint2x4_mt8 by uint2x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator*(uint_mt8 a, uint2x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a uint2x4_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator*(uint2x4_mt8 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint2x4_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator*(uint a, uint2x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator/(uint2x4_mt8 a, uint2x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator/(uint2x4_mt8 a, uint_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator/(uint_mt8 a, uint2x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator/(uint2x4_mt8 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator/(uint a, uint2x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator%(uint2x4_mt8 a, uint2x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator%(uint2x4_mt8 a, uint_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator%(uint_mt8 a, uint2x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator%(uint2x4_mt8 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator%(uint a, uint2x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator --(uint2x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 operator ++(uint2x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 abs([This] uint2x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 sign([This] uint2x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 min([This] uint2x4_mt8 a, uint2x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 max([This] uint2x4_mt8 a, uint2x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 clamp([This] uint2x4_mt8 v, uint2x4_mt8 min, uint2x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 square([This] uint2x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 fma([This] uint2x4_mt8 a, uint2x4_mt8 b, uint2x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 fms([This] uint2x4_mt8 a, uint2x4_mt8 b, uint2x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 fnma([This] uint2x4_mt8 a, uint2x4_mt8 b, uint2x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 fsm([This] uint2x4_mt8 c, uint2x4_mt8 a, uint2x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 fam([This] uint2x4_mt8 c, uint2x4_mt8 a, uint2x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt8 mad([This] uint2x4_mt8 a, uint2x4_mt8 b, uint2x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint4_mt8 csum([This] uint2x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static uint4_mt8 cmin([This] uint2x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static uint4_mt8 cmax([This] uint2x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // uint2x4_mt8

#region uint2x4_mt16

public partial struct uint2x4_mt16
{
    #region Constants

    public static uint2x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint2x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator+(uint2x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator+(uint2x4_mt16 a, uint2x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator-(uint2x4_mt16 a, uint2x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a uint2x4_mt16 by uint2x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator*(uint2x4_mt16 a, uint2x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a uint2x4_mt16 by uint_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator*(uint2x4_mt16 a, uint_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint2x4_mt16 by uint2x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator*(uint_mt16 a, uint2x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a uint2x4_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator*(uint2x4_mt16 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint2x4_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator*(uint a, uint2x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator/(uint2x4_mt16 a, uint2x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator/(uint2x4_mt16 a, uint_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator/(uint_mt16 a, uint2x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator/(uint2x4_mt16 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator/(uint a, uint2x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator%(uint2x4_mt16 a, uint2x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator%(uint2x4_mt16 a, uint_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator%(uint_mt16 a, uint2x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator%(uint2x4_mt16 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator%(uint a, uint2x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator --(uint2x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 operator ++(uint2x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 abs([This] uint2x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 sign([This] uint2x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 min([This] uint2x4_mt16 a, uint2x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 max([This] uint2x4_mt16 a, uint2x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 clamp([This] uint2x4_mt16 v, uint2x4_mt16 min, uint2x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 square([This] uint2x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 fma([This] uint2x4_mt16 a, uint2x4_mt16 b, uint2x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 fms([This] uint2x4_mt16 a, uint2x4_mt16 b, uint2x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 fnma([This] uint2x4_mt16 a, uint2x4_mt16 b, uint2x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 fsm([This] uint2x4_mt16 c, uint2x4_mt16 a, uint2x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 fam([This] uint2x4_mt16 c, uint2x4_mt16 a, uint2x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt16 mad([This] uint2x4_mt16 a, uint2x4_mt16 b, uint2x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint4_mt16 csum([This] uint2x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static uint4_mt16 cmin([This] uint2x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static uint4_mt16 cmax([This] uint2x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // uint2x4_mt16

#region uint3x2_mt4

public partial struct uint3x2_mt4
{
    #region Constants

    public static uint3x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint3x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator+(uint3x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator+(uint3x2_mt4 a, uint3x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator-(uint3x2_mt4 a, uint3x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a uint3x2_mt4 by uint3x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator*(uint3x2_mt4 a, uint3x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a uint3x2_mt4 by uint_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator*(uint3x2_mt4 a, uint_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint3x2_mt4 by uint3x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator*(uint_mt4 a, uint3x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a uint3x2_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator*(uint3x2_mt4 a, uint b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint3x2_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator*(uint a, uint3x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator/(uint3x2_mt4 a, uint3x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator/(uint3x2_mt4 a, uint_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator/(uint_mt4 a, uint3x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator/(uint3x2_mt4 a, uint b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator/(uint a, uint3x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator%(uint3x2_mt4 a, uint3x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator%(uint3x2_mt4 a, uint_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator%(uint_mt4 a, uint3x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator%(uint3x2_mt4 a, uint b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator%(uint a, uint3x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator --(uint3x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 operator ++(uint3x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 abs([This] uint3x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 sign([This] uint3x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 min([This] uint3x2_mt4 a, uint3x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 max([This] uint3x2_mt4 a, uint3x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 clamp([This] uint3x2_mt4 v, uint3x2_mt4 min, uint3x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 square([This] uint3x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 fma([This] uint3x2_mt4 a, uint3x2_mt4 b, uint3x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 fms([This] uint3x2_mt4 a, uint3x2_mt4 b, uint3x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 fnma([This] uint3x2_mt4 a, uint3x2_mt4 b, uint3x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 fsm([This] uint3x2_mt4 c, uint3x2_mt4 a, uint3x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 fam([This] uint3x2_mt4 c, uint3x2_mt4 a, uint3x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt4 mad([This] uint3x2_mt4 a, uint3x2_mt4 b, uint3x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint2_mt4 csum([This] uint3x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static uint2_mt4 cmin([This] uint3x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static uint2_mt4 cmax([This] uint3x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // uint3x2_mt4

#region uint3x2_mt8

public partial struct uint3x2_mt8
{
    #region Constants

    public static uint3x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint3x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator+(uint3x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator+(uint3x2_mt8 a, uint3x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator-(uint3x2_mt8 a, uint3x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a uint3x2_mt8 by uint3x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator*(uint3x2_mt8 a, uint3x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a uint3x2_mt8 by uint_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator*(uint3x2_mt8 a, uint_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint3x2_mt8 by uint3x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator*(uint_mt8 a, uint3x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a uint3x2_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator*(uint3x2_mt8 a, uint b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint3x2_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator*(uint a, uint3x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator/(uint3x2_mt8 a, uint3x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator/(uint3x2_mt8 a, uint_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator/(uint_mt8 a, uint3x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator/(uint3x2_mt8 a, uint b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator/(uint a, uint3x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator%(uint3x2_mt8 a, uint3x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator%(uint3x2_mt8 a, uint_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator%(uint_mt8 a, uint3x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator%(uint3x2_mt8 a, uint b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator%(uint a, uint3x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator --(uint3x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 operator ++(uint3x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 abs([This] uint3x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 sign([This] uint3x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 min([This] uint3x2_mt8 a, uint3x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 max([This] uint3x2_mt8 a, uint3x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 clamp([This] uint3x2_mt8 v, uint3x2_mt8 min, uint3x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 square([This] uint3x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 fma([This] uint3x2_mt8 a, uint3x2_mt8 b, uint3x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 fms([This] uint3x2_mt8 a, uint3x2_mt8 b, uint3x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 fnma([This] uint3x2_mt8 a, uint3x2_mt8 b, uint3x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 fsm([This] uint3x2_mt8 c, uint3x2_mt8 a, uint3x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 fam([This] uint3x2_mt8 c, uint3x2_mt8 a, uint3x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt8 mad([This] uint3x2_mt8 a, uint3x2_mt8 b, uint3x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint2_mt8 csum([This] uint3x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static uint2_mt8 cmin([This] uint3x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static uint2_mt8 cmax([This] uint3x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // uint3x2_mt8

#region uint3x2_mt16

public partial struct uint3x2_mt16
{
    #region Constants

    public static uint3x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint3x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator+(uint3x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator+(uint3x2_mt16 a, uint3x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator-(uint3x2_mt16 a, uint3x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a uint3x2_mt16 by uint3x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator*(uint3x2_mt16 a, uint3x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a uint3x2_mt16 by uint_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator*(uint3x2_mt16 a, uint_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint3x2_mt16 by uint3x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator*(uint_mt16 a, uint3x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a uint3x2_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator*(uint3x2_mt16 a, uint b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint3x2_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator*(uint a, uint3x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator/(uint3x2_mt16 a, uint3x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator/(uint3x2_mt16 a, uint_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator/(uint_mt16 a, uint3x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator/(uint3x2_mt16 a, uint b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator/(uint a, uint3x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator%(uint3x2_mt16 a, uint3x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator%(uint3x2_mt16 a, uint_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator%(uint_mt16 a, uint3x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator%(uint3x2_mt16 a, uint b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator%(uint a, uint3x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator --(uint3x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 operator ++(uint3x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 abs([This] uint3x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 sign([This] uint3x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 min([This] uint3x2_mt16 a, uint3x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 max([This] uint3x2_mt16 a, uint3x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 clamp([This] uint3x2_mt16 v, uint3x2_mt16 min, uint3x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 square([This] uint3x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 fma([This] uint3x2_mt16 a, uint3x2_mt16 b, uint3x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 fms([This] uint3x2_mt16 a, uint3x2_mt16 b, uint3x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 fnma([This] uint3x2_mt16 a, uint3x2_mt16 b, uint3x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 fsm([This] uint3x2_mt16 c, uint3x2_mt16 a, uint3x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 fam([This] uint3x2_mt16 c, uint3x2_mt16 a, uint3x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt16 mad([This] uint3x2_mt16 a, uint3x2_mt16 b, uint3x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint2_mt16 csum([This] uint3x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static uint2_mt16 cmin([This] uint3x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static uint2_mt16 cmax([This] uint3x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // uint3x2_mt16

#region uint3x3_mt4

public partial struct uint3x3_mt4
{
    #region Constants

    public static uint3x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint3x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator+(uint3x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator+(uint3x3_mt4 a, uint3x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator-(uint3x3_mt4 a, uint3x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a uint3x3_mt4 by uint3x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator*(uint3x3_mt4 a, uint3x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a uint3x3_mt4 by uint_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator*(uint3x3_mt4 a, uint_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint3x3_mt4 by uint3x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator*(uint_mt4 a, uint3x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a uint3x3_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator*(uint3x3_mt4 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint3x3_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator*(uint a, uint3x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator/(uint3x3_mt4 a, uint3x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator/(uint3x3_mt4 a, uint_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator/(uint_mt4 a, uint3x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator/(uint3x3_mt4 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator/(uint a, uint3x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator%(uint3x3_mt4 a, uint3x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator%(uint3x3_mt4 a, uint_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator%(uint_mt4 a, uint3x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator%(uint3x3_mt4 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator%(uint a, uint3x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator --(uint3x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 operator ++(uint3x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 abs([This] uint3x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 sign([This] uint3x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 min([This] uint3x3_mt4 a, uint3x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 max([This] uint3x3_mt4 a, uint3x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 clamp([This] uint3x3_mt4 v, uint3x3_mt4 min, uint3x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 square([This] uint3x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 fma([This] uint3x3_mt4 a, uint3x3_mt4 b, uint3x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 fms([This] uint3x3_mt4 a, uint3x3_mt4 b, uint3x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 fnma([This] uint3x3_mt4 a, uint3x3_mt4 b, uint3x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 fsm([This] uint3x3_mt4 c, uint3x3_mt4 a, uint3x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 fam([This] uint3x3_mt4 c, uint3x3_mt4 a, uint3x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt4 mad([This] uint3x3_mt4 a, uint3x3_mt4 b, uint3x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint3_mt4 csum([This] uint3x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static uint3_mt4 cmin([This] uint3x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static uint3_mt4 cmax([This] uint3x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // uint3x3_mt4

#region uint3x3_mt8

public partial struct uint3x3_mt8
{
    #region Constants

    public static uint3x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint3x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator+(uint3x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator+(uint3x3_mt8 a, uint3x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator-(uint3x3_mt8 a, uint3x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a uint3x3_mt8 by uint3x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator*(uint3x3_mt8 a, uint3x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a uint3x3_mt8 by uint_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator*(uint3x3_mt8 a, uint_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint3x3_mt8 by uint3x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator*(uint_mt8 a, uint3x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a uint3x3_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator*(uint3x3_mt8 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint3x3_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator*(uint a, uint3x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator/(uint3x3_mt8 a, uint3x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator/(uint3x3_mt8 a, uint_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator/(uint_mt8 a, uint3x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator/(uint3x3_mt8 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator/(uint a, uint3x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator%(uint3x3_mt8 a, uint3x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator%(uint3x3_mt8 a, uint_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator%(uint_mt8 a, uint3x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator%(uint3x3_mt8 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator%(uint a, uint3x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator --(uint3x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 operator ++(uint3x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 abs([This] uint3x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 sign([This] uint3x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 min([This] uint3x3_mt8 a, uint3x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 max([This] uint3x3_mt8 a, uint3x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 clamp([This] uint3x3_mt8 v, uint3x3_mt8 min, uint3x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 square([This] uint3x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 fma([This] uint3x3_mt8 a, uint3x3_mt8 b, uint3x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 fms([This] uint3x3_mt8 a, uint3x3_mt8 b, uint3x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 fnma([This] uint3x3_mt8 a, uint3x3_mt8 b, uint3x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 fsm([This] uint3x3_mt8 c, uint3x3_mt8 a, uint3x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 fam([This] uint3x3_mt8 c, uint3x3_mt8 a, uint3x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt8 mad([This] uint3x3_mt8 a, uint3x3_mt8 b, uint3x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint3_mt8 csum([This] uint3x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static uint3_mt8 cmin([This] uint3x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static uint3_mt8 cmax([This] uint3x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // uint3x3_mt8

#region uint3x3_mt16

public partial struct uint3x3_mt16
{
    #region Constants

    public static uint3x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint3x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator+(uint3x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator+(uint3x3_mt16 a, uint3x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator-(uint3x3_mt16 a, uint3x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a uint3x3_mt16 by uint3x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator*(uint3x3_mt16 a, uint3x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a uint3x3_mt16 by uint_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator*(uint3x3_mt16 a, uint_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint3x3_mt16 by uint3x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator*(uint_mt16 a, uint3x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a uint3x3_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator*(uint3x3_mt16 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint3x3_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator*(uint a, uint3x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator/(uint3x3_mt16 a, uint3x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator/(uint3x3_mt16 a, uint_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator/(uint_mt16 a, uint3x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator/(uint3x3_mt16 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator/(uint a, uint3x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator%(uint3x3_mt16 a, uint3x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator%(uint3x3_mt16 a, uint_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator%(uint_mt16 a, uint3x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator%(uint3x3_mt16 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator%(uint a, uint3x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator --(uint3x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 operator ++(uint3x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 abs([This] uint3x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 sign([This] uint3x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 min([This] uint3x3_mt16 a, uint3x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 max([This] uint3x3_mt16 a, uint3x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 clamp([This] uint3x3_mt16 v, uint3x3_mt16 min, uint3x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 square([This] uint3x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 fma([This] uint3x3_mt16 a, uint3x3_mt16 b, uint3x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 fms([This] uint3x3_mt16 a, uint3x3_mt16 b, uint3x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 fnma([This] uint3x3_mt16 a, uint3x3_mt16 b, uint3x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 fsm([This] uint3x3_mt16 c, uint3x3_mt16 a, uint3x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 fam([This] uint3x3_mt16 c, uint3x3_mt16 a, uint3x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt16 mad([This] uint3x3_mt16 a, uint3x3_mt16 b, uint3x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint3_mt16 csum([This] uint3x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static uint3_mt16 cmin([This] uint3x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static uint3_mt16 cmax([This] uint3x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // uint3x3_mt16

#region uint3x4_mt4

public partial struct uint3x4_mt4
{
    #region Constants

    public static uint3x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint3x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator+(uint3x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator+(uint3x4_mt4 a, uint3x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator-(uint3x4_mt4 a, uint3x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a uint3x4_mt4 by uint3x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator*(uint3x4_mt4 a, uint3x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a uint3x4_mt4 by uint_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator*(uint3x4_mt4 a, uint_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint3x4_mt4 by uint3x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator*(uint_mt4 a, uint3x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a uint3x4_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator*(uint3x4_mt4 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint3x4_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator*(uint a, uint3x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator/(uint3x4_mt4 a, uint3x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator/(uint3x4_mt4 a, uint_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator/(uint_mt4 a, uint3x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator/(uint3x4_mt4 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator/(uint a, uint3x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator%(uint3x4_mt4 a, uint3x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator%(uint3x4_mt4 a, uint_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator%(uint_mt4 a, uint3x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator%(uint3x4_mt4 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator%(uint a, uint3x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator --(uint3x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 operator ++(uint3x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 abs([This] uint3x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 sign([This] uint3x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 min([This] uint3x4_mt4 a, uint3x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 max([This] uint3x4_mt4 a, uint3x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 clamp([This] uint3x4_mt4 v, uint3x4_mt4 min, uint3x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 square([This] uint3x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 fma([This] uint3x4_mt4 a, uint3x4_mt4 b, uint3x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 fms([This] uint3x4_mt4 a, uint3x4_mt4 b, uint3x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 fnma([This] uint3x4_mt4 a, uint3x4_mt4 b, uint3x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 fsm([This] uint3x4_mt4 c, uint3x4_mt4 a, uint3x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 fam([This] uint3x4_mt4 c, uint3x4_mt4 a, uint3x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt4 mad([This] uint3x4_mt4 a, uint3x4_mt4 b, uint3x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint4_mt4 csum([This] uint3x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static uint4_mt4 cmin([This] uint3x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static uint4_mt4 cmax([This] uint3x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // uint3x4_mt4

#region uint3x4_mt8

public partial struct uint3x4_mt8
{
    #region Constants

    public static uint3x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint3x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator+(uint3x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator+(uint3x4_mt8 a, uint3x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator-(uint3x4_mt8 a, uint3x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a uint3x4_mt8 by uint3x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator*(uint3x4_mt8 a, uint3x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a uint3x4_mt8 by uint_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator*(uint3x4_mt8 a, uint_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint3x4_mt8 by uint3x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator*(uint_mt8 a, uint3x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a uint3x4_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator*(uint3x4_mt8 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint3x4_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator*(uint a, uint3x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator/(uint3x4_mt8 a, uint3x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator/(uint3x4_mt8 a, uint_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator/(uint_mt8 a, uint3x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator/(uint3x4_mt8 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator/(uint a, uint3x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator%(uint3x4_mt8 a, uint3x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator%(uint3x4_mt8 a, uint_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator%(uint_mt8 a, uint3x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator%(uint3x4_mt8 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator%(uint a, uint3x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator --(uint3x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 operator ++(uint3x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 abs([This] uint3x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 sign([This] uint3x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 min([This] uint3x4_mt8 a, uint3x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 max([This] uint3x4_mt8 a, uint3x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 clamp([This] uint3x4_mt8 v, uint3x4_mt8 min, uint3x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 square([This] uint3x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 fma([This] uint3x4_mt8 a, uint3x4_mt8 b, uint3x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 fms([This] uint3x4_mt8 a, uint3x4_mt8 b, uint3x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 fnma([This] uint3x4_mt8 a, uint3x4_mt8 b, uint3x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 fsm([This] uint3x4_mt8 c, uint3x4_mt8 a, uint3x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 fam([This] uint3x4_mt8 c, uint3x4_mt8 a, uint3x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt8 mad([This] uint3x4_mt8 a, uint3x4_mt8 b, uint3x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint4_mt8 csum([This] uint3x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static uint4_mt8 cmin([This] uint3x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static uint4_mt8 cmax([This] uint3x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // uint3x4_mt8

#region uint3x4_mt16

public partial struct uint3x4_mt16
{
    #region Constants

    public static uint3x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint3x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator+(uint3x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator+(uint3x4_mt16 a, uint3x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator-(uint3x4_mt16 a, uint3x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a uint3x4_mt16 by uint3x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator*(uint3x4_mt16 a, uint3x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a uint3x4_mt16 by uint_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator*(uint3x4_mt16 a, uint_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint3x4_mt16 by uint3x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator*(uint_mt16 a, uint3x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a uint3x4_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator*(uint3x4_mt16 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint3x4_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator*(uint a, uint3x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator/(uint3x4_mt16 a, uint3x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator/(uint3x4_mt16 a, uint_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator/(uint_mt16 a, uint3x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator/(uint3x4_mt16 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator/(uint a, uint3x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator%(uint3x4_mt16 a, uint3x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator%(uint3x4_mt16 a, uint_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator%(uint_mt16 a, uint3x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator%(uint3x4_mt16 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator%(uint a, uint3x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator --(uint3x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 operator ++(uint3x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 abs([This] uint3x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 sign([This] uint3x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 min([This] uint3x4_mt16 a, uint3x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 max([This] uint3x4_mt16 a, uint3x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 clamp([This] uint3x4_mt16 v, uint3x4_mt16 min, uint3x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 square([This] uint3x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 fma([This] uint3x4_mt16 a, uint3x4_mt16 b, uint3x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 fms([This] uint3x4_mt16 a, uint3x4_mt16 b, uint3x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 fnma([This] uint3x4_mt16 a, uint3x4_mt16 b, uint3x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 fsm([This] uint3x4_mt16 c, uint3x4_mt16 a, uint3x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 fam([This] uint3x4_mt16 c, uint3x4_mt16 a, uint3x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt16 mad([This] uint3x4_mt16 a, uint3x4_mt16 b, uint3x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint4_mt16 csum([This] uint3x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static uint4_mt16 cmin([This] uint3x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static uint4_mt16 cmax([This] uint3x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // uint3x4_mt16

#region uint4x2_mt4

public partial struct uint4x2_mt4
{
    #region Constants

    public static uint4x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint4x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator+(uint4x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator+(uint4x2_mt4 a, uint4x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator-(uint4x2_mt4 a, uint4x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a uint4x2_mt4 by uint4x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator*(uint4x2_mt4 a, uint4x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a uint4x2_mt4 by uint_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator*(uint4x2_mt4 a, uint_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint4x2_mt4 by uint4x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator*(uint_mt4 a, uint4x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a uint4x2_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator*(uint4x2_mt4 a, uint b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint4x2_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator*(uint a, uint4x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator/(uint4x2_mt4 a, uint4x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator/(uint4x2_mt4 a, uint_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator/(uint_mt4 a, uint4x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator/(uint4x2_mt4 a, uint b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator/(uint a, uint4x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator%(uint4x2_mt4 a, uint4x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator%(uint4x2_mt4 a, uint_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator%(uint_mt4 a, uint4x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator%(uint4x2_mt4 a, uint b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator%(uint a, uint4x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator --(uint4x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 operator ++(uint4x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 abs([This] uint4x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 sign([This] uint4x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 min([This] uint4x2_mt4 a, uint4x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 max([This] uint4x2_mt4 a, uint4x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 clamp([This] uint4x2_mt4 v, uint4x2_mt4 min, uint4x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 square([This] uint4x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 fma([This] uint4x2_mt4 a, uint4x2_mt4 b, uint4x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 fms([This] uint4x2_mt4 a, uint4x2_mt4 b, uint4x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 fnma([This] uint4x2_mt4 a, uint4x2_mt4 b, uint4x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 fsm([This] uint4x2_mt4 c, uint4x2_mt4 a, uint4x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 fam([This] uint4x2_mt4 c, uint4x2_mt4 a, uint4x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt4 mad([This] uint4x2_mt4 a, uint4x2_mt4 b, uint4x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint2_mt4 csum([This] uint4x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static uint2_mt4 cmin([This] uint4x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static uint2_mt4 cmax([This] uint4x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // uint4x2_mt4

#region uint4x2_mt8

public partial struct uint4x2_mt8
{
    #region Constants

    public static uint4x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint4x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator+(uint4x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator+(uint4x2_mt8 a, uint4x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator-(uint4x2_mt8 a, uint4x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a uint4x2_mt8 by uint4x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator*(uint4x2_mt8 a, uint4x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a uint4x2_mt8 by uint_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator*(uint4x2_mt8 a, uint_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint4x2_mt8 by uint4x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator*(uint_mt8 a, uint4x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a uint4x2_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator*(uint4x2_mt8 a, uint b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint4x2_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator*(uint a, uint4x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator/(uint4x2_mt8 a, uint4x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator/(uint4x2_mt8 a, uint_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator/(uint_mt8 a, uint4x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator/(uint4x2_mt8 a, uint b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator/(uint a, uint4x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator%(uint4x2_mt8 a, uint4x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator%(uint4x2_mt8 a, uint_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator%(uint_mt8 a, uint4x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator%(uint4x2_mt8 a, uint b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator%(uint a, uint4x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator --(uint4x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 operator ++(uint4x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 abs([This] uint4x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 sign([This] uint4x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 min([This] uint4x2_mt8 a, uint4x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 max([This] uint4x2_mt8 a, uint4x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 clamp([This] uint4x2_mt8 v, uint4x2_mt8 min, uint4x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 square([This] uint4x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 fma([This] uint4x2_mt8 a, uint4x2_mt8 b, uint4x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 fms([This] uint4x2_mt8 a, uint4x2_mt8 b, uint4x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 fnma([This] uint4x2_mt8 a, uint4x2_mt8 b, uint4x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 fsm([This] uint4x2_mt8 c, uint4x2_mt8 a, uint4x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 fam([This] uint4x2_mt8 c, uint4x2_mt8 a, uint4x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt8 mad([This] uint4x2_mt8 a, uint4x2_mt8 b, uint4x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint2_mt8 csum([This] uint4x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static uint2_mt8 cmin([This] uint4x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static uint2_mt8 cmax([This] uint4x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // uint4x2_mt8

#region uint4x2_mt16

public partial struct uint4x2_mt16
{
    #region Constants

    public static uint4x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint4x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator+(uint4x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator+(uint4x2_mt16 a, uint4x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator-(uint4x2_mt16 a, uint4x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a uint4x2_mt16 by uint4x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator*(uint4x2_mt16 a, uint4x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a uint4x2_mt16 by uint_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator*(uint4x2_mt16 a, uint_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint4x2_mt16 by uint4x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator*(uint_mt16 a, uint4x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a uint4x2_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator*(uint4x2_mt16 a, uint b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint4x2_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator*(uint a, uint4x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator/(uint4x2_mt16 a, uint4x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator/(uint4x2_mt16 a, uint_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator/(uint_mt16 a, uint4x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator/(uint4x2_mt16 a, uint b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator/(uint a, uint4x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator%(uint4x2_mt16 a, uint4x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator%(uint4x2_mt16 a, uint_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator%(uint_mt16 a, uint4x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator%(uint4x2_mt16 a, uint b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator%(uint a, uint4x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator --(uint4x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 operator ++(uint4x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 abs([This] uint4x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 sign([This] uint4x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 min([This] uint4x2_mt16 a, uint4x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 max([This] uint4x2_mt16 a, uint4x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 clamp([This] uint4x2_mt16 v, uint4x2_mt16 min, uint4x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 square([This] uint4x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 fma([This] uint4x2_mt16 a, uint4x2_mt16 b, uint4x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 fms([This] uint4x2_mt16 a, uint4x2_mt16 b, uint4x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 fnma([This] uint4x2_mt16 a, uint4x2_mt16 b, uint4x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 fsm([This] uint4x2_mt16 c, uint4x2_mt16 a, uint4x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 fam([This] uint4x2_mt16 c, uint4x2_mt16 a, uint4x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt16 mad([This] uint4x2_mt16 a, uint4x2_mt16 b, uint4x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint2_mt16 csum([This] uint4x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static uint2_mt16 cmin([This] uint4x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static uint2_mt16 cmax([This] uint4x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // uint4x2_mt16

#region uint4x3_mt4

public partial struct uint4x3_mt4
{
    #region Constants

    public static uint4x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint4x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator+(uint4x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator+(uint4x3_mt4 a, uint4x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator-(uint4x3_mt4 a, uint4x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a uint4x3_mt4 by uint4x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator*(uint4x3_mt4 a, uint4x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a uint4x3_mt4 by uint_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator*(uint4x3_mt4 a, uint_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint4x3_mt4 by uint4x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator*(uint_mt4 a, uint4x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a uint4x3_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator*(uint4x3_mt4 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint4x3_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator*(uint a, uint4x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator/(uint4x3_mt4 a, uint4x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator/(uint4x3_mt4 a, uint_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator/(uint_mt4 a, uint4x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator/(uint4x3_mt4 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator/(uint a, uint4x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator%(uint4x3_mt4 a, uint4x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator%(uint4x3_mt4 a, uint_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator%(uint_mt4 a, uint4x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator%(uint4x3_mt4 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator%(uint a, uint4x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator --(uint4x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 operator ++(uint4x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 abs([This] uint4x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 sign([This] uint4x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 min([This] uint4x3_mt4 a, uint4x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 max([This] uint4x3_mt4 a, uint4x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 clamp([This] uint4x3_mt4 v, uint4x3_mt4 min, uint4x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 square([This] uint4x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 fma([This] uint4x3_mt4 a, uint4x3_mt4 b, uint4x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 fms([This] uint4x3_mt4 a, uint4x3_mt4 b, uint4x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 fnma([This] uint4x3_mt4 a, uint4x3_mt4 b, uint4x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 fsm([This] uint4x3_mt4 c, uint4x3_mt4 a, uint4x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 fam([This] uint4x3_mt4 c, uint4x3_mt4 a, uint4x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt4 mad([This] uint4x3_mt4 a, uint4x3_mt4 b, uint4x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint3_mt4 csum([This] uint4x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static uint3_mt4 cmin([This] uint4x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static uint3_mt4 cmax([This] uint4x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // uint4x3_mt4

#region uint4x3_mt8

public partial struct uint4x3_mt8
{
    #region Constants

    public static uint4x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint4x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator+(uint4x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator+(uint4x3_mt8 a, uint4x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator-(uint4x3_mt8 a, uint4x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a uint4x3_mt8 by uint4x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator*(uint4x3_mt8 a, uint4x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a uint4x3_mt8 by uint_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator*(uint4x3_mt8 a, uint_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint4x3_mt8 by uint4x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator*(uint_mt8 a, uint4x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a uint4x3_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator*(uint4x3_mt8 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint4x3_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator*(uint a, uint4x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator/(uint4x3_mt8 a, uint4x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator/(uint4x3_mt8 a, uint_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator/(uint_mt8 a, uint4x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator/(uint4x3_mt8 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator/(uint a, uint4x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator%(uint4x3_mt8 a, uint4x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator%(uint4x3_mt8 a, uint_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator%(uint_mt8 a, uint4x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator%(uint4x3_mt8 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator%(uint a, uint4x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator --(uint4x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 operator ++(uint4x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 abs([This] uint4x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 sign([This] uint4x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 min([This] uint4x3_mt8 a, uint4x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 max([This] uint4x3_mt8 a, uint4x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 clamp([This] uint4x3_mt8 v, uint4x3_mt8 min, uint4x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 square([This] uint4x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 fma([This] uint4x3_mt8 a, uint4x3_mt8 b, uint4x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 fms([This] uint4x3_mt8 a, uint4x3_mt8 b, uint4x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 fnma([This] uint4x3_mt8 a, uint4x3_mt8 b, uint4x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 fsm([This] uint4x3_mt8 c, uint4x3_mt8 a, uint4x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 fam([This] uint4x3_mt8 c, uint4x3_mt8 a, uint4x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt8 mad([This] uint4x3_mt8 a, uint4x3_mt8 b, uint4x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint3_mt8 csum([This] uint4x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static uint3_mt8 cmin([This] uint4x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static uint3_mt8 cmax([This] uint4x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // uint4x3_mt8

#region uint4x3_mt16

public partial struct uint4x3_mt16
{
    #region Constants

    public static uint4x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint4x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator+(uint4x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator+(uint4x3_mt16 a, uint4x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator-(uint4x3_mt16 a, uint4x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a uint4x3_mt16 by uint4x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator*(uint4x3_mt16 a, uint4x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a uint4x3_mt16 by uint_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator*(uint4x3_mt16 a, uint_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint4x3_mt16 by uint4x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator*(uint_mt16 a, uint4x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a uint4x3_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator*(uint4x3_mt16 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint4x3_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator*(uint a, uint4x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator/(uint4x3_mt16 a, uint4x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator/(uint4x3_mt16 a, uint_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator/(uint_mt16 a, uint4x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator/(uint4x3_mt16 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator/(uint a, uint4x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator%(uint4x3_mt16 a, uint4x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator%(uint4x3_mt16 a, uint_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator%(uint_mt16 a, uint4x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator%(uint4x3_mt16 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator%(uint a, uint4x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator --(uint4x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 operator ++(uint4x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 abs([This] uint4x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 sign([This] uint4x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 min([This] uint4x3_mt16 a, uint4x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 max([This] uint4x3_mt16 a, uint4x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 clamp([This] uint4x3_mt16 v, uint4x3_mt16 min, uint4x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 square([This] uint4x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 fma([This] uint4x3_mt16 a, uint4x3_mt16 b, uint4x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 fms([This] uint4x3_mt16 a, uint4x3_mt16 b, uint4x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 fnma([This] uint4x3_mt16 a, uint4x3_mt16 b, uint4x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 fsm([This] uint4x3_mt16 c, uint4x3_mt16 a, uint4x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 fam([This] uint4x3_mt16 c, uint4x3_mt16 a, uint4x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt16 mad([This] uint4x3_mt16 a, uint4x3_mt16 b, uint4x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint3_mt16 csum([This] uint4x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static uint3_mt16 cmin([This] uint4x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static uint3_mt16 cmax([This] uint4x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // uint4x3_mt16

#region uint4x4_mt4

public partial struct uint4x4_mt4
{
    #region Constants

    public static uint4x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint4x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator+(uint4x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator+(uint4x4_mt4 a, uint4x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator-(uint4x4_mt4 a, uint4x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a uint4x4_mt4 by uint4x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator*(uint4x4_mt4 a, uint4x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a uint4x4_mt4 by uint_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator*(uint4x4_mt4 a, uint_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint4x4_mt4 by uint4x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator*(uint_mt4 a, uint4x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a uint4x4_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator*(uint4x4_mt4 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint4x4_mt4 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator*(uint a, uint4x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator/(uint4x4_mt4 a, uint4x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator/(uint4x4_mt4 a, uint_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator/(uint_mt4 a, uint4x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator/(uint4x4_mt4 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator/(uint a, uint4x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator%(uint4x4_mt4 a, uint4x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator%(uint4x4_mt4 a, uint_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator%(uint_mt4 a, uint4x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator%(uint4x4_mt4 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator%(uint a, uint4x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator --(uint4x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 operator ++(uint4x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 abs([This] uint4x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 sign([This] uint4x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 min([This] uint4x4_mt4 a, uint4x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 max([This] uint4x4_mt4 a, uint4x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 clamp([This] uint4x4_mt4 v, uint4x4_mt4 min, uint4x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 square([This] uint4x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 fma([This] uint4x4_mt4 a, uint4x4_mt4 b, uint4x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 fms([This] uint4x4_mt4 a, uint4x4_mt4 b, uint4x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 fnma([This] uint4x4_mt4 a, uint4x4_mt4 b, uint4x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 fsm([This] uint4x4_mt4 c, uint4x4_mt4 a, uint4x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 fam([This] uint4x4_mt4 c, uint4x4_mt4 a, uint4x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt4 mad([This] uint4x4_mt4 a, uint4x4_mt4 b, uint4x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint4_mt4 csum([This] uint4x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static uint4_mt4 cmin([This] uint4x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static uint4_mt4 cmax([This] uint4x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // uint4x4_mt4

#region uint4x4_mt8

public partial struct uint4x4_mt8
{
    #region Constants

    public static uint4x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint4x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator+(uint4x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator+(uint4x4_mt8 a, uint4x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator-(uint4x4_mt8 a, uint4x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a uint4x4_mt8 by uint4x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator*(uint4x4_mt8 a, uint4x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a uint4x4_mt8 by uint_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator*(uint4x4_mt8 a, uint_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint4x4_mt8 by uint4x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator*(uint_mt8 a, uint4x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a uint4x4_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator*(uint4x4_mt8 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint4x4_mt8 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator*(uint a, uint4x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator/(uint4x4_mt8 a, uint4x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator/(uint4x4_mt8 a, uint_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator/(uint_mt8 a, uint4x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator/(uint4x4_mt8 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator/(uint a, uint4x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator%(uint4x4_mt8 a, uint4x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator%(uint4x4_mt8 a, uint_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator%(uint_mt8 a, uint4x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator%(uint4x4_mt8 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator%(uint a, uint4x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator --(uint4x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 operator ++(uint4x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 abs([This] uint4x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 sign([This] uint4x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 min([This] uint4x4_mt8 a, uint4x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 max([This] uint4x4_mt8 a, uint4x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 clamp([This] uint4x4_mt8 v, uint4x4_mt8 min, uint4x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 square([This] uint4x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 fma([This] uint4x4_mt8 a, uint4x4_mt8 b, uint4x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 fms([This] uint4x4_mt8 a, uint4x4_mt8 b, uint4x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 fnma([This] uint4x4_mt8 a, uint4x4_mt8 b, uint4x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 fsm([This] uint4x4_mt8 c, uint4x4_mt8 a, uint4x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 fam([This] uint4x4_mt8 c, uint4x4_mt8 a, uint4x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt8 mad([This] uint4x4_mt8 a, uint4x4_mt8 b, uint4x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint4_mt8 csum([This] uint4x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static uint4_mt8 cmin([This] uint4x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static uint4_mt8 cmax([This] uint4x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // uint4x4_mt8

#region uint4x4_mt16

public partial struct uint4x4_mt16
{
    #region Constants

    public static uint4x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint4x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator+(uint4x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator+(uint4x4_mt16 a, uint4x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator-(uint4x4_mt16 a, uint4x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a uint4x4_mt16 by uint4x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator*(uint4x4_mt16 a, uint4x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a uint4x4_mt16 by uint_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator*(uint4x4_mt16 a, uint_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint4x4_mt16 by uint4x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator*(uint_mt16 a, uint4x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a uint4x4_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator*(uint4x4_mt16 a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint4x4_mt16 by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator*(uint a, uint4x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator/(uint4x4_mt16 a, uint4x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator/(uint4x4_mt16 a, uint_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator/(uint_mt16 a, uint4x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator/(uint4x4_mt16 a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator/(uint a, uint4x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator%(uint4x4_mt16 a, uint4x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator%(uint4x4_mt16 a, uint_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator%(uint_mt16 a, uint4x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator%(uint4x4_mt16 a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator%(uint a, uint4x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator --(uint4x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 operator ++(uint4x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 abs([This] uint4x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 sign([This] uint4x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 min([This] uint4x4_mt16 a, uint4x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 max([This] uint4x4_mt16 a, uint4x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 clamp([This] uint4x4_mt16 v, uint4x4_mt16 min, uint4x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 square([This] uint4x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 fma([This] uint4x4_mt16 a, uint4x4_mt16 b, uint4x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 fms([This] uint4x4_mt16 a, uint4x4_mt16 b, uint4x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 fnma([This] uint4x4_mt16 a, uint4x4_mt16 b, uint4x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 fsm([This] uint4x4_mt16 c, uint4x4_mt16 a, uint4x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 fam([This] uint4x4_mt16 c, uint4x4_mt16 a, uint4x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt16 mad([This] uint4x4_mt16 a, uint4x4_mt16 b, uint4x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint4_mt16 csum([This] uint4x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static uint4_mt16 cmin([This] uint4x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static uint4_mt16 cmax([This] uint4x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // uint4x4_mt16

#region long2x2_mt4

public partial struct long2x2_mt4
{
    #region Constants

    public static long2x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long2x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator+(long2x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator-(long2x2_mt4 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator+(long2x2_mt4 a, long2x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator-(long2x2_mt4 a, long2x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a long2x2_mt4 by long2x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator*(long2x2_mt4 a, long2x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a long2x2_mt4 by long_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator*(long2x2_mt4 a, long_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long2x2_mt4 by long2x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator*(long_mt4 a, long2x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a long2x2_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator*(long2x2_mt4 a, long b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long2x2_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator*(long a, long2x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator/(long2x2_mt4 a, long2x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator/(long2x2_mt4 a, long_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator/(long_mt4 a, long2x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator/(long2x2_mt4 a, long b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator/(long a, long2x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator%(long2x2_mt4 a, long2x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator%(long2x2_mt4 a, long_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator%(long_mt4 a, long2x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator%(long2x2_mt4 a, long b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator%(long a, long2x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator --(long2x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 operator ++(long2x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2x2_mt4 abs([This] long2x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 sign([This] long2x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 min([This] long2x2_mt4 a, long2x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 max([This] long2x2_mt4 a, long2x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 clamp([This] long2x2_mt4 v, long2x2_mt4 min, long2x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static long2x2_mt4 square([This] long2x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt4 fma([This] long2x2_mt4 a, long2x2_mt4 b, long2x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt4 fms([This] long2x2_mt4 a, long2x2_mt4 b, long2x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt4 fnma([This] long2x2_mt4 a, long2x2_mt4 b, long2x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt4 fsm([This] long2x2_mt4 c, long2x2_mt4 a, long2x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt4 fam([This] long2x2_mt4 c, long2x2_mt4 a, long2x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt4 mad([This] long2x2_mt4 a, long2x2_mt4 b, long2x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long2_mt4 csum([This] long2x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static long2_mt4 cmin([This] long2x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static long2_mt4 cmax([This] long2x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // long2x2_mt4

#region long2x2_mt8

public partial struct long2x2_mt8
{
    #region Constants

    public static long2x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long2x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator+(long2x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator-(long2x2_mt8 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator+(long2x2_mt8 a, long2x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator-(long2x2_mt8 a, long2x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a long2x2_mt8 by long2x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator*(long2x2_mt8 a, long2x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a long2x2_mt8 by long_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator*(long2x2_mt8 a, long_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long2x2_mt8 by long2x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator*(long_mt8 a, long2x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a long2x2_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator*(long2x2_mt8 a, long b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long2x2_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator*(long a, long2x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator/(long2x2_mt8 a, long2x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator/(long2x2_mt8 a, long_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator/(long_mt8 a, long2x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator/(long2x2_mt8 a, long b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator/(long a, long2x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator%(long2x2_mt8 a, long2x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator%(long2x2_mt8 a, long_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator%(long_mt8 a, long2x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator%(long2x2_mt8 a, long b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator%(long a, long2x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator --(long2x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 operator ++(long2x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2x2_mt8 abs([This] long2x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 sign([This] long2x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 min([This] long2x2_mt8 a, long2x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 max([This] long2x2_mt8 a, long2x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 clamp([This] long2x2_mt8 v, long2x2_mt8 min, long2x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static long2x2_mt8 square([This] long2x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt8 fma([This] long2x2_mt8 a, long2x2_mt8 b, long2x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt8 fms([This] long2x2_mt8 a, long2x2_mt8 b, long2x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt8 fnma([This] long2x2_mt8 a, long2x2_mt8 b, long2x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt8 fsm([This] long2x2_mt8 c, long2x2_mt8 a, long2x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt8 fam([This] long2x2_mt8 c, long2x2_mt8 a, long2x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt8 mad([This] long2x2_mt8 a, long2x2_mt8 b, long2x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long2_mt8 csum([This] long2x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static long2_mt8 cmin([This] long2x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static long2_mt8 cmax([This] long2x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // long2x2_mt8

#region long2x2_mt16

public partial struct long2x2_mt16
{
    #region Constants

    public static long2x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long2x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator+(long2x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator-(long2x2_mt16 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator+(long2x2_mt16 a, long2x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator-(long2x2_mt16 a, long2x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a long2x2_mt16 by long2x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator*(long2x2_mt16 a, long2x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a long2x2_mt16 by long_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator*(long2x2_mt16 a, long_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long2x2_mt16 by long2x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator*(long_mt16 a, long2x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a long2x2_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator*(long2x2_mt16 a, long b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long2x2_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator*(long a, long2x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator/(long2x2_mt16 a, long2x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator/(long2x2_mt16 a, long_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator/(long_mt16 a, long2x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator/(long2x2_mt16 a, long b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator/(long a, long2x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator%(long2x2_mt16 a, long2x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator%(long2x2_mt16 a, long_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator%(long_mt16 a, long2x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator%(long2x2_mt16 a, long b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator%(long a, long2x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator --(long2x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 operator ++(long2x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2x2_mt16 abs([This] long2x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 sign([This] long2x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 min([This] long2x2_mt16 a, long2x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 max([This] long2x2_mt16 a, long2x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 clamp([This] long2x2_mt16 v, long2x2_mt16 min, long2x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static long2x2_mt16 square([This] long2x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt16 fma([This] long2x2_mt16 a, long2x2_mt16 b, long2x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt16 fms([This] long2x2_mt16 a, long2x2_mt16 b, long2x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt16 fnma([This] long2x2_mt16 a, long2x2_mt16 b, long2x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt16 fsm([This] long2x2_mt16 c, long2x2_mt16 a, long2x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt16 fam([This] long2x2_mt16 c, long2x2_mt16 a, long2x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt16 mad([This] long2x2_mt16 a, long2x2_mt16 b, long2x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long2_mt16 csum([This] long2x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static long2_mt16 cmin([This] long2x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static long2_mt16 cmax([This] long2x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // long2x2_mt16

#region long2x3_mt4

public partial struct long2x3_mt4
{
    #region Constants

    public static long2x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long2x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator+(long2x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator-(long2x3_mt4 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator+(long2x3_mt4 a, long2x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator-(long2x3_mt4 a, long2x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a long2x3_mt4 by long2x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator*(long2x3_mt4 a, long2x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a long2x3_mt4 by long_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator*(long2x3_mt4 a, long_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long2x3_mt4 by long2x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator*(long_mt4 a, long2x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a long2x3_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator*(long2x3_mt4 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long2x3_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator*(long a, long2x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator/(long2x3_mt4 a, long2x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator/(long2x3_mt4 a, long_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator/(long_mt4 a, long2x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator/(long2x3_mt4 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator/(long a, long2x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator%(long2x3_mt4 a, long2x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator%(long2x3_mt4 a, long_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator%(long_mt4 a, long2x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator%(long2x3_mt4 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator%(long a, long2x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator --(long2x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 operator ++(long2x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2x3_mt4 abs([This] long2x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 sign([This] long2x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 min([This] long2x3_mt4 a, long2x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 max([This] long2x3_mt4 a, long2x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 clamp([This] long2x3_mt4 v, long2x3_mt4 min, long2x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static long2x3_mt4 square([This] long2x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt4 fma([This] long2x3_mt4 a, long2x3_mt4 b, long2x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt4 fms([This] long2x3_mt4 a, long2x3_mt4 b, long2x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt4 fnma([This] long2x3_mt4 a, long2x3_mt4 b, long2x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt4 fsm([This] long2x3_mt4 c, long2x3_mt4 a, long2x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt4 fam([This] long2x3_mt4 c, long2x3_mt4 a, long2x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt4 mad([This] long2x3_mt4 a, long2x3_mt4 b, long2x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long3_mt4 csum([This] long2x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static long3_mt4 cmin([This] long2x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static long3_mt4 cmax([This] long2x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // long2x3_mt4

#region long2x3_mt8

public partial struct long2x3_mt8
{
    #region Constants

    public static long2x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long2x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator+(long2x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator-(long2x3_mt8 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator+(long2x3_mt8 a, long2x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator-(long2x3_mt8 a, long2x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a long2x3_mt8 by long2x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator*(long2x3_mt8 a, long2x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a long2x3_mt8 by long_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator*(long2x3_mt8 a, long_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long2x3_mt8 by long2x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator*(long_mt8 a, long2x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a long2x3_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator*(long2x3_mt8 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long2x3_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator*(long a, long2x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator/(long2x3_mt8 a, long2x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator/(long2x3_mt8 a, long_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator/(long_mt8 a, long2x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator/(long2x3_mt8 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator/(long a, long2x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator%(long2x3_mt8 a, long2x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator%(long2x3_mt8 a, long_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator%(long_mt8 a, long2x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator%(long2x3_mt8 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator%(long a, long2x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator --(long2x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 operator ++(long2x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2x3_mt8 abs([This] long2x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 sign([This] long2x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 min([This] long2x3_mt8 a, long2x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 max([This] long2x3_mt8 a, long2x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 clamp([This] long2x3_mt8 v, long2x3_mt8 min, long2x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static long2x3_mt8 square([This] long2x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt8 fma([This] long2x3_mt8 a, long2x3_mt8 b, long2x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt8 fms([This] long2x3_mt8 a, long2x3_mt8 b, long2x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt8 fnma([This] long2x3_mt8 a, long2x3_mt8 b, long2x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt8 fsm([This] long2x3_mt8 c, long2x3_mt8 a, long2x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt8 fam([This] long2x3_mt8 c, long2x3_mt8 a, long2x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt8 mad([This] long2x3_mt8 a, long2x3_mt8 b, long2x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long3_mt8 csum([This] long2x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static long3_mt8 cmin([This] long2x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static long3_mt8 cmax([This] long2x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // long2x3_mt8

#region long2x3_mt16

public partial struct long2x3_mt16
{
    #region Constants

    public static long2x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long2x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator+(long2x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator-(long2x3_mt16 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator+(long2x3_mt16 a, long2x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator-(long2x3_mt16 a, long2x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a long2x3_mt16 by long2x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator*(long2x3_mt16 a, long2x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a long2x3_mt16 by long_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator*(long2x3_mt16 a, long_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long2x3_mt16 by long2x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator*(long_mt16 a, long2x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a long2x3_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator*(long2x3_mt16 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long2x3_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator*(long a, long2x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator/(long2x3_mt16 a, long2x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator/(long2x3_mt16 a, long_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator/(long_mt16 a, long2x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator/(long2x3_mt16 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator/(long a, long2x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator%(long2x3_mt16 a, long2x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator%(long2x3_mt16 a, long_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator%(long_mt16 a, long2x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator%(long2x3_mt16 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator%(long a, long2x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator --(long2x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 operator ++(long2x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2x3_mt16 abs([This] long2x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 sign([This] long2x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 min([This] long2x3_mt16 a, long2x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 max([This] long2x3_mt16 a, long2x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 clamp([This] long2x3_mt16 v, long2x3_mt16 min, long2x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static long2x3_mt16 square([This] long2x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt16 fma([This] long2x3_mt16 a, long2x3_mt16 b, long2x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt16 fms([This] long2x3_mt16 a, long2x3_mt16 b, long2x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt16 fnma([This] long2x3_mt16 a, long2x3_mt16 b, long2x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt16 fsm([This] long2x3_mt16 c, long2x3_mt16 a, long2x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt16 fam([This] long2x3_mt16 c, long2x3_mt16 a, long2x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt16 mad([This] long2x3_mt16 a, long2x3_mt16 b, long2x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long3_mt16 csum([This] long2x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static long3_mt16 cmin([This] long2x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static long3_mt16 cmax([This] long2x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // long2x3_mt16

#region long2x4_mt4

public partial struct long2x4_mt4
{
    #region Constants

    public static long2x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long2x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator+(long2x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator-(long2x4_mt4 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator+(long2x4_mt4 a, long2x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator-(long2x4_mt4 a, long2x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a long2x4_mt4 by long2x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator*(long2x4_mt4 a, long2x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a long2x4_mt4 by long_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator*(long2x4_mt4 a, long_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long2x4_mt4 by long2x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator*(long_mt4 a, long2x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a long2x4_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator*(long2x4_mt4 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long2x4_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator*(long a, long2x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator/(long2x4_mt4 a, long2x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator/(long2x4_mt4 a, long_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator/(long_mt4 a, long2x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator/(long2x4_mt4 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator/(long a, long2x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator%(long2x4_mt4 a, long2x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator%(long2x4_mt4 a, long_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator%(long_mt4 a, long2x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator%(long2x4_mt4 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator%(long a, long2x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator --(long2x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 operator ++(long2x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2x4_mt4 abs([This] long2x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 sign([This] long2x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 min([This] long2x4_mt4 a, long2x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 max([This] long2x4_mt4 a, long2x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 clamp([This] long2x4_mt4 v, long2x4_mt4 min, long2x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static long2x4_mt4 square([This] long2x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt4 fma([This] long2x4_mt4 a, long2x4_mt4 b, long2x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt4 fms([This] long2x4_mt4 a, long2x4_mt4 b, long2x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt4 fnma([This] long2x4_mt4 a, long2x4_mt4 b, long2x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt4 fsm([This] long2x4_mt4 c, long2x4_mt4 a, long2x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt4 fam([This] long2x4_mt4 c, long2x4_mt4 a, long2x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt4 mad([This] long2x4_mt4 a, long2x4_mt4 b, long2x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long4_mt4 csum([This] long2x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static long4_mt4 cmin([This] long2x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static long4_mt4 cmax([This] long2x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // long2x4_mt4

#region long2x4_mt8

public partial struct long2x4_mt8
{
    #region Constants

    public static long2x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long2x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator+(long2x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator-(long2x4_mt8 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator+(long2x4_mt8 a, long2x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator-(long2x4_mt8 a, long2x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a long2x4_mt8 by long2x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator*(long2x4_mt8 a, long2x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a long2x4_mt8 by long_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator*(long2x4_mt8 a, long_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long2x4_mt8 by long2x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator*(long_mt8 a, long2x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a long2x4_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator*(long2x4_mt8 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long2x4_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator*(long a, long2x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator/(long2x4_mt8 a, long2x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator/(long2x4_mt8 a, long_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator/(long_mt8 a, long2x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator/(long2x4_mt8 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator/(long a, long2x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator%(long2x4_mt8 a, long2x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator%(long2x4_mt8 a, long_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator%(long_mt8 a, long2x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator%(long2x4_mt8 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator%(long a, long2x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator --(long2x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 operator ++(long2x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2x4_mt8 abs([This] long2x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 sign([This] long2x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 min([This] long2x4_mt8 a, long2x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 max([This] long2x4_mt8 a, long2x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 clamp([This] long2x4_mt8 v, long2x4_mt8 min, long2x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static long2x4_mt8 square([This] long2x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt8 fma([This] long2x4_mt8 a, long2x4_mt8 b, long2x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt8 fms([This] long2x4_mt8 a, long2x4_mt8 b, long2x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt8 fnma([This] long2x4_mt8 a, long2x4_mt8 b, long2x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt8 fsm([This] long2x4_mt8 c, long2x4_mt8 a, long2x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt8 fam([This] long2x4_mt8 c, long2x4_mt8 a, long2x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt8 mad([This] long2x4_mt8 a, long2x4_mt8 b, long2x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long4_mt8 csum([This] long2x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static long4_mt8 cmin([This] long2x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static long4_mt8 cmax([This] long2x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // long2x4_mt8

#region long2x4_mt16

public partial struct long2x4_mt16
{
    #region Constants

    public static long2x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long2x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator+(long2x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator-(long2x4_mt16 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator+(long2x4_mt16 a, long2x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator-(long2x4_mt16 a, long2x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a long2x4_mt16 by long2x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator*(long2x4_mt16 a, long2x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a long2x4_mt16 by long_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator*(long2x4_mt16 a, long_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long2x4_mt16 by long2x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator*(long_mt16 a, long2x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a long2x4_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator*(long2x4_mt16 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long2x4_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator*(long a, long2x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator/(long2x4_mt16 a, long2x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator/(long2x4_mt16 a, long_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator/(long_mt16 a, long2x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator/(long2x4_mt16 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator/(long a, long2x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator%(long2x4_mt16 a, long2x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator%(long2x4_mt16 a, long_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator%(long_mt16 a, long2x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator%(long2x4_mt16 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator%(long a, long2x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator --(long2x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 operator ++(long2x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2x4_mt16 abs([This] long2x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 sign([This] long2x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 min([This] long2x4_mt16 a, long2x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 max([This] long2x4_mt16 a, long2x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 clamp([This] long2x4_mt16 v, long2x4_mt16 min, long2x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static long2x4_mt16 square([This] long2x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt16 fma([This] long2x4_mt16 a, long2x4_mt16 b, long2x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt16 fms([This] long2x4_mt16 a, long2x4_mt16 b, long2x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt16 fnma([This] long2x4_mt16 a, long2x4_mt16 b, long2x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt16 fsm([This] long2x4_mt16 c, long2x4_mt16 a, long2x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt16 fam([This] long2x4_mt16 c, long2x4_mt16 a, long2x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt16 mad([This] long2x4_mt16 a, long2x4_mt16 b, long2x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long4_mt16 csum([This] long2x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static long4_mt16 cmin([This] long2x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static long4_mt16 cmax([This] long2x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // long2x4_mt16

#region long3x2_mt4

public partial struct long3x2_mt4
{
    #region Constants

    public static long3x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long3x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator+(long3x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator-(long3x2_mt4 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator+(long3x2_mt4 a, long3x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator-(long3x2_mt4 a, long3x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a long3x2_mt4 by long3x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator*(long3x2_mt4 a, long3x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a long3x2_mt4 by long_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator*(long3x2_mt4 a, long_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long3x2_mt4 by long3x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator*(long_mt4 a, long3x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a long3x2_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator*(long3x2_mt4 a, long b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long3x2_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator*(long a, long3x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator/(long3x2_mt4 a, long3x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator/(long3x2_mt4 a, long_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator/(long_mt4 a, long3x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator/(long3x2_mt4 a, long b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator/(long a, long3x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator%(long3x2_mt4 a, long3x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator%(long3x2_mt4 a, long_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator%(long_mt4 a, long3x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator%(long3x2_mt4 a, long b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator%(long a, long3x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator --(long3x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 operator ++(long3x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3x2_mt4 abs([This] long3x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 sign([This] long3x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 min([This] long3x2_mt4 a, long3x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 max([This] long3x2_mt4 a, long3x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 clamp([This] long3x2_mt4 v, long3x2_mt4 min, long3x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static long3x2_mt4 square([This] long3x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt4 fma([This] long3x2_mt4 a, long3x2_mt4 b, long3x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt4 fms([This] long3x2_mt4 a, long3x2_mt4 b, long3x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt4 fnma([This] long3x2_mt4 a, long3x2_mt4 b, long3x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt4 fsm([This] long3x2_mt4 c, long3x2_mt4 a, long3x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt4 fam([This] long3x2_mt4 c, long3x2_mt4 a, long3x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt4 mad([This] long3x2_mt4 a, long3x2_mt4 b, long3x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long2_mt4 csum([This] long3x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static long2_mt4 cmin([This] long3x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static long2_mt4 cmax([This] long3x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // long3x2_mt4

#region long3x2_mt8

public partial struct long3x2_mt8
{
    #region Constants

    public static long3x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long3x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator+(long3x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator-(long3x2_mt8 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator+(long3x2_mt8 a, long3x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator-(long3x2_mt8 a, long3x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a long3x2_mt8 by long3x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator*(long3x2_mt8 a, long3x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a long3x2_mt8 by long_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator*(long3x2_mt8 a, long_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long3x2_mt8 by long3x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator*(long_mt8 a, long3x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a long3x2_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator*(long3x2_mt8 a, long b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long3x2_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator*(long a, long3x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator/(long3x2_mt8 a, long3x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator/(long3x2_mt8 a, long_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator/(long_mt8 a, long3x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator/(long3x2_mt8 a, long b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator/(long a, long3x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator%(long3x2_mt8 a, long3x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator%(long3x2_mt8 a, long_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator%(long_mt8 a, long3x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator%(long3x2_mt8 a, long b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator%(long a, long3x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator --(long3x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 operator ++(long3x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3x2_mt8 abs([This] long3x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 sign([This] long3x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 min([This] long3x2_mt8 a, long3x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 max([This] long3x2_mt8 a, long3x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 clamp([This] long3x2_mt8 v, long3x2_mt8 min, long3x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static long3x2_mt8 square([This] long3x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt8 fma([This] long3x2_mt8 a, long3x2_mt8 b, long3x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt8 fms([This] long3x2_mt8 a, long3x2_mt8 b, long3x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt8 fnma([This] long3x2_mt8 a, long3x2_mt8 b, long3x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt8 fsm([This] long3x2_mt8 c, long3x2_mt8 a, long3x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt8 fam([This] long3x2_mt8 c, long3x2_mt8 a, long3x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt8 mad([This] long3x2_mt8 a, long3x2_mt8 b, long3x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long2_mt8 csum([This] long3x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static long2_mt8 cmin([This] long3x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static long2_mt8 cmax([This] long3x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // long3x2_mt8

#region long3x2_mt16

public partial struct long3x2_mt16
{
    #region Constants

    public static long3x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long3x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator+(long3x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator-(long3x2_mt16 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator+(long3x2_mt16 a, long3x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator-(long3x2_mt16 a, long3x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a long3x2_mt16 by long3x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator*(long3x2_mt16 a, long3x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a long3x2_mt16 by long_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator*(long3x2_mt16 a, long_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long3x2_mt16 by long3x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator*(long_mt16 a, long3x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a long3x2_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator*(long3x2_mt16 a, long b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long3x2_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator*(long a, long3x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator/(long3x2_mt16 a, long3x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator/(long3x2_mt16 a, long_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator/(long_mt16 a, long3x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator/(long3x2_mt16 a, long b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator/(long a, long3x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator%(long3x2_mt16 a, long3x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator%(long3x2_mt16 a, long_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator%(long_mt16 a, long3x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator%(long3x2_mt16 a, long b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator%(long a, long3x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator --(long3x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 operator ++(long3x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3x2_mt16 abs([This] long3x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 sign([This] long3x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 min([This] long3x2_mt16 a, long3x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 max([This] long3x2_mt16 a, long3x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 clamp([This] long3x2_mt16 v, long3x2_mt16 min, long3x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static long3x2_mt16 square([This] long3x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt16 fma([This] long3x2_mt16 a, long3x2_mt16 b, long3x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt16 fms([This] long3x2_mt16 a, long3x2_mt16 b, long3x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt16 fnma([This] long3x2_mt16 a, long3x2_mt16 b, long3x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt16 fsm([This] long3x2_mt16 c, long3x2_mt16 a, long3x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt16 fam([This] long3x2_mt16 c, long3x2_mt16 a, long3x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt16 mad([This] long3x2_mt16 a, long3x2_mt16 b, long3x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long2_mt16 csum([This] long3x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static long2_mt16 cmin([This] long3x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static long2_mt16 cmax([This] long3x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // long3x2_mt16

#region long3x3_mt4

public partial struct long3x3_mt4
{
    #region Constants

    public static long3x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long3x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator+(long3x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator-(long3x3_mt4 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator+(long3x3_mt4 a, long3x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator-(long3x3_mt4 a, long3x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a long3x3_mt4 by long3x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator*(long3x3_mt4 a, long3x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a long3x3_mt4 by long_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator*(long3x3_mt4 a, long_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long3x3_mt4 by long3x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator*(long_mt4 a, long3x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a long3x3_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator*(long3x3_mt4 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long3x3_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator*(long a, long3x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator/(long3x3_mt4 a, long3x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator/(long3x3_mt4 a, long_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator/(long_mt4 a, long3x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator/(long3x3_mt4 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator/(long a, long3x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator%(long3x3_mt4 a, long3x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator%(long3x3_mt4 a, long_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator%(long_mt4 a, long3x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator%(long3x3_mt4 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator%(long a, long3x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator --(long3x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 operator ++(long3x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3x3_mt4 abs([This] long3x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 sign([This] long3x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 min([This] long3x3_mt4 a, long3x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 max([This] long3x3_mt4 a, long3x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 clamp([This] long3x3_mt4 v, long3x3_mt4 min, long3x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static long3x3_mt4 square([This] long3x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt4 fma([This] long3x3_mt4 a, long3x3_mt4 b, long3x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt4 fms([This] long3x3_mt4 a, long3x3_mt4 b, long3x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt4 fnma([This] long3x3_mt4 a, long3x3_mt4 b, long3x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt4 fsm([This] long3x3_mt4 c, long3x3_mt4 a, long3x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt4 fam([This] long3x3_mt4 c, long3x3_mt4 a, long3x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt4 mad([This] long3x3_mt4 a, long3x3_mt4 b, long3x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long3_mt4 csum([This] long3x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static long3_mt4 cmin([This] long3x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static long3_mt4 cmax([This] long3x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // long3x3_mt4

#region long3x3_mt8

public partial struct long3x3_mt8
{
    #region Constants

    public static long3x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long3x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator+(long3x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator-(long3x3_mt8 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator+(long3x3_mt8 a, long3x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator-(long3x3_mt8 a, long3x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a long3x3_mt8 by long3x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator*(long3x3_mt8 a, long3x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a long3x3_mt8 by long_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator*(long3x3_mt8 a, long_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long3x3_mt8 by long3x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator*(long_mt8 a, long3x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a long3x3_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator*(long3x3_mt8 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long3x3_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator*(long a, long3x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator/(long3x3_mt8 a, long3x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator/(long3x3_mt8 a, long_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator/(long_mt8 a, long3x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator/(long3x3_mt8 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator/(long a, long3x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator%(long3x3_mt8 a, long3x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator%(long3x3_mt8 a, long_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator%(long_mt8 a, long3x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator%(long3x3_mt8 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator%(long a, long3x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator --(long3x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 operator ++(long3x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3x3_mt8 abs([This] long3x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 sign([This] long3x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 min([This] long3x3_mt8 a, long3x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 max([This] long3x3_mt8 a, long3x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 clamp([This] long3x3_mt8 v, long3x3_mt8 min, long3x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static long3x3_mt8 square([This] long3x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt8 fma([This] long3x3_mt8 a, long3x3_mt8 b, long3x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt8 fms([This] long3x3_mt8 a, long3x3_mt8 b, long3x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt8 fnma([This] long3x3_mt8 a, long3x3_mt8 b, long3x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt8 fsm([This] long3x3_mt8 c, long3x3_mt8 a, long3x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt8 fam([This] long3x3_mt8 c, long3x3_mt8 a, long3x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt8 mad([This] long3x3_mt8 a, long3x3_mt8 b, long3x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long3_mt8 csum([This] long3x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static long3_mt8 cmin([This] long3x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static long3_mt8 cmax([This] long3x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // long3x3_mt8

#region long3x3_mt16

public partial struct long3x3_mt16
{
    #region Constants

    public static long3x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long3x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator+(long3x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator-(long3x3_mt16 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator+(long3x3_mt16 a, long3x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator-(long3x3_mt16 a, long3x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a long3x3_mt16 by long3x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator*(long3x3_mt16 a, long3x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a long3x3_mt16 by long_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator*(long3x3_mt16 a, long_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long3x3_mt16 by long3x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator*(long_mt16 a, long3x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a long3x3_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator*(long3x3_mt16 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long3x3_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator*(long a, long3x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator/(long3x3_mt16 a, long3x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator/(long3x3_mt16 a, long_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator/(long_mt16 a, long3x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator/(long3x3_mt16 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator/(long a, long3x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator%(long3x3_mt16 a, long3x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator%(long3x3_mt16 a, long_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator%(long_mt16 a, long3x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator%(long3x3_mt16 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator%(long a, long3x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator --(long3x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 operator ++(long3x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3x3_mt16 abs([This] long3x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 sign([This] long3x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 min([This] long3x3_mt16 a, long3x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 max([This] long3x3_mt16 a, long3x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 clamp([This] long3x3_mt16 v, long3x3_mt16 min, long3x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static long3x3_mt16 square([This] long3x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt16 fma([This] long3x3_mt16 a, long3x3_mt16 b, long3x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt16 fms([This] long3x3_mt16 a, long3x3_mt16 b, long3x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt16 fnma([This] long3x3_mt16 a, long3x3_mt16 b, long3x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt16 fsm([This] long3x3_mt16 c, long3x3_mt16 a, long3x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt16 fam([This] long3x3_mt16 c, long3x3_mt16 a, long3x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt16 mad([This] long3x3_mt16 a, long3x3_mt16 b, long3x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long3_mt16 csum([This] long3x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static long3_mt16 cmin([This] long3x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static long3_mt16 cmax([This] long3x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // long3x3_mt16

#region long3x4_mt4

public partial struct long3x4_mt4
{
    #region Constants

    public static long3x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long3x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator+(long3x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator-(long3x4_mt4 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator+(long3x4_mt4 a, long3x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator-(long3x4_mt4 a, long3x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a long3x4_mt4 by long3x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator*(long3x4_mt4 a, long3x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a long3x4_mt4 by long_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator*(long3x4_mt4 a, long_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long3x4_mt4 by long3x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator*(long_mt4 a, long3x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a long3x4_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator*(long3x4_mt4 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long3x4_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator*(long a, long3x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator/(long3x4_mt4 a, long3x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator/(long3x4_mt4 a, long_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator/(long_mt4 a, long3x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator/(long3x4_mt4 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator/(long a, long3x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator%(long3x4_mt4 a, long3x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator%(long3x4_mt4 a, long_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator%(long_mt4 a, long3x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator%(long3x4_mt4 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator%(long a, long3x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator --(long3x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 operator ++(long3x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3x4_mt4 abs([This] long3x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 sign([This] long3x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 min([This] long3x4_mt4 a, long3x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 max([This] long3x4_mt4 a, long3x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 clamp([This] long3x4_mt4 v, long3x4_mt4 min, long3x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static long3x4_mt4 square([This] long3x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt4 fma([This] long3x4_mt4 a, long3x4_mt4 b, long3x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt4 fms([This] long3x4_mt4 a, long3x4_mt4 b, long3x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt4 fnma([This] long3x4_mt4 a, long3x4_mt4 b, long3x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt4 fsm([This] long3x4_mt4 c, long3x4_mt4 a, long3x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt4 fam([This] long3x4_mt4 c, long3x4_mt4 a, long3x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt4 mad([This] long3x4_mt4 a, long3x4_mt4 b, long3x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long4_mt4 csum([This] long3x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static long4_mt4 cmin([This] long3x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static long4_mt4 cmax([This] long3x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // long3x4_mt4

#region long3x4_mt8

public partial struct long3x4_mt8
{
    #region Constants

    public static long3x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long3x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator+(long3x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator-(long3x4_mt8 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator+(long3x4_mt8 a, long3x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator-(long3x4_mt8 a, long3x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a long3x4_mt8 by long3x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator*(long3x4_mt8 a, long3x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a long3x4_mt8 by long_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator*(long3x4_mt8 a, long_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long3x4_mt8 by long3x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator*(long_mt8 a, long3x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a long3x4_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator*(long3x4_mt8 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long3x4_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator*(long a, long3x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator/(long3x4_mt8 a, long3x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator/(long3x4_mt8 a, long_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator/(long_mt8 a, long3x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator/(long3x4_mt8 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator/(long a, long3x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator%(long3x4_mt8 a, long3x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator%(long3x4_mt8 a, long_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator%(long_mt8 a, long3x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator%(long3x4_mt8 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator%(long a, long3x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator --(long3x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 operator ++(long3x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3x4_mt8 abs([This] long3x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 sign([This] long3x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 min([This] long3x4_mt8 a, long3x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 max([This] long3x4_mt8 a, long3x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 clamp([This] long3x4_mt8 v, long3x4_mt8 min, long3x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static long3x4_mt8 square([This] long3x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt8 fma([This] long3x4_mt8 a, long3x4_mt8 b, long3x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt8 fms([This] long3x4_mt8 a, long3x4_mt8 b, long3x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt8 fnma([This] long3x4_mt8 a, long3x4_mt8 b, long3x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt8 fsm([This] long3x4_mt8 c, long3x4_mt8 a, long3x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt8 fam([This] long3x4_mt8 c, long3x4_mt8 a, long3x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt8 mad([This] long3x4_mt8 a, long3x4_mt8 b, long3x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long4_mt8 csum([This] long3x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static long4_mt8 cmin([This] long3x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static long4_mt8 cmax([This] long3x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // long3x4_mt8

#region long3x4_mt16

public partial struct long3x4_mt16
{
    #region Constants

    public static long3x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long3x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator+(long3x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator-(long3x4_mt16 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator+(long3x4_mt16 a, long3x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator-(long3x4_mt16 a, long3x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a long3x4_mt16 by long3x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator*(long3x4_mt16 a, long3x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a long3x4_mt16 by long_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator*(long3x4_mt16 a, long_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long3x4_mt16 by long3x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator*(long_mt16 a, long3x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a long3x4_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator*(long3x4_mt16 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long3x4_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator*(long a, long3x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator/(long3x4_mt16 a, long3x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator/(long3x4_mt16 a, long_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator/(long_mt16 a, long3x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator/(long3x4_mt16 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator/(long a, long3x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator%(long3x4_mt16 a, long3x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator%(long3x4_mt16 a, long_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator%(long_mt16 a, long3x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator%(long3x4_mt16 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator%(long a, long3x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator --(long3x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 operator ++(long3x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3x4_mt16 abs([This] long3x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 sign([This] long3x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 min([This] long3x4_mt16 a, long3x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 max([This] long3x4_mt16 a, long3x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 clamp([This] long3x4_mt16 v, long3x4_mt16 min, long3x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static long3x4_mt16 square([This] long3x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt16 fma([This] long3x4_mt16 a, long3x4_mt16 b, long3x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt16 fms([This] long3x4_mt16 a, long3x4_mt16 b, long3x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt16 fnma([This] long3x4_mt16 a, long3x4_mt16 b, long3x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt16 fsm([This] long3x4_mt16 c, long3x4_mt16 a, long3x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt16 fam([This] long3x4_mt16 c, long3x4_mt16 a, long3x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt16 mad([This] long3x4_mt16 a, long3x4_mt16 b, long3x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long4_mt16 csum([This] long3x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static long4_mt16 cmin([This] long3x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static long4_mt16 cmax([This] long3x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // long3x4_mt16

#region long4x2_mt4

public partial struct long4x2_mt4
{
    #region Constants

    public static long4x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long4x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator+(long4x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator-(long4x2_mt4 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator+(long4x2_mt4 a, long4x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator-(long4x2_mt4 a, long4x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a long4x2_mt4 by long4x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator*(long4x2_mt4 a, long4x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a long4x2_mt4 by long_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator*(long4x2_mt4 a, long_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long4x2_mt4 by long4x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator*(long_mt4 a, long4x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a long4x2_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator*(long4x2_mt4 a, long b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long4x2_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator*(long a, long4x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator/(long4x2_mt4 a, long4x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator/(long4x2_mt4 a, long_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator/(long_mt4 a, long4x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator/(long4x2_mt4 a, long b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator/(long a, long4x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator%(long4x2_mt4 a, long4x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator%(long4x2_mt4 a, long_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator%(long_mt4 a, long4x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator%(long4x2_mt4 a, long b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator%(long a, long4x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator --(long4x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 operator ++(long4x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4x2_mt4 abs([This] long4x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 sign([This] long4x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 min([This] long4x2_mt4 a, long4x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 max([This] long4x2_mt4 a, long4x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 clamp([This] long4x2_mt4 v, long4x2_mt4 min, long4x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static long4x2_mt4 square([This] long4x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt4 fma([This] long4x2_mt4 a, long4x2_mt4 b, long4x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt4 fms([This] long4x2_mt4 a, long4x2_mt4 b, long4x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt4 fnma([This] long4x2_mt4 a, long4x2_mt4 b, long4x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt4 fsm([This] long4x2_mt4 c, long4x2_mt4 a, long4x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt4 fam([This] long4x2_mt4 c, long4x2_mt4 a, long4x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt4 mad([This] long4x2_mt4 a, long4x2_mt4 b, long4x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long2_mt4 csum([This] long4x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static long2_mt4 cmin([This] long4x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static long2_mt4 cmax([This] long4x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // long4x2_mt4

#region long4x2_mt8

public partial struct long4x2_mt8
{
    #region Constants

    public static long4x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long4x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator+(long4x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator-(long4x2_mt8 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator+(long4x2_mt8 a, long4x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator-(long4x2_mt8 a, long4x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a long4x2_mt8 by long4x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator*(long4x2_mt8 a, long4x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a long4x2_mt8 by long_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator*(long4x2_mt8 a, long_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long4x2_mt8 by long4x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator*(long_mt8 a, long4x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a long4x2_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator*(long4x2_mt8 a, long b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long4x2_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator*(long a, long4x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator/(long4x2_mt8 a, long4x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator/(long4x2_mt8 a, long_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator/(long_mt8 a, long4x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator/(long4x2_mt8 a, long b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator/(long a, long4x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator%(long4x2_mt8 a, long4x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator%(long4x2_mt8 a, long_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator%(long_mt8 a, long4x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator%(long4x2_mt8 a, long b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator%(long a, long4x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator --(long4x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 operator ++(long4x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4x2_mt8 abs([This] long4x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 sign([This] long4x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 min([This] long4x2_mt8 a, long4x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 max([This] long4x2_mt8 a, long4x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 clamp([This] long4x2_mt8 v, long4x2_mt8 min, long4x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static long4x2_mt8 square([This] long4x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt8 fma([This] long4x2_mt8 a, long4x2_mt8 b, long4x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt8 fms([This] long4x2_mt8 a, long4x2_mt8 b, long4x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt8 fnma([This] long4x2_mt8 a, long4x2_mt8 b, long4x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt8 fsm([This] long4x2_mt8 c, long4x2_mt8 a, long4x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt8 fam([This] long4x2_mt8 c, long4x2_mt8 a, long4x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt8 mad([This] long4x2_mt8 a, long4x2_mt8 b, long4x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long2_mt8 csum([This] long4x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static long2_mt8 cmin([This] long4x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static long2_mt8 cmax([This] long4x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // long4x2_mt8

#region long4x2_mt16

public partial struct long4x2_mt16
{
    #region Constants

    public static long4x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long4x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator+(long4x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator-(long4x2_mt16 a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator+(long4x2_mt16 a, long4x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator-(long4x2_mt16 a, long4x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a long4x2_mt16 by long4x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator*(long4x2_mt16 a, long4x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a long4x2_mt16 by long_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator*(long4x2_mt16 a, long_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long4x2_mt16 by long4x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator*(long_mt16 a, long4x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a long4x2_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator*(long4x2_mt16 a, long b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long4x2_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator*(long a, long4x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator/(long4x2_mt16 a, long4x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator/(long4x2_mt16 a, long_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator/(long_mt16 a, long4x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator/(long4x2_mt16 a, long b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator/(long a, long4x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator%(long4x2_mt16 a, long4x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator%(long4x2_mt16 a, long_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator%(long_mt16 a, long4x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator%(long4x2_mt16 a, long b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator%(long a, long4x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator --(long4x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 operator ++(long4x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4x2_mt16 abs([This] long4x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 sign([This] long4x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 min([This] long4x2_mt16 a, long4x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 max([This] long4x2_mt16 a, long4x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 clamp([This] long4x2_mt16 v, long4x2_mt16 min, long4x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static long4x2_mt16 square([This] long4x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt16 fma([This] long4x2_mt16 a, long4x2_mt16 b, long4x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt16 fms([This] long4x2_mt16 a, long4x2_mt16 b, long4x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt16 fnma([This] long4x2_mt16 a, long4x2_mt16 b, long4x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt16 fsm([This] long4x2_mt16 c, long4x2_mt16 a, long4x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt16 fam([This] long4x2_mt16 c, long4x2_mt16 a, long4x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt16 mad([This] long4x2_mt16 a, long4x2_mt16 b, long4x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long2_mt16 csum([This] long4x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static long2_mt16 cmin([This] long4x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static long2_mt16 cmax([This] long4x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // long4x2_mt16

#region long4x3_mt4

public partial struct long4x3_mt4
{
    #region Constants

    public static long4x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long4x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator+(long4x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator-(long4x3_mt4 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator+(long4x3_mt4 a, long4x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator-(long4x3_mt4 a, long4x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a long4x3_mt4 by long4x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator*(long4x3_mt4 a, long4x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a long4x3_mt4 by long_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator*(long4x3_mt4 a, long_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long4x3_mt4 by long4x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator*(long_mt4 a, long4x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a long4x3_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator*(long4x3_mt4 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long4x3_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator*(long a, long4x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator/(long4x3_mt4 a, long4x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator/(long4x3_mt4 a, long_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator/(long_mt4 a, long4x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator/(long4x3_mt4 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator/(long a, long4x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator%(long4x3_mt4 a, long4x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator%(long4x3_mt4 a, long_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator%(long_mt4 a, long4x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator%(long4x3_mt4 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator%(long a, long4x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator --(long4x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 operator ++(long4x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4x3_mt4 abs([This] long4x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 sign([This] long4x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 min([This] long4x3_mt4 a, long4x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 max([This] long4x3_mt4 a, long4x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 clamp([This] long4x3_mt4 v, long4x3_mt4 min, long4x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static long4x3_mt4 square([This] long4x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt4 fma([This] long4x3_mt4 a, long4x3_mt4 b, long4x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt4 fms([This] long4x3_mt4 a, long4x3_mt4 b, long4x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt4 fnma([This] long4x3_mt4 a, long4x3_mt4 b, long4x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt4 fsm([This] long4x3_mt4 c, long4x3_mt4 a, long4x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt4 fam([This] long4x3_mt4 c, long4x3_mt4 a, long4x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt4 mad([This] long4x3_mt4 a, long4x3_mt4 b, long4x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long3_mt4 csum([This] long4x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static long3_mt4 cmin([This] long4x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static long3_mt4 cmax([This] long4x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // long4x3_mt4

#region long4x3_mt8

public partial struct long4x3_mt8
{
    #region Constants

    public static long4x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long4x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator+(long4x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator-(long4x3_mt8 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator+(long4x3_mt8 a, long4x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator-(long4x3_mt8 a, long4x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a long4x3_mt8 by long4x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator*(long4x3_mt8 a, long4x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a long4x3_mt8 by long_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator*(long4x3_mt8 a, long_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long4x3_mt8 by long4x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator*(long_mt8 a, long4x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a long4x3_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator*(long4x3_mt8 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long4x3_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator*(long a, long4x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator/(long4x3_mt8 a, long4x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator/(long4x3_mt8 a, long_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator/(long_mt8 a, long4x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator/(long4x3_mt8 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator/(long a, long4x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator%(long4x3_mt8 a, long4x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator%(long4x3_mt8 a, long_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator%(long_mt8 a, long4x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator%(long4x3_mt8 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator%(long a, long4x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator --(long4x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 operator ++(long4x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4x3_mt8 abs([This] long4x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 sign([This] long4x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 min([This] long4x3_mt8 a, long4x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 max([This] long4x3_mt8 a, long4x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 clamp([This] long4x3_mt8 v, long4x3_mt8 min, long4x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static long4x3_mt8 square([This] long4x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt8 fma([This] long4x3_mt8 a, long4x3_mt8 b, long4x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt8 fms([This] long4x3_mt8 a, long4x3_mt8 b, long4x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt8 fnma([This] long4x3_mt8 a, long4x3_mt8 b, long4x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt8 fsm([This] long4x3_mt8 c, long4x3_mt8 a, long4x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt8 fam([This] long4x3_mt8 c, long4x3_mt8 a, long4x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt8 mad([This] long4x3_mt8 a, long4x3_mt8 b, long4x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long3_mt8 csum([This] long4x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static long3_mt8 cmin([This] long4x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static long3_mt8 cmax([This] long4x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // long4x3_mt8

#region long4x3_mt16

public partial struct long4x3_mt16
{
    #region Constants

    public static long4x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long4x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator+(long4x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator-(long4x3_mt16 a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator+(long4x3_mt16 a, long4x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator-(long4x3_mt16 a, long4x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a long4x3_mt16 by long4x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator*(long4x3_mt16 a, long4x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a long4x3_mt16 by long_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator*(long4x3_mt16 a, long_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long4x3_mt16 by long4x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator*(long_mt16 a, long4x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a long4x3_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator*(long4x3_mt16 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long4x3_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator*(long a, long4x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator/(long4x3_mt16 a, long4x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator/(long4x3_mt16 a, long_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator/(long_mt16 a, long4x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator/(long4x3_mt16 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator/(long a, long4x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator%(long4x3_mt16 a, long4x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator%(long4x3_mt16 a, long_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator%(long_mt16 a, long4x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator%(long4x3_mt16 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator%(long a, long4x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator --(long4x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 operator ++(long4x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4x3_mt16 abs([This] long4x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 sign([This] long4x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 min([This] long4x3_mt16 a, long4x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 max([This] long4x3_mt16 a, long4x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 clamp([This] long4x3_mt16 v, long4x3_mt16 min, long4x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static long4x3_mt16 square([This] long4x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt16 fma([This] long4x3_mt16 a, long4x3_mt16 b, long4x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt16 fms([This] long4x3_mt16 a, long4x3_mt16 b, long4x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt16 fnma([This] long4x3_mt16 a, long4x3_mt16 b, long4x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt16 fsm([This] long4x3_mt16 c, long4x3_mt16 a, long4x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt16 fam([This] long4x3_mt16 c, long4x3_mt16 a, long4x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt16 mad([This] long4x3_mt16 a, long4x3_mt16 b, long4x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long3_mt16 csum([This] long4x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static long3_mt16 cmin([This] long4x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static long3_mt16 cmax([This] long4x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // long4x3_mt16

#region long4x4_mt4

public partial struct long4x4_mt4
{
    #region Constants

    public static long4x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long4x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator+(long4x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator-(long4x4_mt4 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator+(long4x4_mt4 a, long4x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator-(long4x4_mt4 a, long4x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a long4x4_mt4 by long4x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator*(long4x4_mt4 a, long4x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a long4x4_mt4 by long_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator*(long4x4_mt4 a, long_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long4x4_mt4 by long4x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator*(long_mt4 a, long4x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a long4x4_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator*(long4x4_mt4 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long4x4_mt4 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator*(long a, long4x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator/(long4x4_mt4 a, long4x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator/(long4x4_mt4 a, long_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator/(long_mt4 a, long4x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator/(long4x4_mt4 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator/(long a, long4x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator%(long4x4_mt4 a, long4x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator%(long4x4_mt4 a, long_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator%(long_mt4 a, long4x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator%(long4x4_mt4 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator%(long a, long4x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator --(long4x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 operator ++(long4x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4x4_mt4 abs([This] long4x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 sign([This] long4x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 min([This] long4x4_mt4 a, long4x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 max([This] long4x4_mt4 a, long4x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 clamp([This] long4x4_mt4 v, long4x4_mt4 min, long4x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static long4x4_mt4 square([This] long4x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt4 fma([This] long4x4_mt4 a, long4x4_mt4 b, long4x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt4 fms([This] long4x4_mt4 a, long4x4_mt4 b, long4x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt4 fnma([This] long4x4_mt4 a, long4x4_mt4 b, long4x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt4 fsm([This] long4x4_mt4 c, long4x4_mt4 a, long4x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt4 fam([This] long4x4_mt4 c, long4x4_mt4 a, long4x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt4 mad([This] long4x4_mt4 a, long4x4_mt4 b, long4x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long4_mt4 csum([This] long4x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static long4_mt4 cmin([This] long4x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static long4_mt4 cmax([This] long4x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // long4x4_mt4

#region long4x4_mt8

public partial struct long4x4_mt8
{
    #region Constants

    public static long4x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long4x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator+(long4x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator-(long4x4_mt8 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator+(long4x4_mt8 a, long4x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator-(long4x4_mt8 a, long4x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a long4x4_mt8 by long4x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator*(long4x4_mt8 a, long4x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a long4x4_mt8 by long_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator*(long4x4_mt8 a, long_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long4x4_mt8 by long4x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator*(long_mt8 a, long4x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a long4x4_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator*(long4x4_mt8 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long4x4_mt8 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator*(long a, long4x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator/(long4x4_mt8 a, long4x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator/(long4x4_mt8 a, long_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator/(long_mt8 a, long4x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator/(long4x4_mt8 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator/(long a, long4x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator%(long4x4_mt8 a, long4x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator%(long4x4_mt8 a, long_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator%(long_mt8 a, long4x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator%(long4x4_mt8 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator%(long a, long4x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator --(long4x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 operator ++(long4x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4x4_mt8 abs([This] long4x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 sign([This] long4x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 min([This] long4x4_mt8 a, long4x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 max([This] long4x4_mt8 a, long4x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 clamp([This] long4x4_mt8 v, long4x4_mt8 min, long4x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static long4x4_mt8 square([This] long4x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt8 fma([This] long4x4_mt8 a, long4x4_mt8 b, long4x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt8 fms([This] long4x4_mt8 a, long4x4_mt8 b, long4x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt8 fnma([This] long4x4_mt8 a, long4x4_mt8 b, long4x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt8 fsm([This] long4x4_mt8 c, long4x4_mt8 a, long4x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt8 fam([This] long4x4_mt8 c, long4x4_mt8 a, long4x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt8 mad([This] long4x4_mt8 a, long4x4_mt8 b, long4x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long4_mt8 csum([This] long4x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static long4_mt8 cmin([This] long4x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static long4_mt8 cmax([This] long4x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // long4x4_mt8

#region long4x4_mt16

public partial struct long4x4_mt16
{
    #region Constants

    public static long4x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long4x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator+(long4x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator-(long4x4_mt16 a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator+(long4x4_mt16 a, long4x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator-(long4x4_mt16 a, long4x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a long4x4_mt16 by long4x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator*(long4x4_mt16 a, long4x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a long4x4_mt16 by long_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator*(long4x4_mt16 a, long_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long4x4_mt16 by long4x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator*(long_mt16 a, long4x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a long4x4_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator*(long4x4_mt16 a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long4x4_mt16 by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator*(long a, long4x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator/(long4x4_mt16 a, long4x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator/(long4x4_mt16 a, long_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator/(long_mt16 a, long4x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator/(long4x4_mt16 a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator/(long a, long4x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator%(long4x4_mt16 a, long4x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator%(long4x4_mt16 a, long_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator%(long_mt16 a, long4x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator%(long4x4_mt16 a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator%(long a, long4x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator --(long4x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 operator ++(long4x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4x4_mt16 abs([This] long4x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 sign([This] long4x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 min([This] long4x4_mt16 a, long4x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 max([This] long4x4_mt16 a, long4x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 clamp([This] long4x4_mt16 v, long4x4_mt16 min, long4x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static long4x4_mt16 square([This] long4x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt16 fma([This] long4x4_mt16 a, long4x4_mt16 b, long4x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt16 fms([This] long4x4_mt16 a, long4x4_mt16 b, long4x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt16 fnma([This] long4x4_mt16 a, long4x4_mt16 b, long4x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt16 fsm([This] long4x4_mt16 c, long4x4_mt16 a, long4x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt16 fam([This] long4x4_mt16 c, long4x4_mt16 a, long4x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt16 mad([This] long4x4_mt16 a, long4x4_mt16 b, long4x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long4_mt16 csum([This] long4x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static long4_mt16 cmin([This] long4x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static long4_mt16 cmax([This] long4x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // long4x4_mt16

#region ulong2x2_mt4

public partial struct ulong2x2_mt4
{
    #region Constants

    public static ulong2x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong2x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator+(ulong2x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator+(ulong2x2_mt4 a, ulong2x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator-(ulong2x2_mt4 a, ulong2x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a ulong2x2_mt4 by ulong2x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator*(ulong2x2_mt4 a, ulong2x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a ulong2x2_mt4 by ulong_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator*(ulong2x2_mt4 a, ulong_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong2x2_mt4 by ulong2x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator*(ulong_mt4 a, ulong2x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a ulong2x2_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator*(ulong2x2_mt4 a, ulong b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong2x2_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator*(ulong a, ulong2x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator/(ulong2x2_mt4 a, ulong2x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator/(ulong2x2_mt4 a, ulong_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator/(ulong_mt4 a, ulong2x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator/(ulong2x2_mt4 a, ulong b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator/(ulong a, ulong2x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator%(ulong2x2_mt4 a, ulong2x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator%(ulong2x2_mt4 a, ulong_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator%(ulong_mt4 a, ulong2x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator%(ulong2x2_mt4 a, ulong b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator%(ulong a, ulong2x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator --(ulong2x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 operator ++(ulong2x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 abs([This] ulong2x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 sign([This] ulong2x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 min([This] ulong2x2_mt4 a, ulong2x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 max([This] ulong2x2_mt4 a, ulong2x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 clamp([This] ulong2x2_mt4 v, ulong2x2_mt4 min, ulong2x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 square([This] ulong2x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 fma([This] ulong2x2_mt4 a, ulong2x2_mt4 b, ulong2x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 fms([This] ulong2x2_mt4 a, ulong2x2_mt4 b, ulong2x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 fnma([This] ulong2x2_mt4 a, ulong2x2_mt4 b, ulong2x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 fsm([This] ulong2x2_mt4 c, ulong2x2_mt4 a, ulong2x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 fam([This] ulong2x2_mt4 c, ulong2x2_mt4 a, ulong2x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt4 mad([This] ulong2x2_mt4 a, ulong2x2_mt4 b, ulong2x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong2_mt4 csum([This] ulong2x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static ulong2_mt4 cmin([This] ulong2x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static ulong2_mt4 cmax([This] ulong2x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // ulong2x2_mt4

#region ulong2x2_mt8

public partial struct ulong2x2_mt8
{
    #region Constants

    public static ulong2x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong2x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator+(ulong2x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator+(ulong2x2_mt8 a, ulong2x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator-(ulong2x2_mt8 a, ulong2x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a ulong2x2_mt8 by ulong2x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator*(ulong2x2_mt8 a, ulong2x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a ulong2x2_mt8 by ulong_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator*(ulong2x2_mt8 a, ulong_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong2x2_mt8 by ulong2x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator*(ulong_mt8 a, ulong2x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a ulong2x2_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator*(ulong2x2_mt8 a, ulong b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong2x2_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator*(ulong a, ulong2x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator/(ulong2x2_mt8 a, ulong2x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator/(ulong2x2_mt8 a, ulong_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator/(ulong_mt8 a, ulong2x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator/(ulong2x2_mt8 a, ulong b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator/(ulong a, ulong2x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator%(ulong2x2_mt8 a, ulong2x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator%(ulong2x2_mt8 a, ulong_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator%(ulong_mt8 a, ulong2x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator%(ulong2x2_mt8 a, ulong b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator%(ulong a, ulong2x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator --(ulong2x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 operator ++(ulong2x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 abs([This] ulong2x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 sign([This] ulong2x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 min([This] ulong2x2_mt8 a, ulong2x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 max([This] ulong2x2_mt8 a, ulong2x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 clamp([This] ulong2x2_mt8 v, ulong2x2_mt8 min, ulong2x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 square([This] ulong2x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 fma([This] ulong2x2_mt8 a, ulong2x2_mt8 b, ulong2x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 fms([This] ulong2x2_mt8 a, ulong2x2_mt8 b, ulong2x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 fnma([This] ulong2x2_mt8 a, ulong2x2_mt8 b, ulong2x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 fsm([This] ulong2x2_mt8 c, ulong2x2_mt8 a, ulong2x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 fam([This] ulong2x2_mt8 c, ulong2x2_mt8 a, ulong2x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt8 mad([This] ulong2x2_mt8 a, ulong2x2_mt8 b, ulong2x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong2_mt8 csum([This] ulong2x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static ulong2_mt8 cmin([This] ulong2x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static ulong2_mt8 cmax([This] ulong2x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // ulong2x2_mt8

#region ulong2x2_mt16

public partial struct ulong2x2_mt16
{
    #region Constants

    public static ulong2x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong2x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator+(ulong2x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator+(ulong2x2_mt16 a, ulong2x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator-(ulong2x2_mt16 a, ulong2x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a ulong2x2_mt16 by ulong2x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator*(ulong2x2_mt16 a, ulong2x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a ulong2x2_mt16 by ulong_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator*(ulong2x2_mt16 a, ulong_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong2x2_mt16 by ulong2x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator*(ulong_mt16 a, ulong2x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a ulong2x2_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator*(ulong2x2_mt16 a, ulong b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong2x2_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator*(ulong a, ulong2x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator/(ulong2x2_mt16 a, ulong2x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator/(ulong2x2_mt16 a, ulong_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator/(ulong_mt16 a, ulong2x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator/(ulong2x2_mt16 a, ulong b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator/(ulong a, ulong2x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator%(ulong2x2_mt16 a, ulong2x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator%(ulong2x2_mt16 a, ulong_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator%(ulong_mt16 a, ulong2x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator%(ulong2x2_mt16 a, ulong b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator%(ulong a, ulong2x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator --(ulong2x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 operator ++(ulong2x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 abs([This] ulong2x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 sign([This] ulong2x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 min([This] ulong2x2_mt16 a, ulong2x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 max([This] ulong2x2_mt16 a, ulong2x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 clamp([This] ulong2x2_mt16 v, ulong2x2_mt16 min, ulong2x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 square([This] ulong2x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 fma([This] ulong2x2_mt16 a, ulong2x2_mt16 b, ulong2x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 fms([This] ulong2x2_mt16 a, ulong2x2_mt16 b, ulong2x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 fnma([This] ulong2x2_mt16 a, ulong2x2_mt16 b, ulong2x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 fsm([This] ulong2x2_mt16 c, ulong2x2_mt16 a, ulong2x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 fam([This] ulong2x2_mt16 c, ulong2x2_mt16 a, ulong2x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt16 mad([This] ulong2x2_mt16 a, ulong2x2_mt16 b, ulong2x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong2_mt16 csum([This] ulong2x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static ulong2_mt16 cmin([This] ulong2x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static ulong2_mt16 cmax([This] ulong2x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // ulong2x2_mt16

#region ulong2x3_mt4

public partial struct ulong2x3_mt4
{
    #region Constants

    public static ulong2x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong2x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator+(ulong2x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator+(ulong2x3_mt4 a, ulong2x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator-(ulong2x3_mt4 a, ulong2x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a ulong2x3_mt4 by ulong2x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator*(ulong2x3_mt4 a, ulong2x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a ulong2x3_mt4 by ulong_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator*(ulong2x3_mt4 a, ulong_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong2x3_mt4 by ulong2x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator*(ulong_mt4 a, ulong2x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a ulong2x3_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator*(ulong2x3_mt4 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong2x3_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator*(ulong a, ulong2x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator/(ulong2x3_mt4 a, ulong2x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator/(ulong2x3_mt4 a, ulong_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator/(ulong_mt4 a, ulong2x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator/(ulong2x3_mt4 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator/(ulong a, ulong2x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator%(ulong2x3_mt4 a, ulong2x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator%(ulong2x3_mt4 a, ulong_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator%(ulong_mt4 a, ulong2x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator%(ulong2x3_mt4 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator%(ulong a, ulong2x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator --(ulong2x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 operator ++(ulong2x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 abs([This] ulong2x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 sign([This] ulong2x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 min([This] ulong2x3_mt4 a, ulong2x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 max([This] ulong2x3_mt4 a, ulong2x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 clamp([This] ulong2x3_mt4 v, ulong2x3_mt4 min, ulong2x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 square([This] ulong2x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 fma([This] ulong2x3_mt4 a, ulong2x3_mt4 b, ulong2x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 fms([This] ulong2x3_mt4 a, ulong2x3_mt4 b, ulong2x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 fnma([This] ulong2x3_mt4 a, ulong2x3_mt4 b, ulong2x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 fsm([This] ulong2x3_mt4 c, ulong2x3_mt4 a, ulong2x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 fam([This] ulong2x3_mt4 c, ulong2x3_mt4 a, ulong2x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt4 mad([This] ulong2x3_mt4 a, ulong2x3_mt4 b, ulong2x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong3_mt4 csum([This] ulong2x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static ulong3_mt4 cmin([This] ulong2x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static ulong3_mt4 cmax([This] ulong2x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // ulong2x3_mt4

#region ulong2x3_mt8

public partial struct ulong2x3_mt8
{
    #region Constants

    public static ulong2x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong2x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator+(ulong2x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator+(ulong2x3_mt8 a, ulong2x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator-(ulong2x3_mt8 a, ulong2x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a ulong2x3_mt8 by ulong2x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator*(ulong2x3_mt8 a, ulong2x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a ulong2x3_mt8 by ulong_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator*(ulong2x3_mt8 a, ulong_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong2x3_mt8 by ulong2x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator*(ulong_mt8 a, ulong2x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a ulong2x3_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator*(ulong2x3_mt8 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong2x3_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator*(ulong a, ulong2x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator/(ulong2x3_mt8 a, ulong2x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator/(ulong2x3_mt8 a, ulong_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator/(ulong_mt8 a, ulong2x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator/(ulong2x3_mt8 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator/(ulong a, ulong2x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator%(ulong2x3_mt8 a, ulong2x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator%(ulong2x3_mt8 a, ulong_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator%(ulong_mt8 a, ulong2x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator%(ulong2x3_mt8 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator%(ulong a, ulong2x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator --(ulong2x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 operator ++(ulong2x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 abs([This] ulong2x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 sign([This] ulong2x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 min([This] ulong2x3_mt8 a, ulong2x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 max([This] ulong2x3_mt8 a, ulong2x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 clamp([This] ulong2x3_mt8 v, ulong2x3_mt8 min, ulong2x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 square([This] ulong2x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 fma([This] ulong2x3_mt8 a, ulong2x3_mt8 b, ulong2x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 fms([This] ulong2x3_mt8 a, ulong2x3_mt8 b, ulong2x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 fnma([This] ulong2x3_mt8 a, ulong2x3_mt8 b, ulong2x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 fsm([This] ulong2x3_mt8 c, ulong2x3_mt8 a, ulong2x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 fam([This] ulong2x3_mt8 c, ulong2x3_mt8 a, ulong2x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt8 mad([This] ulong2x3_mt8 a, ulong2x3_mt8 b, ulong2x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong3_mt8 csum([This] ulong2x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static ulong3_mt8 cmin([This] ulong2x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static ulong3_mt8 cmax([This] ulong2x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // ulong2x3_mt8

#region ulong2x3_mt16

public partial struct ulong2x3_mt16
{
    #region Constants

    public static ulong2x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong2x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator+(ulong2x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator+(ulong2x3_mt16 a, ulong2x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator-(ulong2x3_mt16 a, ulong2x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a ulong2x3_mt16 by ulong2x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator*(ulong2x3_mt16 a, ulong2x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a ulong2x3_mt16 by ulong_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator*(ulong2x3_mt16 a, ulong_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong2x3_mt16 by ulong2x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator*(ulong_mt16 a, ulong2x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a ulong2x3_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator*(ulong2x3_mt16 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong2x3_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator*(ulong a, ulong2x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator/(ulong2x3_mt16 a, ulong2x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator/(ulong2x3_mt16 a, ulong_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator/(ulong_mt16 a, ulong2x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator/(ulong2x3_mt16 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator/(ulong a, ulong2x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator%(ulong2x3_mt16 a, ulong2x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator%(ulong2x3_mt16 a, ulong_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator%(ulong_mt16 a, ulong2x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator%(ulong2x3_mt16 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator%(ulong a, ulong2x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator --(ulong2x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 operator ++(ulong2x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 abs([This] ulong2x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 sign([This] ulong2x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 min([This] ulong2x3_mt16 a, ulong2x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 max([This] ulong2x3_mt16 a, ulong2x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 clamp([This] ulong2x3_mt16 v, ulong2x3_mt16 min, ulong2x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 square([This] ulong2x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 fma([This] ulong2x3_mt16 a, ulong2x3_mt16 b, ulong2x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 fms([This] ulong2x3_mt16 a, ulong2x3_mt16 b, ulong2x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 fnma([This] ulong2x3_mt16 a, ulong2x3_mt16 b, ulong2x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 fsm([This] ulong2x3_mt16 c, ulong2x3_mt16 a, ulong2x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 fam([This] ulong2x3_mt16 c, ulong2x3_mt16 a, ulong2x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt16 mad([This] ulong2x3_mt16 a, ulong2x3_mt16 b, ulong2x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong3_mt16 csum([This] ulong2x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static ulong3_mt16 cmin([This] ulong2x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static ulong3_mt16 cmax([This] ulong2x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // ulong2x3_mt16

#region ulong2x4_mt4

public partial struct ulong2x4_mt4
{
    #region Constants

    public static ulong2x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong2x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator+(ulong2x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator+(ulong2x4_mt4 a, ulong2x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator-(ulong2x4_mt4 a, ulong2x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a ulong2x4_mt4 by ulong2x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator*(ulong2x4_mt4 a, ulong2x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a ulong2x4_mt4 by ulong_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator*(ulong2x4_mt4 a, ulong_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong2x4_mt4 by ulong2x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator*(ulong_mt4 a, ulong2x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a ulong2x4_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator*(ulong2x4_mt4 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong2x4_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator*(ulong a, ulong2x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator/(ulong2x4_mt4 a, ulong2x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator/(ulong2x4_mt4 a, ulong_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator/(ulong_mt4 a, ulong2x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator/(ulong2x4_mt4 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator/(ulong a, ulong2x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator%(ulong2x4_mt4 a, ulong2x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator%(ulong2x4_mt4 a, ulong_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator%(ulong_mt4 a, ulong2x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator%(ulong2x4_mt4 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator%(ulong a, ulong2x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator --(ulong2x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 operator ++(ulong2x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 abs([This] ulong2x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 sign([This] ulong2x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 min([This] ulong2x4_mt4 a, ulong2x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 max([This] ulong2x4_mt4 a, ulong2x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 clamp([This] ulong2x4_mt4 v, ulong2x4_mt4 min, ulong2x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 square([This] ulong2x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 fma([This] ulong2x4_mt4 a, ulong2x4_mt4 b, ulong2x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 fms([This] ulong2x4_mt4 a, ulong2x4_mt4 b, ulong2x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 fnma([This] ulong2x4_mt4 a, ulong2x4_mt4 b, ulong2x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 fsm([This] ulong2x4_mt4 c, ulong2x4_mt4 a, ulong2x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 fam([This] ulong2x4_mt4 c, ulong2x4_mt4 a, ulong2x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt4 mad([This] ulong2x4_mt4 a, ulong2x4_mt4 b, ulong2x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong4_mt4 csum([This] ulong2x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static ulong4_mt4 cmin([This] ulong2x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static ulong4_mt4 cmax([This] ulong2x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // ulong2x4_mt4

#region ulong2x4_mt8

public partial struct ulong2x4_mt8
{
    #region Constants

    public static ulong2x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong2x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator+(ulong2x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator+(ulong2x4_mt8 a, ulong2x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator-(ulong2x4_mt8 a, ulong2x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a ulong2x4_mt8 by ulong2x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator*(ulong2x4_mt8 a, ulong2x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a ulong2x4_mt8 by ulong_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator*(ulong2x4_mt8 a, ulong_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong2x4_mt8 by ulong2x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator*(ulong_mt8 a, ulong2x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a ulong2x4_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator*(ulong2x4_mt8 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong2x4_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator*(ulong a, ulong2x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator/(ulong2x4_mt8 a, ulong2x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator/(ulong2x4_mt8 a, ulong_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator/(ulong_mt8 a, ulong2x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator/(ulong2x4_mt8 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator/(ulong a, ulong2x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator%(ulong2x4_mt8 a, ulong2x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator%(ulong2x4_mt8 a, ulong_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator%(ulong_mt8 a, ulong2x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator%(ulong2x4_mt8 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator%(ulong a, ulong2x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator --(ulong2x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 operator ++(ulong2x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 abs([This] ulong2x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 sign([This] ulong2x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 min([This] ulong2x4_mt8 a, ulong2x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 max([This] ulong2x4_mt8 a, ulong2x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 clamp([This] ulong2x4_mt8 v, ulong2x4_mt8 min, ulong2x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 square([This] ulong2x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 fma([This] ulong2x4_mt8 a, ulong2x4_mt8 b, ulong2x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 fms([This] ulong2x4_mt8 a, ulong2x4_mt8 b, ulong2x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 fnma([This] ulong2x4_mt8 a, ulong2x4_mt8 b, ulong2x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 fsm([This] ulong2x4_mt8 c, ulong2x4_mt8 a, ulong2x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 fam([This] ulong2x4_mt8 c, ulong2x4_mt8 a, ulong2x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt8 mad([This] ulong2x4_mt8 a, ulong2x4_mt8 b, ulong2x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong4_mt8 csum([This] ulong2x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static ulong4_mt8 cmin([This] ulong2x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static ulong4_mt8 cmax([This] ulong2x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // ulong2x4_mt8

#region ulong2x4_mt16

public partial struct ulong2x4_mt16
{
    #region Constants

    public static ulong2x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong2x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator+(ulong2x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator+(ulong2x4_mt16 a, ulong2x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator-(ulong2x4_mt16 a, ulong2x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a ulong2x4_mt16 by ulong2x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator*(ulong2x4_mt16 a, ulong2x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a ulong2x4_mt16 by ulong_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator*(ulong2x4_mt16 a, ulong_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong2x4_mt16 by ulong2x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator*(ulong_mt16 a, ulong2x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a ulong2x4_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator*(ulong2x4_mt16 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong2x4_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator*(ulong a, ulong2x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator/(ulong2x4_mt16 a, ulong2x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator/(ulong2x4_mt16 a, ulong_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator/(ulong_mt16 a, ulong2x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator/(ulong2x4_mt16 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator/(ulong a, ulong2x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator%(ulong2x4_mt16 a, ulong2x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator%(ulong2x4_mt16 a, ulong_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator%(ulong_mt16 a, ulong2x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator%(ulong2x4_mt16 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator%(ulong a, ulong2x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator --(ulong2x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 operator ++(ulong2x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 abs([This] ulong2x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 sign([This] ulong2x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 min([This] ulong2x4_mt16 a, ulong2x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 max([This] ulong2x4_mt16 a, ulong2x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 clamp([This] ulong2x4_mt16 v, ulong2x4_mt16 min, ulong2x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 square([This] ulong2x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 fma([This] ulong2x4_mt16 a, ulong2x4_mt16 b, ulong2x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 fms([This] ulong2x4_mt16 a, ulong2x4_mt16 b, ulong2x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 fnma([This] ulong2x4_mt16 a, ulong2x4_mt16 b, ulong2x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 fsm([This] ulong2x4_mt16 c, ulong2x4_mt16 a, ulong2x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 fam([This] ulong2x4_mt16 c, ulong2x4_mt16 a, ulong2x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt16 mad([This] ulong2x4_mt16 a, ulong2x4_mt16 b, ulong2x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong4_mt16 csum([This] ulong2x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static ulong4_mt16 cmin([This] ulong2x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static ulong4_mt16 cmax([This] ulong2x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // ulong2x4_mt16

#region ulong3x2_mt4

public partial struct ulong3x2_mt4
{
    #region Constants

    public static ulong3x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong3x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator+(ulong3x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator+(ulong3x2_mt4 a, ulong3x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator-(ulong3x2_mt4 a, ulong3x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a ulong3x2_mt4 by ulong3x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator*(ulong3x2_mt4 a, ulong3x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a ulong3x2_mt4 by ulong_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator*(ulong3x2_mt4 a, ulong_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong3x2_mt4 by ulong3x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator*(ulong_mt4 a, ulong3x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a ulong3x2_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator*(ulong3x2_mt4 a, ulong b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong3x2_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator*(ulong a, ulong3x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator/(ulong3x2_mt4 a, ulong3x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator/(ulong3x2_mt4 a, ulong_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator/(ulong_mt4 a, ulong3x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator/(ulong3x2_mt4 a, ulong b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator/(ulong a, ulong3x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator%(ulong3x2_mt4 a, ulong3x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator%(ulong3x2_mt4 a, ulong_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator%(ulong_mt4 a, ulong3x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator%(ulong3x2_mt4 a, ulong b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator%(ulong a, ulong3x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator --(ulong3x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 operator ++(ulong3x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 abs([This] ulong3x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 sign([This] ulong3x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 min([This] ulong3x2_mt4 a, ulong3x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 max([This] ulong3x2_mt4 a, ulong3x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 clamp([This] ulong3x2_mt4 v, ulong3x2_mt4 min, ulong3x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 square([This] ulong3x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 fma([This] ulong3x2_mt4 a, ulong3x2_mt4 b, ulong3x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 fms([This] ulong3x2_mt4 a, ulong3x2_mt4 b, ulong3x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 fnma([This] ulong3x2_mt4 a, ulong3x2_mt4 b, ulong3x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 fsm([This] ulong3x2_mt4 c, ulong3x2_mt4 a, ulong3x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 fam([This] ulong3x2_mt4 c, ulong3x2_mt4 a, ulong3x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt4 mad([This] ulong3x2_mt4 a, ulong3x2_mt4 b, ulong3x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong2_mt4 csum([This] ulong3x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static ulong2_mt4 cmin([This] ulong3x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static ulong2_mt4 cmax([This] ulong3x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // ulong3x2_mt4

#region ulong3x2_mt8

public partial struct ulong3x2_mt8
{
    #region Constants

    public static ulong3x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong3x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator+(ulong3x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator+(ulong3x2_mt8 a, ulong3x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator-(ulong3x2_mt8 a, ulong3x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a ulong3x2_mt8 by ulong3x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator*(ulong3x2_mt8 a, ulong3x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a ulong3x2_mt8 by ulong_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator*(ulong3x2_mt8 a, ulong_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong3x2_mt8 by ulong3x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator*(ulong_mt8 a, ulong3x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a ulong3x2_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator*(ulong3x2_mt8 a, ulong b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong3x2_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator*(ulong a, ulong3x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator/(ulong3x2_mt8 a, ulong3x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator/(ulong3x2_mt8 a, ulong_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator/(ulong_mt8 a, ulong3x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator/(ulong3x2_mt8 a, ulong b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator/(ulong a, ulong3x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator%(ulong3x2_mt8 a, ulong3x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator%(ulong3x2_mt8 a, ulong_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator%(ulong_mt8 a, ulong3x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator%(ulong3x2_mt8 a, ulong b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator%(ulong a, ulong3x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator --(ulong3x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 operator ++(ulong3x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 abs([This] ulong3x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 sign([This] ulong3x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 min([This] ulong3x2_mt8 a, ulong3x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 max([This] ulong3x2_mt8 a, ulong3x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 clamp([This] ulong3x2_mt8 v, ulong3x2_mt8 min, ulong3x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 square([This] ulong3x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 fma([This] ulong3x2_mt8 a, ulong3x2_mt8 b, ulong3x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 fms([This] ulong3x2_mt8 a, ulong3x2_mt8 b, ulong3x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 fnma([This] ulong3x2_mt8 a, ulong3x2_mt8 b, ulong3x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 fsm([This] ulong3x2_mt8 c, ulong3x2_mt8 a, ulong3x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 fam([This] ulong3x2_mt8 c, ulong3x2_mt8 a, ulong3x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt8 mad([This] ulong3x2_mt8 a, ulong3x2_mt8 b, ulong3x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong2_mt8 csum([This] ulong3x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static ulong2_mt8 cmin([This] ulong3x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static ulong2_mt8 cmax([This] ulong3x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // ulong3x2_mt8

#region ulong3x2_mt16

public partial struct ulong3x2_mt16
{
    #region Constants

    public static ulong3x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong3x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator+(ulong3x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator+(ulong3x2_mt16 a, ulong3x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator-(ulong3x2_mt16 a, ulong3x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a ulong3x2_mt16 by ulong3x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator*(ulong3x2_mt16 a, ulong3x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a ulong3x2_mt16 by ulong_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator*(ulong3x2_mt16 a, ulong_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong3x2_mt16 by ulong3x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator*(ulong_mt16 a, ulong3x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a ulong3x2_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator*(ulong3x2_mt16 a, ulong b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong3x2_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator*(ulong a, ulong3x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator/(ulong3x2_mt16 a, ulong3x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator/(ulong3x2_mt16 a, ulong_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator/(ulong_mt16 a, ulong3x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator/(ulong3x2_mt16 a, ulong b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator/(ulong a, ulong3x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator%(ulong3x2_mt16 a, ulong3x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator%(ulong3x2_mt16 a, ulong_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator%(ulong_mt16 a, ulong3x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator%(ulong3x2_mt16 a, ulong b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator%(ulong a, ulong3x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator --(ulong3x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 operator ++(ulong3x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 abs([This] ulong3x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 sign([This] ulong3x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 min([This] ulong3x2_mt16 a, ulong3x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 max([This] ulong3x2_mt16 a, ulong3x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 clamp([This] ulong3x2_mt16 v, ulong3x2_mt16 min, ulong3x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 square([This] ulong3x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 fma([This] ulong3x2_mt16 a, ulong3x2_mt16 b, ulong3x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 fms([This] ulong3x2_mt16 a, ulong3x2_mt16 b, ulong3x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 fnma([This] ulong3x2_mt16 a, ulong3x2_mt16 b, ulong3x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 fsm([This] ulong3x2_mt16 c, ulong3x2_mt16 a, ulong3x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 fam([This] ulong3x2_mt16 c, ulong3x2_mt16 a, ulong3x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt16 mad([This] ulong3x2_mt16 a, ulong3x2_mt16 b, ulong3x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong2_mt16 csum([This] ulong3x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static ulong2_mt16 cmin([This] ulong3x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static ulong2_mt16 cmax([This] ulong3x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // ulong3x2_mt16

#region ulong3x3_mt4

public partial struct ulong3x3_mt4
{
    #region Constants

    public static ulong3x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong3x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator+(ulong3x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator+(ulong3x3_mt4 a, ulong3x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator-(ulong3x3_mt4 a, ulong3x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a ulong3x3_mt4 by ulong3x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator*(ulong3x3_mt4 a, ulong3x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a ulong3x3_mt4 by ulong_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator*(ulong3x3_mt4 a, ulong_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong3x3_mt4 by ulong3x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator*(ulong_mt4 a, ulong3x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a ulong3x3_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator*(ulong3x3_mt4 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong3x3_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator*(ulong a, ulong3x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator/(ulong3x3_mt4 a, ulong3x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator/(ulong3x3_mt4 a, ulong_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator/(ulong_mt4 a, ulong3x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator/(ulong3x3_mt4 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator/(ulong a, ulong3x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator%(ulong3x3_mt4 a, ulong3x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator%(ulong3x3_mt4 a, ulong_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator%(ulong_mt4 a, ulong3x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator%(ulong3x3_mt4 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator%(ulong a, ulong3x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator --(ulong3x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 operator ++(ulong3x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 abs([This] ulong3x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 sign([This] ulong3x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 min([This] ulong3x3_mt4 a, ulong3x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 max([This] ulong3x3_mt4 a, ulong3x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 clamp([This] ulong3x3_mt4 v, ulong3x3_mt4 min, ulong3x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 square([This] ulong3x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 fma([This] ulong3x3_mt4 a, ulong3x3_mt4 b, ulong3x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 fms([This] ulong3x3_mt4 a, ulong3x3_mt4 b, ulong3x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 fnma([This] ulong3x3_mt4 a, ulong3x3_mt4 b, ulong3x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 fsm([This] ulong3x3_mt4 c, ulong3x3_mt4 a, ulong3x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 fam([This] ulong3x3_mt4 c, ulong3x3_mt4 a, ulong3x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt4 mad([This] ulong3x3_mt4 a, ulong3x3_mt4 b, ulong3x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong3_mt4 csum([This] ulong3x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static ulong3_mt4 cmin([This] ulong3x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static ulong3_mt4 cmax([This] ulong3x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // ulong3x3_mt4

#region ulong3x3_mt8

public partial struct ulong3x3_mt8
{
    #region Constants

    public static ulong3x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong3x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator+(ulong3x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator+(ulong3x3_mt8 a, ulong3x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator-(ulong3x3_mt8 a, ulong3x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a ulong3x3_mt8 by ulong3x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator*(ulong3x3_mt8 a, ulong3x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a ulong3x3_mt8 by ulong_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator*(ulong3x3_mt8 a, ulong_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong3x3_mt8 by ulong3x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator*(ulong_mt8 a, ulong3x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a ulong3x3_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator*(ulong3x3_mt8 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong3x3_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator*(ulong a, ulong3x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator/(ulong3x3_mt8 a, ulong3x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator/(ulong3x3_mt8 a, ulong_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator/(ulong_mt8 a, ulong3x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator/(ulong3x3_mt8 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator/(ulong a, ulong3x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator%(ulong3x3_mt8 a, ulong3x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator%(ulong3x3_mt8 a, ulong_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator%(ulong_mt8 a, ulong3x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator%(ulong3x3_mt8 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator%(ulong a, ulong3x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator --(ulong3x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 operator ++(ulong3x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 abs([This] ulong3x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 sign([This] ulong3x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 min([This] ulong3x3_mt8 a, ulong3x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 max([This] ulong3x3_mt8 a, ulong3x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 clamp([This] ulong3x3_mt8 v, ulong3x3_mt8 min, ulong3x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 square([This] ulong3x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 fma([This] ulong3x3_mt8 a, ulong3x3_mt8 b, ulong3x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 fms([This] ulong3x3_mt8 a, ulong3x3_mt8 b, ulong3x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 fnma([This] ulong3x3_mt8 a, ulong3x3_mt8 b, ulong3x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 fsm([This] ulong3x3_mt8 c, ulong3x3_mt8 a, ulong3x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 fam([This] ulong3x3_mt8 c, ulong3x3_mt8 a, ulong3x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt8 mad([This] ulong3x3_mt8 a, ulong3x3_mt8 b, ulong3x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong3_mt8 csum([This] ulong3x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static ulong3_mt8 cmin([This] ulong3x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static ulong3_mt8 cmax([This] ulong3x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // ulong3x3_mt8

#region ulong3x3_mt16

public partial struct ulong3x3_mt16
{
    #region Constants

    public static ulong3x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong3x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator+(ulong3x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator+(ulong3x3_mt16 a, ulong3x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator-(ulong3x3_mt16 a, ulong3x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a ulong3x3_mt16 by ulong3x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator*(ulong3x3_mt16 a, ulong3x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a ulong3x3_mt16 by ulong_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator*(ulong3x3_mt16 a, ulong_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong3x3_mt16 by ulong3x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator*(ulong_mt16 a, ulong3x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a ulong3x3_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator*(ulong3x3_mt16 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong3x3_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator*(ulong a, ulong3x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator/(ulong3x3_mt16 a, ulong3x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator/(ulong3x3_mt16 a, ulong_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator/(ulong_mt16 a, ulong3x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator/(ulong3x3_mt16 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator/(ulong a, ulong3x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator%(ulong3x3_mt16 a, ulong3x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator%(ulong3x3_mt16 a, ulong_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator%(ulong_mt16 a, ulong3x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator%(ulong3x3_mt16 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator%(ulong a, ulong3x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator --(ulong3x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 operator ++(ulong3x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 abs([This] ulong3x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 sign([This] ulong3x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 min([This] ulong3x3_mt16 a, ulong3x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 max([This] ulong3x3_mt16 a, ulong3x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 clamp([This] ulong3x3_mt16 v, ulong3x3_mt16 min, ulong3x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 square([This] ulong3x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 fma([This] ulong3x3_mt16 a, ulong3x3_mt16 b, ulong3x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 fms([This] ulong3x3_mt16 a, ulong3x3_mt16 b, ulong3x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 fnma([This] ulong3x3_mt16 a, ulong3x3_mt16 b, ulong3x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 fsm([This] ulong3x3_mt16 c, ulong3x3_mt16 a, ulong3x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 fam([This] ulong3x3_mt16 c, ulong3x3_mt16 a, ulong3x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt16 mad([This] ulong3x3_mt16 a, ulong3x3_mt16 b, ulong3x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong3_mt16 csum([This] ulong3x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static ulong3_mt16 cmin([This] ulong3x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static ulong3_mt16 cmax([This] ulong3x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // ulong3x3_mt16

#region ulong3x4_mt4

public partial struct ulong3x4_mt4
{
    #region Constants

    public static ulong3x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong3x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator+(ulong3x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator+(ulong3x4_mt4 a, ulong3x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator-(ulong3x4_mt4 a, ulong3x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a ulong3x4_mt4 by ulong3x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator*(ulong3x4_mt4 a, ulong3x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a ulong3x4_mt4 by ulong_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator*(ulong3x4_mt4 a, ulong_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong3x4_mt4 by ulong3x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator*(ulong_mt4 a, ulong3x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a ulong3x4_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator*(ulong3x4_mt4 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong3x4_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator*(ulong a, ulong3x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator/(ulong3x4_mt4 a, ulong3x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator/(ulong3x4_mt4 a, ulong_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator/(ulong_mt4 a, ulong3x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator/(ulong3x4_mt4 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator/(ulong a, ulong3x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator%(ulong3x4_mt4 a, ulong3x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator%(ulong3x4_mt4 a, ulong_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator%(ulong_mt4 a, ulong3x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator%(ulong3x4_mt4 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator%(ulong a, ulong3x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator --(ulong3x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 operator ++(ulong3x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 abs([This] ulong3x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 sign([This] ulong3x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 min([This] ulong3x4_mt4 a, ulong3x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 max([This] ulong3x4_mt4 a, ulong3x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 clamp([This] ulong3x4_mt4 v, ulong3x4_mt4 min, ulong3x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 square([This] ulong3x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 fma([This] ulong3x4_mt4 a, ulong3x4_mt4 b, ulong3x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 fms([This] ulong3x4_mt4 a, ulong3x4_mt4 b, ulong3x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 fnma([This] ulong3x4_mt4 a, ulong3x4_mt4 b, ulong3x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 fsm([This] ulong3x4_mt4 c, ulong3x4_mt4 a, ulong3x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 fam([This] ulong3x4_mt4 c, ulong3x4_mt4 a, ulong3x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt4 mad([This] ulong3x4_mt4 a, ulong3x4_mt4 b, ulong3x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong4_mt4 csum([This] ulong3x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static ulong4_mt4 cmin([This] ulong3x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static ulong4_mt4 cmax([This] ulong3x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // ulong3x4_mt4

#region ulong3x4_mt8

public partial struct ulong3x4_mt8
{
    #region Constants

    public static ulong3x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong3x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator+(ulong3x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator+(ulong3x4_mt8 a, ulong3x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator-(ulong3x4_mt8 a, ulong3x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a ulong3x4_mt8 by ulong3x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator*(ulong3x4_mt8 a, ulong3x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a ulong3x4_mt8 by ulong_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator*(ulong3x4_mt8 a, ulong_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong3x4_mt8 by ulong3x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator*(ulong_mt8 a, ulong3x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a ulong3x4_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator*(ulong3x4_mt8 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong3x4_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator*(ulong a, ulong3x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator/(ulong3x4_mt8 a, ulong3x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator/(ulong3x4_mt8 a, ulong_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator/(ulong_mt8 a, ulong3x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator/(ulong3x4_mt8 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator/(ulong a, ulong3x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator%(ulong3x4_mt8 a, ulong3x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator%(ulong3x4_mt8 a, ulong_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator%(ulong_mt8 a, ulong3x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator%(ulong3x4_mt8 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator%(ulong a, ulong3x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator --(ulong3x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 operator ++(ulong3x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 abs([This] ulong3x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 sign([This] ulong3x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 min([This] ulong3x4_mt8 a, ulong3x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 max([This] ulong3x4_mt8 a, ulong3x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 clamp([This] ulong3x4_mt8 v, ulong3x4_mt8 min, ulong3x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 square([This] ulong3x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 fma([This] ulong3x4_mt8 a, ulong3x4_mt8 b, ulong3x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 fms([This] ulong3x4_mt8 a, ulong3x4_mt8 b, ulong3x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 fnma([This] ulong3x4_mt8 a, ulong3x4_mt8 b, ulong3x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 fsm([This] ulong3x4_mt8 c, ulong3x4_mt8 a, ulong3x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 fam([This] ulong3x4_mt8 c, ulong3x4_mt8 a, ulong3x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt8 mad([This] ulong3x4_mt8 a, ulong3x4_mt8 b, ulong3x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong4_mt8 csum([This] ulong3x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static ulong4_mt8 cmin([This] ulong3x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static ulong4_mt8 cmax([This] ulong3x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // ulong3x4_mt8

#region ulong3x4_mt16

public partial struct ulong3x4_mt16
{
    #region Constants

    public static ulong3x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong3x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator+(ulong3x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator+(ulong3x4_mt16 a, ulong3x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator-(ulong3x4_mt16 a, ulong3x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a ulong3x4_mt16 by ulong3x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator*(ulong3x4_mt16 a, ulong3x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a ulong3x4_mt16 by ulong_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator*(ulong3x4_mt16 a, ulong_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong3x4_mt16 by ulong3x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator*(ulong_mt16 a, ulong3x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a ulong3x4_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator*(ulong3x4_mt16 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong3x4_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator*(ulong a, ulong3x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator/(ulong3x4_mt16 a, ulong3x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator/(ulong3x4_mt16 a, ulong_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator/(ulong_mt16 a, ulong3x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator/(ulong3x4_mt16 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator/(ulong a, ulong3x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator%(ulong3x4_mt16 a, ulong3x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator%(ulong3x4_mt16 a, ulong_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator%(ulong_mt16 a, ulong3x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator%(ulong3x4_mt16 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator%(ulong a, ulong3x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator --(ulong3x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 operator ++(ulong3x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 abs([This] ulong3x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 sign([This] ulong3x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 min([This] ulong3x4_mt16 a, ulong3x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 max([This] ulong3x4_mt16 a, ulong3x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 clamp([This] ulong3x4_mt16 v, ulong3x4_mt16 min, ulong3x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 square([This] ulong3x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 fma([This] ulong3x4_mt16 a, ulong3x4_mt16 b, ulong3x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 fms([This] ulong3x4_mt16 a, ulong3x4_mt16 b, ulong3x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 fnma([This] ulong3x4_mt16 a, ulong3x4_mt16 b, ulong3x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 fsm([This] ulong3x4_mt16 c, ulong3x4_mt16 a, ulong3x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 fam([This] ulong3x4_mt16 c, ulong3x4_mt16 a, ulong3x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt16 mad([This] ulong3x4_mt16 a, ulong3x4_mt16 b, ulong3x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong4_mt16 csum([This] ulong3x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static ulong4_mt16 cmin([This] ulong3x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static ulong4_mt16 cmax([This] ulong3x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // ulong3x4_mt16

#region ulong4x2_mt4

public partial struct ulong4x2_mt4
{
    #region Constants

    public static ulong4x2_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong4x2_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator+(ulong4x2_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator+(ulong4x2_mt4 a, ulong4x2_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator-(ulong4x2_mt4 a, ulong4x2_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a ulong4x2_mt4 by ulong4x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator*(ulong4x2_mt4 a, ulong4x2_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a ulong4x2_mt4 by ulong_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator*(ulong4x2_mt4 a, ulong_mt4 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong4x2_mt4 by ulong4x2_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator*(ulong_mt4 a, ulong4x2_mt4 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a ulong4x2_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator*(ulong4x2_mt4 a, ulong b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong4x2_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator*(ulong a, ulong4x2_mt4 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator/(ulong4x2_mt4 a, ulong4x2_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator/(ulong4x2_mt4 a, ulong_mt4 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator/(ulong_mt4 a, ulong4x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator/(ulong4x2_mt4 a, ulong b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator/(ulong a, ulong4x2_mt4 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator%(ulong4x2_mt4 a, ulong4x2_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator%(ulong4x2_mt4 a, ulong_mt4 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator%(ulong_mt4 a, ulong4x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator%(ulong4x2_mt4 a, ulong b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator%(ulong a, ulong4x2_mt4 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator --(ulong4x2_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 operator ++(ulong4x2_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 abs([This] ulong4x2_mt4 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 sign([This] ulong4x2_mt4 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 min([This] ulong4x2_mt4 a, ulong4x2_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 max([This] ulong4x2_mt4 a, ulong4x2_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 clamp([This] ulong4x2_mt4 v, ulong4x2_mt4 min, ulong4x2_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 square([This] ulong4x2_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 fma([This] ulong4x2_mt4 a, ulong4x2_mt4 b, ulong4x2_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 fms([This] ulong4x2_mt4 a, ulong4x2_mt4 b, ulong4x2_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 fnma([This] ulong4x2_mt4 a, ulong4x2_mt4 b, ulong4x2_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 fsm([This] ulong4x2_mt4 c, ulong4x2_mt4 a, ulong4x2_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 fam([This] ulong4x2_mt4 c, ulong4x2_mt4 a, ulong4x2_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt4 mad([This] ulong4x2_mt4 a, ulong4x2_mt4 b, ulong4x2_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong2_mt4 csum([This] ulong4x2_mt4 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static ulong2_mt4 cmin([This] ulong4x2_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static ulong2_mt4 cmax([This] ulong4x2_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // ulong4x2_mt4

#region ulong4x2_mt8

public partial struct ulong4x2_mt8
{
    #region Constants

    public static ulong4x2_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong4x2_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator+(ulong4x2_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator+(ulong4x2_mt8 a, ulong4x2_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator-(ulong4x2_mt8 a, ulong4x2_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a ulong4x2_mt8 by ulong4x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator*(ulong4x2_mt8 a, ulong4x2_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a ulong4x2_mt8 by ulong_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator*(ulong4x2_mt8 a, ulong_mt8 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong4x2_mt8 by ulong4x2_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator*(ulong_mt8 a, ulong4x2_mt8 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a ulong4x2_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator*(ulong4x2_mt8 a, ulong b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong4x2_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator*(ulong a, ulong4x2_mt8 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator/(ulong4x2_mt8 a, ulong4x2_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator/(ulong4x2_mt8 a, ulong_mt8 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator/(ulong_mt8 a, ulong4x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator/(ulong4x2_mt8 a, ulong b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator/(ulong a, ulong4x2_mt8 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator%(ulong4x2_mt8 a, ulong4x2_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator%(ulong4x2_mt8 a, ulong_mt8 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator%(ulong_mt8 a, ulong4x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator%(ulong4x2_mt8 a, ulong b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator%(ulong a, ulong4x2_mt8 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator --(ulong4x2_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 operator ++(ulong4x2_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 abs([This] ulong4x2_mt8 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 sign([This] ulong4x2_mt8 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 min([This] ulong4x2_mt8 a, ulong4x2_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 max([This] ulong4x2_mt8 a, ulong4x2_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 clamp([This] ulong4x2_mt8 v, ulong4x2_mt8 min, ulong4x2_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 square([This] ulong4x2_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 fma([This] ulong4x2_mt8 a, ulong4x2_mt8 b, ulong4x2_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 fms([This] ulong4x2_mt8 a, ulong4x2_mt8 b, ulong4x2_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 fnma([This] ulong4x2_mt8 a, ulong4x2_mt8 b, ulong4x2_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 fsm([This] ulong4x2_mt8 c, ulong4x2_mt8 a, ulong4x2_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 fam([This] ulong4x2_mt8 c, ulong4x2_mt8 a, ulong4x2_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt8 mad([This] ulong4x2_mt8 a, ulong4x2_mt8 b, ulong4x2_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong2_mt8 csum([This] ulong4x2_mt8 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static ulong2_mt8 cmin([This] ulong4x2_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static ulong2_mt8 cmax([This] ulong4x2_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // ulong4x2_mt8

#region ulong4x2_mt16

public partial struct ulong4x2_mt16
{
    #region Constants

    public static ulong4x2_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong4x2_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator+(ulong4x2_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator+(ulong4x2_mt16 a, ulong4x2_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator-(ulong4x2_mt16 a, ulong4x2_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a ulong4x2_mt16 by ulong4x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator*(ulong4x2_mt16 a, ulong4x2_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a ulong4x2_mt16 by ulong_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator*(ulong4x2_mt16 a, ulong_mt16 b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong4x2_mt16 by ulong4x2_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator*(ulong_mt16 a, ulong4x2_mt16 b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a ulong4x2_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator*(ulong4x2_mt16 a, ulong b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong4x2_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator*(ulong a, ulong4x2_mt16 b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator/(ulong4x2_mt16 a, ulong4x2_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator/(ulong4x2_mt16 a, ulong_mt16 b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator/(ulong_mt16 a, ulong4x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator/(ulong4x2_mt16 a, ulong b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator/(ulong a, ulong4x2_mt16 b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator%(ulong4x2_mt16 a, ulong4x2_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator%(ulong4x2_mt16 a, ulong_mt16 b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator%(ulong_mt16 a, ulong4x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator%(ulong4x2_mt16 a, ulong b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator%(ulong a, ulong4x2_mt16 b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator --(ulong4x2_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 operator ++(ulong4x2_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 abs([This] ulong4x2_mt16 a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 sign([This] ulong4x2_mt16 a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 min([This] ulong4x2_mt16 a, ulong4x2_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 max([This] ulong4x2_mt16 a, ulong4x2_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 clamp([This] ulong4x2_mt16 v, ulong4x2_mt16 min, ulong4x2_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 square([This] ulong4x2_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 fma([This] ulong4x2_mt16 a, ulong4x2_mt16 b, ulong4x2_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 fms([This] ulong4x2_mt16 a, ulong4x2_mt16 b, ulong4x2_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 fnma([This] ulong4x2_mt16 a, ulong4x2_mt16 b, ulong4x2_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 fsm([This] ulong4x2_mt16 c, ulong4x2_mt16 a, ulong4x2_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 fam([This] ulong4x2_mt16 c, ulong4x2_mt16 a, ulong4x2_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt16 mad([This] ulong4x2_mt16 a, ulong4x2_mt16 b, ulong4x2_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong2_mt16 csum([This] ulong4x2_mt16 a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static ulong2_mt16 cmin([This] ulong4x2_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static ulong2_mt16 cmax([This] ulong4x2_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // ulong4x2_mt16

#region ulong4x3_mt4

public partial struct ulong4x3_mt4
{
    #region Constants

    public static ulong4x3_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong4x3_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator+(ulong4x3_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator+(ulong4x3_mt4 a, ulong4x3_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator-(ulong4x3_mt4 a, ulong4x3_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a ulong4x3_mt4 by ulong4x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator*(ulong4x3_mt4 a, ulong4x3_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a ulong4x3_mt4 by ulong_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator*(ulong4x3_mt4 a, ulong_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong4x3_mt4 by ulong4x3_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator*(ulong_mt4 a, ulong4x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a ulong4x3_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator*(ulong4x3_mt4 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong4x3_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator*(ulong a, ulong4x3_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator/(ulong4x3_mt4 a, ulong4x3_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator/(ulong4x3_mt4 a, ulong_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator/(ulong_mt4 a, ulong4x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator/(ulong4x3_mt4 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator/(ulong a, ulong4x3_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator%(ulong4x3_mt4 a, ulong4x3_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator%(ulong4x3_mt4 a, ulong_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator%(ulong_mt4 a, ulong4x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator%(ulong4x3_mt4 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator%(ulong a, ulong4x3_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator --(ulong4x3_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 operator ++(ulong4x3_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 abs([This] ulong4x3_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 sign([This] ulong4x3_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 min([This] ulong4x3_mt4 a, ulong4x3_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 max([This] ulong4x3_mt4 a, ulong4x3_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 clamp([This] ulong4x3_mt4 v, ulong4x3_mt4 min, ulong4x3_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 square([This] ulong4x3_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 fma([This] ulong4x3_mt4 a, ulong4x3_mt4 b, ulong4x3_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 fms([This] ulong4x3_mt4 a, ulong4x3_mt4 b, ulong4x3_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 fnma([This] ulong4x3_mt4 a, ulong4x3_mt4 b, ulong4x3_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 fsm([This] ulong4x3_mt4 c, ulong4x3_mt4 a, ulong4x3_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 fam([This] ulong4x3_mt4 c, ulong4x3_mt4 a, ulong4x3_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt4 mad([This] ulong4x3_mt4 a, ulong4x3_mt4 b, ulong4x3_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong3_mt4 csum([This] ulong4x3_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static ulong3_mt4 cmin([This] ulong4x3_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static ulong3_mt4 cmax([This] ulong4x3_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // ulong4x3_mt4

#region ulong4x3_mt8

public partial struct ulong4x3_mt8
{
    #region Constants

    public static ulong4x3_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong4x3_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator+(ulong4x3_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator+(ulong4x3_mt8 a, ulong4x3_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator-(ulong4x3_mt8 a, ulong4x3_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a ulong4x3_mt8 by ulong4x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator*(ulong4x3_mt8 a, ulong4x3_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a ulong4x3_mt8 by ulong_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator*(ulong4x3_mt8 a, ulong_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong4x3_mt8 by ulong4x3_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator*(ulong_mt8 a, ulong4x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a ulong4x3_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator*(ulong4x3_mt8 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong4x3_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator*(ulong a, ulong4x3_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator/(ulong4x3_mt8 a, ulong4x3_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator/(ulong4x3_mt8 a, ulong_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator/(ulong_mt8 a, ulong4x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator/(ulong4x3_mt8 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator/(ulong a, ulong4x3_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator%(ulong4x3_mt8 a, ulong4x3_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator%(ulong4x3_mt8 a, ulong_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator%(ulong_mt8 a, ulong4x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator%(ulong4x3_mt8 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator%(ulong a, ulong4x3_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator --(ulong4x3_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 operator ++(ulong4x3_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 abs([This] ulong4x3_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 sign([This] ulong4x3_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 min([This] ulong4x3_mt8 a, ulong4x3_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 max([This] ulong4x3_mt8 a, ulong4x3_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 clamp([This] ulong4x3_mt8 v, ulong4x3_mt8 min, ulong4x3_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 square([This] ulong4x3_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 fma([This] ulong4x3_mt8 a, ulong4x3_mt8 b, ulong4x3_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 fms([This] ulong4x3_mt8 a, ulong4x3_mt8 b, ulong4x3_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 fnma([This] ulong4x3_mt8 a, ulong4x3_mt8 b, ulong4x3_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 fsm([This] ulong4x3_mt8 c, ulong4x3_mt8 a, ulong4x3_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 fam([This] ulong4x3_mt8 c, ulong4x3_mt8 a, ulong4x3_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt8 mad([This] ulong4x3_mt8 a, ulong4x3_mt8 b, ulong4x3_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong3_mt8 csum([This] ulong4x3_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static ulong3_mt8 cmin([This] ulong4x3_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static ulong3_mt8 cmax([This] ulong4x3_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // ulong4x3_mt8

#region ulong4x3_mt16

public partial struct ulong4x3_mt16
{
    #region Constants

    public static ulong4x3_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong4x3_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator+(ulong4x3_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator+(ulong4x3_mt16 a, ulong4x3_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator-(ulong4x3_mt16 a, ulong4x3_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a ulong4x3_mt16 by ulong4x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator*(ulong4x3_mt16 a, ulong4x3_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a ulong4x3_mt16 by ulong_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator*(ulong4x3_mt16 a, ulong_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong4x3_mt16 by ulong4x3_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator*(ulong_mt16 a, ulong4x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a ulong4x3_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator*(ulong4x3_mt16 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong4x3_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator*(ulong a, ulong4x3_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator/(ulong4x3_mt16 a, ulong4x3_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator/(ulong4x3_mt16 a, ulong_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator/(ulong_mt16 a, ulong4x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator/(ulong4x3_mt16 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator/(ulong a, ulong4x3_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator%(ulong4x3_mt16 a, ulong4x3_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator%(ulong4x3_mt16 a, ulong_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator%(ulong_mt16 a, ulong4x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator%(ulong4x3_mt16 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator%(ulong a, ulong4x3_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator --(ulong4x3_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 operator ++(ulong4x3_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 abs([This] ulong4x3_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 sign([This] ulong4x3_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 min([This] ulong4x3_mt16 a, ulong4x3_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 max([This] ulong4x3_mt16 a, ulong4x3_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 clamp([This] ulong4x3_mt16 v, ulong4x3_mt16 min, ulong4x3_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 square([This] ulong4x3_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 fma([This] ulong4x3_mt16 a, ulong4x3_mt16 b, ulong4x3_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 fms([This] ulong4x3_mt16 a, ulong4x3_mt16 b, ulong4x3_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 fnma([This] ulong4x3_mt16 a, ulong4x3_mt16 b, ulong4x3_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 fsm([This] ulong4x3_mt16 c, ulong4x3_mt16 a, ulong4x3_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 fam([This] ulong4x3_mt16 c, ulong4x3_mt16 a, ulong4x3_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt16 mad([This] ulong4x3_mt16 a, ulong4x3_mt16 b, ulong4x3_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong3_mt16 csum([This] ulong4x3_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static ulong3_mt16 cmin([This] ulong4x3_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static ulong3_mt16 cmax([This] ulong4x3_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // ulong4x3_mt16

#region ulong4x4_mt4

public partial struct ulong4x4_mt4
{
    #region Constants

    public static ulong4x4_mt4 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong4x4_mt4 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator+(ulong4x4_mt4 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator+(ulong4x4_mt4 a, ulong4x4_mt4 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator-(ulong4x4_mt4 a, ulong4x4_mt4 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a ulong4x4_mt4 by ulong4x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator*(ulong4x4_mt4 a, ulong4x4_mt4 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a ulong4x4_mt4 by ulong_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator*(ulong4x4_mt4 a, ulong_mt4 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong4x4_mt4 by ulong4x4_mt4
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator*(ulong_mt4 a, ulong4x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a ulong4x4_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator*(ulong4x4_mt4 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong4x4_mt4 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator*(ulong a, ulong4x4_mt4 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator/(ulong4x4_mt4 a, ulong4x4_mt4 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator/(ulong4x4_mt4 a, ulong_mt4 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator/(ulong_mt4 a, ulong4x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator/(ulong4x4_mt4 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator/(ulong a, ulong4x4_mt4 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator%(ulong4x4_mt4 a, ulong4x4_mt4 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator%(ulong4x4_mt4 a, ulong_mt4 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator%(ulong_mt4 a, ulong4x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator%(ulong4x4_mt4 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator%(ulong a, ulong4x4_mt4 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator --(ulong4x4_mt4 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 operator ++(ulong4x4_mt4 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 abs([This] ulong4x4_mt4 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 sign([This] ulong4x4_mt4 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 min([This] ulong4x4_mt4 a, ulong4x4_mt4 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 max([This] ulong4x4_mt4 a, ulong4x4_mt4 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 clamp([This] ulong4x4_mt4 v, ulong4x4_mt4 min, ulong4x4_mt4 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 square([This] ulong4x4_mt4 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 fma([This] ulong4x4_mt4 a, ulong4x4_mt4 b, ulong4x4_mt4 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 fms([This] ulong4x4_mt4 a, ulong4x4_mt4 b, ulong4x4_mt4 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 fnma([This] ulong4x4_mt4 a, ulong4x4_mt4 b, ulong4x4_mt4 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 fsm([This] ulong4x4_mt4 c, ulong4x4_mt4 a, ulong4x4_mt4 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 fam([This] ulong4x4_mt4 c, ulong4x4_mt4 a, ulong4x4_mt4 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt4 mad([This] ulong4x4_mt4 a, ulong4x4_mt4 b, ulong4x4_mt4 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong4_mt4 csum([This] ulong4x4_mt4 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static ulong4_mt4 cmin([This] ulong4x4_mt4 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static ulong4_mt4 cmax([This] ulong4x4_mt4 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // ulong4x4_mt4

#region ulong4x4_mt8

public partial struct ulong4x4_mt8
{
    #region Constants

    public static ulong4x4_mt8 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong4x4_mt8 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator+(ulong4x4_mt8 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator+(ulong4x4_mt8 a, ulong4x4_mt8 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator-(ulong4x4_mt8 a, ulong4x4_mt8 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a ulong4x4_mt8 by ulong4x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator*(ulong4x4_mt8 a, ulong4x4_mt8 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a ulong4x4_mt8 by ulong_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator*(ulong4x4_mt8 a, ulong_mt8 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong4x4_mt8 by ulong4x4_mt8
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator*(ulong_mt8 a, ulong4x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a ulong4x4_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator*(ulong4x4_mt8 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong4x4_mt8 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator*(ulong a, ulong4x4_mt8 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator/(ulong4x4_mt8 a, ulong4x4_mt8 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator/(ulong4x4_mt8 a, ulong_mt8 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator/(ulong_mt8 a, ulong4x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator/(ulong4x4_mt8 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator/(ulong a, ulong4x4_mt8 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator%(ulong4x4_mt8 a, ulong4x4_mt8 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator%(ulong4x4_mt8 a, ulong_mt8 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator%(ulong_mt8 a, ulong4x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator%(ulong4x4_mt8 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator%(ulong a, ulong4x4_mt8 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator --(ulong4x4_mt8 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 operator ++(ulong4x4_mt8 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 abs([This] ulong4x4_mt8 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 sign([This] ulong4x4_mt8 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 min([This] ulong4x4_mt8 a, ulong4x4_mt8 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 max([This] ulong4x4_mt8 a, ulong4x4_mt8 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 clamp([This] ulong4x4_mt8 v, ulong4x4_mt8 min, ulong4x4_mt8 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 square([This] ulong4x4_mt8 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 fma([This] ulong4x4_mt8 a, ulong4x4_mt8 b, ulong4x4_mt8 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 fms([This] ulong4x4_mt8 a, ulong4x4_mt8 b, ulong4x4_mt8 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 fnma([This] ulong4x4_mt8 a, ulong4x4_mt8 b, ulong4x4_mt8 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 fsm([This] ulong4x4_mt8 c, ulong4x4_mt8 a, ulong4x4_mt8 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 fam([This] ulong4x4_mt8 c, ulong4x4_mt8 a, ulong4x4_mt8 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt8 mad([This] ulong4x4_mt8 a, ulong4x4_mt8 b, ulong4x4_mt8 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong4_mt8 csum([This] ulong4x4_mt8 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static ulong4_mt8 cmin([This] ulong4x4_mt8 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static ulong4_mt8 cmax([This] ulong4x4_mt8 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // ulong4x4_mt8

#region ulong4x4_mt16

public partial struct ulong4x4_mt16
{
    #region Constants

    public static ulong4x4_mt16 Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong4x4_mt16 One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator+(ulong4x4_mt16 a) => a;

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator+(ulong4x4_mt16 a, ulong4x4_mt16 b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator-(ulong4x4_mt16 a, ulong4x4_mt16 b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a ulong4x4_mt16 by ulong4x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator*(ulong4x4_mt16 a, ulong4x4_mt16 b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a ulong4x4_mt16 by ulong_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator*(ulong4x4_mt16 a, ulong_mt16 b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong4x4_mt16 by ulong4x4_mt16
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator*(ulong_mt16 a, ulong4x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a ulong4x4_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator*(ulong4x4_mt16 a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong4x4_mt16 by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator*(ulong a, ulong4x4_mt16 b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator/(ulong4x4_mt16 a, ulong4x4_mt16 b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator/(ulong4x4_mt16 a, ulong_mt16 b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator/(ulong_mt16 a, ulong4x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator/(ulong4x4_mt16 a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator/(ulong a, ulong4x4_mt16 b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator%(ulong4x4_mt16 a, ulong4x4_mt16 b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator%(ulong4x4_mt16 a, ulong_mt16 b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator%(ulong_mt16 a, ulong4x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator%(ulong4x4_mt16 a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator%(ulong a, ulong4x4_mt16 b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator --(ulong4x4_mt16 a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 operator ++(ulong4x4_mt16 a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 abs([This] ulong4x4_mt16 a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 sign([This] ulong4x4_mt16 a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 min([This] ulong4x4_mt16 a, ulong4x4_mt16 b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 max([This] ulong4x4_mt16 a, ulong4x4_mt16 b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 clamp([This] ulong4x4_mt16 v, ulong4x4_mt16 min, ulong4x4_mt16 max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 square([This] ulong4x4_mt16 a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 fma([This] ulong4x4_mt16 a, ulong4x4_mt16 b, ulong4x4_mt16 c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 fms([This] ulong4x4_mt16 a, ulong4x4_mt16 b, ulong4x4_mt16 c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 fnma([This] ulong4x4_mt16 a, ulong4x4_mt16 b, ulong4x4_mt16 c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 fsm([This] ulong4x4_mt16 c, ulong4x4_mt16 a, ulong4x4_mt16 b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 fam([This] ulong4x4_mt16 c, ulong4x4_mt16 a, ulong4x4_mt16 b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt16 mad([This] ulong4x4_mt16 a, ulong4x4_mt16 b, ulong4x4_mt16 c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong4_mt16 csum([This] ulong4x4_mt16 a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static ulong4_mt16 cmin([This] ulong4x4_mt16 a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static ulong4_mt16 cmax([This] ulong4x4_mt16 a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // ulong4x4_mt16
