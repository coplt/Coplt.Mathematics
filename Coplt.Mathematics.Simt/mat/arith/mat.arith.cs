// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region float2x2_mt

public partial struct float2x2_mt
{
    #region Constants

    public static float2x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float2x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float2x2_mt operator+(float2x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static float2x2_mt operator-(float2x2_mt a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt operator+(float2x2_mt a, float2x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt operator-(float2x2_mt a, float2x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a float2x2_mt by float2x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt operator*(float2x2_mt a, float2x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a float2x2_mt by float_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt operator*(float2x2_mt a, float_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float2x2_mt by float2x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt operator*(float_mt a, float2x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a float2x2_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt operator*(float2x2_mt a, float b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float2x2_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x2_mt operator*(float a, float2x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt operator/(float2x2_mt a, float2x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt operator/(float2x2_mt a, float_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float2x2_mt operator/(float_mt a, float2x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt operator/(float2x2_mt a, float b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float2x2_mt operator/(float a, float2x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt operator%(float2x2_mt a, float2x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt operator%(float2x2_mt a, float_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float2x2_mt operator%(float_mt a, float2x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt operator%(float2x2_mt a, float b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float2x2_mt operator%(float a, float2x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float2x2_mt operator --(float2x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static float2x2_mt operator ++(float2x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2x2_mt abs([This] float2x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static float2x2_mt sign([This] float2x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static float2x2_mt min([This] float2x2_mt a, float2x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static float2x2_mt max([This] float2x2_mt a, float2x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static float2x2_mt clamp([This] float2x2_mt v, float2x2_mt min, float2x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static float2x2_mt square([This] float2x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt fma([This] float2x2_mt a, float2x2_mt b, float2x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt fms([This] float2x2_mt a, float2x2_mt b, float2x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt fnma([This] float2x2_mt a, float2x2_mt b, float2x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt fsm([This] float2x2_mt c, float2x2_mt a, float2x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt fam([This] float2x2_mt c, float2x2_mt a, float2x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x2_mt mad([This] float2x2_mt a, float2x2_mt b, float2x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float2_mt csum([This] float2x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static float2_mt cmin([This] float2x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static float2_mt cmax([This] float2x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // float2x2_mt

#region float2x3_mt

public partial struct float2x3_mt
{
    #region Constants

    public static float2x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float2x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float2x3_mt operator+(float2x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static float2x3_mt operator-(float2x3_mt a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt operator+(float2x3_mt a, float2x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt operator-(float2x3_mt a, float2x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a float2x3_mt by float2x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt operator*(float2x3_mt a, float2x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a float2x3_mt by float_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt operator*(float2x3_mt a, float_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float2x3_mt by float2x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt operator*(float_mt a, float2x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a float2x3_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt operator*(float2x3_mt a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float2x3_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x3_mt operator*(float a, float2x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt operator/(float2x3_mt a, float2x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt operator/(float2x3_mt a, float_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float2x3_mt operator/(float_mt a, float2x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt operator/(float2x3_mt a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float2x3_mt operator/(float a, float2x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt operator%(float2x3_mt a, float2x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt operator%(float2x3_mt a, float_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float2x3_mt operator%(float_mt a, float2x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt operator%(float2x3_mt a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float2x3_mt operator%(float a, float2x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float2x3_mt operator --(float2x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static float2x3_mt operator ++(float2x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2x3_mt abs([This] float2x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static float2x3_mt sign([This] float2x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static float2x3_mt min([This] float2x3_mt a, float2x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static float2x3_mt max([This] float2x3_mt a, float2x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static float2x3_mt clamp([This] float2x3_mt v, float2x3_mt min, float2x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static float2x3_mt square([This] float2x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt fma([This] float2x3_mt a, float2x3_mt b, float2x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt fms([This] float2x3_mt a, float2x3_mt b, float2x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt fnma([This] float2x3_mt a, float2x3_mt b, float2x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt fsm([This] float2x3_mt c, float2x3_mt a, float2x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt fam([This] float2x3_mt c, float2x3_mt a, float2x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x3_mt mad([This] float2x3_mt a, float2x3_mt b, float2x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float3_mt csum([This] float2x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static float3_mt cmin([This] float2x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static float3_mt cmax([This] float2x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // float2x3_mt

#region float2x4_mt

public partial struct float2x4_mt
{
    #region Constants

    public static float2x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float2x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float2x4_mt operator+(float2x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static float2x4_mt operator-(float2x4_mt a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt operator+(float2x4_mt a, float2x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt operator-(float2x4_mt a, float2x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a float2x4_mt by float2x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt operator*(float2x4_mt a, float2x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a float2x4_mt by float_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt operator*(float2x4_mt a, float_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float2x4_mt by float2x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt operator*(float_mt a, float2x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a float2x4_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt operator*(float2x4_mt a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float2x4_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float2x4_mt operator*(float a, float2x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt operator/(float2x4_mt a, float2x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt operator/(float2x4_mt a, float_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float2x4_mt operator/(float_mt a, float2x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt operator/(float2x4_mt a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float2x4_mt operator/(float a, float2x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt operator%(float2x4_mt a, float2x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt operator%(float2x4_mt a, float_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float2x4_mt operator%(float_mt a, float2x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt operator%(float2x4_mt a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float2x4_mt operator%(float a, float2x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float2x4_mt operator --(float2x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static float2x4_mt operator ++(float2x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float2x4_mt abs([This] float2x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static float2x4_mt sign([This] float2x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static float2x4_mt min([This] float2x4_mt a, float2x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static float2x4_mt max([This] float2x4_mt a, float2x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static float2x4_mt clamp([This] float2x4_mt v, float2x4_mt min, float2x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static float2x4_mt square([This] float2x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt fma([This] float2x4_mt a, float2x4_mt b, float2x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt fms([This] float2x4_mt a, float2x4_mt b, float2x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt fnma([This] float2x4_mt a, float2x4_mt b, float2x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt fsm([This] float2x4_mt c, float2x4_mt a, float2x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt fam([This] float2x4_mt c, float2x4_mt a, float2x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float2x4_mt mad([This] float2x4_mt a, float2x4_mt b, float2x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float4_mt csum([This] float2x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static float4_mt cmin([This] float2x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static float4_mt cmax([This] float2x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // float2x4_mt

#region float3x2_mt

public partial struct float3x2_mt
{
    #region Constants

    public static float3x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float3x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float3x2_mt operator+(float3x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static float3x2_mt operator-(float3x2_mt a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt operator+(float3x2_mt a, float3x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt operator-(float3x2_mt a, float3x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a float3x2_mt by float3x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt operator*(float3x2_mt a, float3x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a float3x2_mt by float_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt operator*(float3x2_mt a, float_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float3x2_mt by float3x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt operator*(float_mt a, float3x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a float3x2_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt operator*(float3x2_mt a, float b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float3x2_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x2_mt operator*(float a, float3x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt operator/(float3x2_mt a, float3x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt operator/(float3x2_mt a, float_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float3x2_mt operator/(float_mt a, float3x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt operator/(float3x2_mt a, float b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float3x2_mt operator/(float a, float3x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt operator%(float3x2_mt a, float3x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt operator%(float3x2_mt a, float_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float3x2_mt operator%(float_mt a, float3x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt operator%(float3x2_mt a, float b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float3x2_mt operator%(float a, float3x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float3x2_mt operator --(float3x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static float3x2_mt operator ++(float3x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3x2_mt abs([This] float3x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static float3x2_mt sign([This] float3x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static float3x2_mt min([This] float3x2_mt a, float3x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static float3x2_mt max([This] float3x2_mt a, float3x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static float3x2_mt clamp([This] float3x2_mt v, float3x2_mt min, float3x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static float3x2_mt square([This] float3x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt fma([This] float3x2_mt a, float3x2_mt b, float3x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt fms([This] float3x2_mt a, float3x2_mt b, float3x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt fnma([This] float3x2_mt a, float3x2_mt b, float3x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt fsm([This] float3x2_mt c, float3x2_mt a, float3x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt fam([This] float3x2_mt c, float3x2_mt a, float3x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x2_mt mad([This] float3x2_mt a, float3x2_mt b, float3x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float2_mt csum([This] float3x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static float2_mt cmin([This] float3x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static float2_mt cmax([This] float3x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // float3x2_mt

#region float3x3_mt

public partial struct float3x3_mt
{
    #region Constants

    public static float3x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float3x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float3x3_mt operator+(float3x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static float3x3_mt operator-(float3x3_mt a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt operator+(float3x3_mt a, float3x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt operator-(float3x3_mt a, float3x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a float3x3_mt by float3x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt operator*(float3x3_mt a, float3x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a float3x3_mt by float_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt operator*(float3x3_mt a, float_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float3x3_mt by float3x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt operator*(float_mt a, float3x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a float3x3_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt operator*(float3x3_mt a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float3x3_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x3_mt operator*(float a, float3x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt operator/(float3x3_mt a, float3x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt operator/(float3x3_mt a, float_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float3x3_mt operator/(float_mt a, float3x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt operator/(float3x3_mt a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float3x3_mt operator/(float a, float3x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt operator%(float3x3_mt a, float3x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt operator%(float3x3_mt a, float_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float3x3_mt operator%(float_mt a, float3x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt operator%(float3x3_mt a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float3x3_mt operator%(float a, float3x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float3x3_mt operator --(float3x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static float3x3_mt operator ++(float3x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3x3_mt abs([This] float3x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static float3x3_mt sign([This] float3x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static float3x3_mt min([This] float3x3_mt a, float3x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static float3x3_mt max([This] float3x3_mt a, float3x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static float3x3_mt clamp([This] float3x3_mt v, float3x3_mt min, float3x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static float3x3_mt square([This] float3x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt fma([This] float3x3_mt a, float3x3_mt b, float3x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt fms([This] float3x3_mt a, float3x3_mt b, float3x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt fnma([This] float3x3_mt a, float3x3_mt b, float3x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt fsm([This] float3x3_mt c, float3x3_mt a, float3x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt fam([This] float3x3_mt c, float3x3_mt a, float3x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x3_mt mad([This] float3x3_mt a, float3x3_mt b, float3x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float3_mt csum([This] float3x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static float3_mt cmin([This] float3x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static float3_mt cmax([This] float3x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // float3x3_mt

#region float3x4_mt

public partial struct float3x4_mt
{
    #region Constants

    public static float3x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float3x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float3x4_mt operator+(float3x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static float3x4_mt operator-(float3x4_mt a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt operator+(float3x4_mt a, float3x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt operator-(float3x4_mt a, float3x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a float3x4_mt by float3x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt operator*(float3x4_mt a, float3x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a float3x4_mt by float_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt operator*(float3x4_mt a, float_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float3x4_mt by float3x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt operator*(float_mt a, float3x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a float3x4_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt operator*(float3x4_mt a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float3x4_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float3x4_mt operator*(float a, float3x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt operator/(float3x4_mt a, float3x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt operator/(float3x4_mt a, float_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float3x4_mt operator/(float_mt a, float3x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt operator/(float3x4_mt a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float3x4_mt operator/(float a, float3x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt operator%(float3x4_mt a, float3x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt operator%(float3x4_mt a, float_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float3x4_mt operator%(float_mt a, float3x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt operator%(float3x4_mt a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float3x4_mt operator%(float a, float3x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float3x4_mt operator --(float3x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static float3x4_mt operator ++(float3x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float3x4_mt abs([This] float3x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static float3x4_mt sign([This] float3x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static float3x4_mt min([This] float3x4_mt a, float3x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static float3x4_mt max([This] float3x4_mt a, float3x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static float3x4_mt clamp([This] float3x4_mt v, float3x4_mt min, float3x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static float3x4_mt square([This] float3x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt fma([This] float3x4_mt a, float3x4_mt b, float3x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt fms([This] float3x4_mt a, float3x4_mt b, float3x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt fnma([This] float3x4_mt a, float3x4_mt b, float3x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt fsm([This] float3x4_mt c, float3x4_mt a, float3x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt fam([This] float3x4_mt c, float3x4_mt a, float3x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float3x4_mt mad([This] float3x4_mt a, float3x4_mt b, float3x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float4_mt csum([This] float3x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static float4_mt cmin([This] float3x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static float4_mt cmax([This] float3x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // float3x4_mt

#region float4x2_mt

public partial struct float4x2_mt
{
    #region Constants

    public static float4x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float4x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float4x2_mt operator+(float4x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static float4x2_mt operator-(float4x2_mt a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt operator+(float4x2_mt a, float4x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt operator-(float4x2_mt a, float4x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a float4x2_mt by float4x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt operator*(float4x2_mt a, float4x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a float4x2_mt by float_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt operator*(float4x2_mt a, float_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float4x2_mt by float4x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt operator*(float_mt a, float4x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a float4x2_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt operator*(float4x2_mt a, float b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a float4x2_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x2_mt operator*(float a, float4x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt operator/(float4x2_mt a, float4x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt operator/(float4x2_mt a, float_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float4x2_mt operator/(float_mt a, float4x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt operator/(float4x2_mt a, float b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static float4x2_mt operator/(float a, float4x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt operator%(float4x2_mt a, float4x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt operator%(float4x2_mt a, float_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float4x2_mt operator%(float_mt a, float4x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt operator%(float4x2_mt a, float b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static float4x2_mt operator%(float a, float4x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static float4x2_mt operator --(float4x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static float4x2_mt operator ++(float4x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4x2_mt abs([This] float4x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static float4x2_mt sign([This] float4x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static float4x2_mt min([This] float4x2_mt a, float4x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static float4x2_mt max([This] float4x2_mt a, float4x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static float4x2_mt clamp([This] float4x2_mt v, float4x2_mt min, float4x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static float4x2_mt square([This] float4x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt fma([This] float4x2_mt a, float4x2_mt b, float4x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt fms([This] float4x2_mt a, float4x2_mt b, float4x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt fnma([This] float4x2_mt a, float4x2_mt b, float4x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt fsm([This] float4x2_mt c, float4x2_mt a, float4x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt fam([This] float4x2_mt c, float4x2_mt a, float4x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x2_mt mad([This] float4x2_mt a, float4x2_mt b, float4x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float2_mt csum([This] float4x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static float2_mt cmin([This] float4x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static float2_mt cmax([This] float4x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // float4x2_mt

#region float4x3_mt

public partial struct float4x3_mt
{
    #region Constants

    public static float4x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float4x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float4x3_mt operator+(float4x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static float4x3_mt operator-(float4x3_mt a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt operator+(float4x3_mt a, float4x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt operator-(float4x3_mt a, float4x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a float4x3_mt by float4x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt operator*(float4x3_mt a, float4x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a float4x3_mt by float_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt operator*(float4x3_mt a, float_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float4x3_mt by float4x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt operator*(float_mt a, float4x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a float4x3_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt operator*(float4x3_mt a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a float4x3_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x3_mt operator*(float a, float4x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt operator/(float4x3_mt a, float4x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt operator/(float4x3_mt a, float_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float4x3_mt operator/(float_mt a, float4x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt operator/(float4x3_mt a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static float4x3_mt operator/(float a, float4x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt operator%(float4x3_mt a, float4x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt operator%(float4x3_mt a, float_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float4x3_mt operator%(float_mt a, float4x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt operator%(float4x3_mt a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static float4x3_mt operator%(float a, float4x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static float4x3_mt operator --(float4x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static float4x3_mt operator ++(float4x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4x3_mt abs([This] float4x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static float4x3_mt sign([This] float4x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static float4x3_mt min([This] float4x3_mt a, float4x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static float4x3_mt max([This] float4x3_mt a, float4x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static float4x3_mt clamp([This] float4x3_mt v, float4x3_mt min, float4x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static float4x3_mt square([This] float4x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt fma([This] float4x3_mt a, float4x3_mt b, float4x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt fms([This] float4x3_mt a, float4x3_mt b, float4x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt fnma([This] float4x3_mt a, float4x3_mt b, float4x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt fsm([This] float4x3_mt c, float4x3_mt a, float4x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt fam([This] float4x3_mt c, float4x3_mt a, float4x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x3_mt mad([This] float4x3_mt a, float4x3_mt b, float4x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float3_mt csum([This] float4x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static float3_mt cmin([This] float4x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static float3_mt cmax([This] float4x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // float4x3_mt

#region float4x4_mt

public partial struct float4x4_mt
{
    #region Constants

    public static float4x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static float4x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0f); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static float4x4_mt operator+(float4x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static float4x4_mt operator-(float4x4_mt a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt operator+(float4x4_mt a, float4x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt operator-(float4x4_mt a, float4x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a float4x4_mt by float4x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt operator*(float4x4_mt a, float4x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a float4x4_mt by float_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt operator*(float4x4_mt a, float_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float4x4_mt by float4x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt operator*(float_mt a, float4x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a float4x4_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt operator*(float4x4_mt a, float b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a float4x4_mt by float
    /// </summary>
    [MethodImpl(256 | 512)]
    public static float4x4_mt operator*(float a, float4x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt operator/(float4x4_mt a, float4x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt operator/(float4x4_mt a, float_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float4x4_mt operator/(float_mt a, float4x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt operator/(float4x4_mt a, float b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static float4x4_mt operator/(float a, float4x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt operator%(float4x4_mt a, float4x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt operator%(float4x4_mt a, float_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float4x4_mt operator%(float_mt a, float4x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt operator%(float4x4_mt a, float b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static float4x4_mt operator%(float a, float4x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static float4x4_mt operator --(float4x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static float4x4_mt operator ++(float4x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float4x4_mt abs([This] float4x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static float4x4_mt sign([This] float4x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static float4x4_mt min([This] float4x4_mt a, float4x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static float4x4_mt max([This] float4x4_mt a, float4x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static float4x4_mt clamp([This] float4x4_mt v, float4x4_mt min, float4x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static float4x4_mt square([This] float4x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt fma([This] float4x4_mt a, float4x4_mt b, float4x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt fms([This] float4x4_mt a, float4x4_mt b, float4x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt fnma([This] float4x4_mt a, float4x4_mt b, float4x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt fsm([This] float4x4_mt c, float4x4_mt a, float4x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt fam([This] float4x4_mt c, float4x4_mt a, float4x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static float4x4_mt mad([This] float4x4_mt a, float4x4_mt b, float4x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static float4_mt csum([This] float4x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static float4_mt cmin([This] float4x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static float4_mt cmax([This] float4x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // float4x4_mt

#region double2x2_mt

public partial struct double2x2_mt
{
    #region Constants

    public static double2x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double2x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double2x2_mt operator+(double2x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static double2x2_mt operator-(double2x2_mt a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt operator+(double2x2_mt a, double2x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt operator-(double2x2_mt a, double2x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a double2x2_mt by double2x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt operator*(double2x2_mt a, double2x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a double2x2_mt by double_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt operator*(double2x2_mt a, double_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double2x2_mt by double2x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt operator*(double_mt a, double2x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a double2x2_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt operator*(double2x2_mt a, double b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double2x2_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x2_mt operator*(double a, double2x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt operator/(double2x2_mt a, double2x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt operator/(double2x2_mt a, double_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double2x2_mt operator/(double_mt a, double2x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt operator/(double2x2_mt a, double b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double2x2_mt operator/(double a, double2x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt operator%(double2x2_mt a, double2x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt operator%(double2x2_mt a, double_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double2x2_mt operator%(double_mt a, double2x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt operator%(double2x2_mt a, double b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double2x2_mt operator%(double a, double2x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double2x2_mt operator --(double2x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static double2x2_mt operator ++(double2x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2x2_mt abs([This] double2x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static double2x2_mt sign([This] double2x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static double2x2_mt min([This] double2x2_mt a, double2x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static double2x2_mt max([This] double2x2_mt a, double2x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static double2x2_mt clamp([This] double2x2_mt v, double2x2_mt min, double2x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static double2x2_mt square([This] double2x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt fma([This] double2x2_mt a, double2x2_mt b, double2x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt fms([This] double2x2_mt a, double2x2_mt b, double2x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt fnma([This] double2x2_mt a, double2x2_mt b, double2x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt fsm([This] double2x2_mt c, double2x2_mt a, double2x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt fam([This] double2x2_mt c, double2x2_mt a, double2x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x2_mt mad([This] double2x2_mt a, double2x2_mt b, double2x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double2_mt csum([This] double2x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static double2_mt cmin([This] double2x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static double2_mt cmax([This] double2x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // double2x2_mt

#region double2x3_mt

public partial struct double2x3_mt
{
    #region Constants

    public static double2x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double2x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double2x3_mt operator+(double2x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static double2x3_mt operator-(double2x3_mt a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt operator+(double2x3_mt a, double2x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt operator-(double2x3_mt a, double2x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a double2x3_mt by double2x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt operator*(double2x3_mt a, double2x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a double2x3_mt by double_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt operator*(double2x3_mt a, double_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double2x3_mt by double2x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt operator*(double_mt a, double2x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a double2x3_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt operator*(double2x3_mt a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double2x3_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x3_mt operator*(double a, double2x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt operator/(double2x3_mt a, double2x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt operator/(double2x3_mt a, double_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double2x3_mt operator/(double_mt a, double2x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt operator/(double2x3_mt a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double2x3_mt operator/(double a, double2x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt operator%(double2x3_mt a, double2x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt operator%(double2x3_mt a, double_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double2x3_mt operator%(double_mt a, double2x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt operator%(double2x3_mt a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double2x3_mt operator%(double a, double2x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double2x3_mt operator --(double2x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static double2x3_mt operator ++(double2x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2x3_mt abs([This] double2x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static double2x3_mt sign([This] double2x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static double2x3_mt min([This] double2x3_mt a, double2x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static double2x3_mt max([This] double2x3_mt a, double2x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static double2x3_mt clamp([This] double2x3_mt v, double2x3_mt min, double2x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static double2x3_mt square([This] double2x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt fma([This] double2x3_mt a, double2x3_mt b, double2x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt fms([This] double2x3_mt a, double2x3_mt b, double2x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt fnma([This] double2x3_mt a, double2x3_mt b, double2x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt fsm([This] double2x3_mt c, double2x3_mt a, double2x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt fam([This] double2x3_mt c, double2x3_mt a, double2x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x3_mt mad([This] double2x3_mt a, double2x3_mt b, double2x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double3_mt csum([This] double2x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static double3_mt cmin([This] double2x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static double3_mt cmax([This] double2x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // double2x3_mt

#region double2x4_mt

public partial struct double2x4_mt
{
    #region Constants

    public static double2x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double2x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double2x4_mt operator+(double2x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static double2x4_mt operator-(double2x4_mt a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt operator+(double2x4_mt a, double2x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt operator-(double2x4_mt a, double2x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a double2x4_mt by double2x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt operator*(double2x4_mt a, double2x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a double2x4_mt by double_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt operator*(double2x4_mt a, double_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double2x4_mt by double2x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt operator*(double_mt a, double2x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a double2x4_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt operator*(double2x4_mt a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double2x4_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double2x4_mt operator*(double a, double2x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt operator/(double2x4_mt a, double2x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt operator/(double2x4_mt a, double_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double2x4_mt operator/(double_mt a, double2x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt operator/(double2x4_mt a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double2x4_mt operator/(double a, double2x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt operator%(double2x4_mt a, double2x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt operator%(double2x4_mt a, double_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double2x4_mt operator%(double_mt a, double2x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt operator%(double2x4_mt a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double2x4_mt operator%(double a, double2x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double2x4_mt operator --(double2x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static double2x4_mt operator ++(double2x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double2x4_mt abs([This] double2x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static double2x4_mt sign([This] double2x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static double2x4_mt min([This] double2x4_mt a, double2x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static double2x4_mt max([This] double2x4_mt a, double2x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static double2x4_mt clamp([This] double2x4_mt v, double2x4_mt min, double2x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static double2x4_mt square([This] double2x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt fma([This] double2x4_mt a, double2x4_mt b, double2x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt fms([This] double2x4_mt a, double2x4_mt b, double2x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt fnma([This] double2x4_mt a, double2x4_mt b, double2x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt fsm([This] double2x4_mt c, double2x4_mt a, double2x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt fam([This] double2x4_mt c, double2x4_mt a, double2x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double2x4_mt mad([This] double2x4_mt a, double2x4_mt b, double2x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double4_mt csum([This] double2x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static double4_mt cmin([This] double2x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static double4_mt cmax([This] double2x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // double2x4_mt

#region double3x2_mt

public partial struct double3x2_mt
{
    #region Constants

    public static double3x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double3x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double3x2_mt operator+(double3x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static double3x2_mt operator-(double3x2_mt a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt operator+(double3x2_mt a, double3x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt operator-(double3x2_mt a, double3x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a double3x2_mt by double3x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt operator*(double3x2_mt a, double3x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a double3x2_mt by double_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt operator*(double3x2_mt a, double_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double3x2_mt by double3x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt operator*(double_mt a, double3x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a double3x2_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt operator*(double3x2_mt a, double b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double3x2_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x2_mt operator*(double a, double3x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt operator/(double3x2_mt a, double3x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt operator/(double3x2_mt a, double_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double3x2_mt operator/(double_mt a, double3x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt operator/(double3x2_mt a, double b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double3x2_mt operator/(double a, double3x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt operator%(double3x2_mt a, double3x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt operator%(double3x2_mt a, double_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double3x2_mt operator%(double_mt a, double3x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt operator%(double3x2_mt a, double b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double3x2_mt operator%(double a, double3x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double3x2_mt operator --(double3x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static double3x2_mt operator ++(double3x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3x2_mt abs([This] double3x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static double3x2_mt sign([This] double3x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static double3x2_mt min([This] double3x2_mt a, double3x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static double3x2_mt max([This] double3x2_mt a, double3x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static double3x2_mt clamp([This] double3x2_mt v, double3x2_mt min, double3x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static double3x2_mt square([This] double3x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt fma([This] double3x2_mt a, double3x2_mt b, double3x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt fms([This] double3x2_mt a, double3x2_mt b, double3x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt fnma([This] double3x2_mt a, double3x2_mt b, double3x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt fsm([This] double3x2_mt c, double3x2_mt a, double3x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt fam([This] double3x2_mt c, double3x2_mt a, double3x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x2_mt mad([This] double3x2_mt a, double3x2_mt b, double3x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double2_mt csum([This] double3x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static double2_mt cmin([This] double3x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static double2_mt cmax([This] double3x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // double3x2_mt

#region double3x3_mt

public partial struct double3x3_mt
{
    #region Constants

    public static double3x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double3x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double3x3_mt operator+(double3x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static double3x3_mt operator-(double3x3_mt a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt operator+(double3x3_mt a, double3x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt operator-(double3x3_mt a, double3x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a double3x3_mt by double3x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt operator*(double3x3_mt a, double3x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a double3x3_mt by double_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt operator*(double3x3_mt a, double_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double3x3_mt by double3x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt operator*(double_mt a, double3x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a double3x3_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt operator*(double3x3_mt a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double3x3_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x3_mt operator*(double a, double3x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt operator/(double3x3_mt a, double3x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt operator/(double3x3_mt a, double_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double3x3_mt operator/(double_mt a, double3x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt operator/(double3x3_mt a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double3x3_mt operator/(double a, double3x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt operator%(double3x3_mt a, double3x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt operator%(double3x3_mt a, double_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double3x3_mt operator%(double_mt a, double3x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt operator%(double3x3_mt a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double3x3_mt operator%(double a, double3x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double3x3_mt operator --(double3x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static double3x3_mt operator ++(double3x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3x3_mt abs([This] double3x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static double3x3_mt sign([This] double3x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static double3x3_mt min([This] double3x3_mt a, double3x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static double3x3_mt max([This] double3x3_mt a, double3x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static double3x3_mt clamp([This] double3x3_mt v, double3x3_mt min, double3x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static double3x3_mt square([This] double3x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt fma([This] double3x3_mt a, double3x3_mt b, double3x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt fms([This] double3x3_mt a, double3x3_mt b, double3x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt fnma([This] double3x3_mt a, double3x3_mt b, double3x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt fsm([This] double3x3_mt c, double3x3_mt a, double3x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt fam([This] double3x3_mt c, double3x3_mt a, double3x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x3_mt mad([This] double3x3_mt a, double3x3_mt b, double3x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double3_mt csum([This] double3x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static double3_mt cmin([This] double3x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static double3_mt cmax([This] double3x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // double3x3_mt

#region double3x4_mt

public partial struct double3x4_mt
{
    #region Constants

    public static double3x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double3x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double3x4_mt operator+(double3x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static double3x4_mt operator-(double3x4_mt a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt operator+(double3x4_mt a, double3x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt operator-(double3x4_mt a, double3x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a double3x4_mt by double3x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt operator*(double3x4_mt a, double3x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a double3x4_mt by double_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt operator*(double3x4_mt a, double_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double3x4_mt by double3x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt operator*(double_mt a, double3x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a double3x4_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt operator*(double3x4_mt a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double3x4_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double3x4_mt operator*(double a, double3x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt operator/(double3x4_mt a, double3x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt operator/(double3x4_mt a, double_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double3x4_mt operator/(double_mt a, double3x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt operator/(double3x4_mt a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double3x4_mt operator/(double a, double3x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt operator%(double3x4_mt a, double3x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt operator%(double3x4_mt a, double_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double3x4_mt operator%(double_mt a, double3x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt operator%(double3x4_mt a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double3x4_mt operator%(double a, double3x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double3x4_mt operator --(double3x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static double3x4_mt operator ++(double3x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double3x4_mt abs([This] double3x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static double3x4_mt sign([This] double3x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static double3x4_mt min([This] double3x4_mt a, double3x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static double3x4_mt max([This] double3x4_mt a, double3x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static double3x4_mt clamp([This] double3x4_mt v, double3x4_mt min, double3x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static double3x4_mt square([This] double3x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt fma([This] double3x4_mt a, double3x4_mt b, double3x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt fms([This] double3x4_mt a, double3x4_mt b, double3x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt fnma([This] double3x4_mt a, double3x4_mt b, double3x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt fsm([This] double3x4_mt c, double3x4_mt a, double3x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt fam([This] double3x4_mt c, double3x4_mt a, double3x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double3x4_mt mad([This] double3x4_mt a, double3x4_mt b, double3x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double4_mt csum([This] double3x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static double4_mt cmin([This] double3x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static double4_mt cmax([This] double3x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // double3x4_mt

#region double4x2_mt

public partial struct double4x2_mt
{
    #region Constants

    public static double4x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double4x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double4x2_mt operator+(double4x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static double4x2_mt operator-(double4x2_mt a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt operator+(double4x2_mt a, double4x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt operator-(double4x2_mt a, double4x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a double4x2_mt by double4x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt operator*(double4x2_mt a, double4x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a double4x2_mt by double_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt operator*(double4x2_mt a, double_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double4x2_mt by double4x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt operator*(double_mt a, double4x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a double4x2_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt operator*(double4x2_mt a, double b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a double4x2_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x2_mt operator*(double a, double4x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt operator/(double4x2_mt a, double4x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt operator/(double4x2_mt a, double_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double4x2_mt operator/(double_mt a, double4x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt operator/(double4x2_mt a, double b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static double4x2_mt operator/(double a, double4x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt operator%(double4x2_mt a, double4x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt operator%(double4x2_mt a, double_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double4x2_mt operator%(double_mt a, double4x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt operator%(double4x2_mt a, double b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static double4x2_mt operator%(double a, double4x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static double4x2_mt operator --(double4x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static double4x2_mt operator ++(double4x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4x2_mt abs([This] double4x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static double4x2_mt sign([This] double4x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static double4x2_mt min([This] double4x2_mt a, double4x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static double4x2_mt max([This] double4x2_mt a, double4x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static double4x2_mt clamp([This] double4x2_mt v, double4x2_mt min, double4x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static double4x2_mt square([This] double4x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt fma([This] double4x2_mt a, double4x2_mt b, double4x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt fms([This] double4x2_mt a, double4x2_mt b, double4x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt fnma([This] double4x2_mt a, double4x2_mt b, double4x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt fsm([This] double4x2_mt c, double4x2_mt a, double4x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt fam([This] double4x2_mt c, double4x2_mt a, double4x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x2_mt mad([This] double4x2_mt a, double4x2_mt b, double4x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double2_mt csum([This] double4x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static double2_mt cmin([This] double4x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static double2_mt cmax([This] double4x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // double4x2_mt

#region double4x3_mt

public partial struct double4x3_mt
{
    #region Constants

    public static double4x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double4x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double4x3_mt operator+(double4x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static double4x3_mt operator-(double4x3_mt a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt operator+(double4x3_mt a, double4x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt operator-(double4x3_mt a, double4x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a double4x3_mt by double4x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt operator*(double4x3_mt a, double4x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a double4x3_mt by double_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt operator*(double4x3_mt a, double_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double4x3_mt by double4x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt operator*(double_mt a, double4x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a double4x3_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt operator*(double4x3_mt a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a double4x3_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x3_mt operator*(double a, double4x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt operator/(double4x3_mt a, double4x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt operator/(double4x3_mt a, double_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double4x3_mt operator/(double_mt a, double4x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt operator/(double4x3_mt a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static double4x3_mt operator/(double a, double4x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt operator%(double4x3_mt a, double4x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt operator%(double4x3_mt a, double_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double4x3_mt operator%(double_mt a, double4x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt operator%(double4x3_mt a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static double4x3_mt operator%(double a, double4x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static double4x3_mt operator --(double4x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static double4x3_mt operator ++(double4x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4x3_mt abs([This] double4x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static double4x3_mt sign([This] double4x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static double4x3_mt min([This] double4x3_mt a, double4x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static double4x3_mt max([This] double4x3_mt a, double4x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static double4x3_mt clamp([This] double4x3_mt v, double4x3_mt min, double4x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static double4x3_mt square([This] double4x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt fma([This] double4x3_mt a, double4x3_mt b, double4x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt fms([This] double4x3_mt a, double4x3_mt b, double4x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt fnma([This] double4x3_mt a, double4x3_mt b, double4x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt fsm([This] double4x3_mt c, double4x3_mt a, double4x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt fam([This] double4x3_mt c, double4x3_mt a, double4x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x3_mt mad([This] double4x3_mt a, double4x3_mt b, double4x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double3_mt csum([This] double4x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static double3_mt cmin([This] double4x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static double3_mt cmax([This] double4x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // double4x3_mt

#region double4x4_mt

public partial struct double4x4_mt
{
    #region Constants

    public static double4x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static double4x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1.0); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static double4x4_mt operator+(double4x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static double4x4_mt operator-(double4x4_mt a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt operator+(double4x4_mt a, double4x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt operator-(double4x4_mt a, double4x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a double4x4_mt by double4x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt operator*(double4x4_mt a, double4x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a double4x4_mt by double_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt operator*(double4x4_mt a, double_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double4x4_mt by double4x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt operator*(double_mt a, double4x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a double4x4_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt operator*(double4x4_mt a, double b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a double4x4_mt by double
    /// </summary>
    [MethodImpl(256 | 512)]
    public static double4x4_mt operator*(double a, double4x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt operator/(double4x4_mt a, double4x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt operator/(double4x4_mt a, double_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double4x4_mt operator/(double_mt a, double4x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt operator/(double4x4_mt a, double b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static double4x4_mt operator/(double a, double4x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt operator%(double4x4_mt a, double4x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt operator%(double4x4_mt a, double_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double4x4_mt operator%(double_mt a, double4x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt operator%(double4x4_mt a, double b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static double4x4_mt operator%(double a, double4x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static double4x4_mt operator --(double4x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static double4x4_mt operator ++(double4x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double4x4_mt abs([This] double4x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static double4x4_mt sign([This] double4x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static double4x4_mt min([This] double4x4_mt a, double4x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static double4x4_mt max([This] double4x4_mt a, double4x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static double4x4_mt clamp([This] double4x4_mt v, double4x4_mt min, double4x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static double4x4_mt square([This] double4x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt fma([This] double4x4_mt a, double4x4_mt b, double4x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt fms([This] double4x4_mt a, double4x4_mt b, double4x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt fnma([This] double4x4_mt a, double4x4_mt b, double4x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt fsm([This] double4x4_mt c, double4x4_mt a, double4x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt fam([This] double4x4_mt c, double4x4_mt a, double4x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static double4x4_mt mad([This] double4x4_mt a, double4x4_mt b, double4x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static double4_mt csum([This] double4x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static double4_mt cmin([This] double4x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static double4_mt cmax([This] double4x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // double4x4_mt

#region int2x2_mt

public partial struct int2x2_mt
{
    #region Constants

    public static int2x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int2x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int2x2_mt operator+(int2x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static int2x2_mt operator-(int2x2_mt a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt operator+(int2x2_mt a, int2x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt operator-(int2x2_mt a, int2x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a int2x2_mt by int2x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt operator*(int2x2_mt a, int2x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a int2x2_mt by int_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt operator*(int2x2_mt a, int_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int2x2_mt by int2x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt operator*(int_mt a, int2x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a int2x2_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt operator*(int2x2_mt a, int b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int2x2_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x2_mt operator*(int a, int2x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt operator/(int2x2_mt a, int2x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt operator/(int2x2_mt a, int_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int2x2_mt operator/(int_mt a, int2x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt operator/(int2x2_mt a, int b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int2x2_mt operator/(int a, int2x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt operator%(int2x2_mt a, int2x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt operator%(int2x2_mt a, int_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int2x2_mt operator%(int_mt a, int2x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt operator%(int2x2_mt a, int b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int2x2_mt operator%(int a, int2x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int2x2_mt operator --(int2x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static int2x2_mt operator ++(int2x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2x2_mt abs([This] int2x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static int2x2_mt sign([This] int2x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static int2x2_mt min([This] int2x2_mt a, int2x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static int2x2_mt max([This] int2x2_mt a, int2x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static int2x2_mt clamp([This] int2x2_mt v, int2x2_mt min, int2x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static int2x2_mt square([This] int2x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt fma([This] int2x2_mt a, int2x2_mt b, int2x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt fms([This] int2x2_mt a, int2x2_mt b, int2x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt fnma([This] int2x2_mt a, int2x2_mt b, int2x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt fsm([This] int2x2_mt c, int2x2_mt a, int2x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt fam([This] int2x2_mt c, int2x2_mt a, int2x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x2_mt mad([This] int2x2_mt a, int2x2_mt b, int2x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int2_mt csum([This] int2x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static int2_mt cmin([This] int2x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static int2_mt cmax([This] int2x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // int2x2_mt

#region int2x3_mt

public partial struct int2x3_mt
{
    #region Constants

    public static int2x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int2x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int2x3_mt operator+(int2x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static int2x3_mt operator-(int2x3_mt a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt operator+(int2x3_mt a, int2x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt operator-(int2x3_mt a, int2x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a int2x3_mt by int2x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt operator*(int2x3_mt a, int2x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a int2x3_mt by int_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt operator*(int2x3_mt a, int_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int2x3_mt by int2x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt operator*(int_mt a, int2x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a int2x3_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt operator*(int2x3_mt a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int2x3_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x3_mt operator*(int a, int2x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt operator/(int2x3_mt a, int2x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt operator/(int2x3_mt a, int_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int2x3_mt operator/(int_mt a, int2x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt operator/(int2x3_mt a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int2x3_mt operator/(int a, int2x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt operator%(int2x3_mt a, int2x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt operator%(int2x3_mt a, int_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int2x3_mt operator%(int_mt a, int2x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt operator%(int2x3_mt a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int2x3_mt operator%(int a, int2x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int2x3_mt operator --(int2x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static int2x3_mt operator ++(int2x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2x3_mt abs([This] int2x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static int2x3_mt sign([This] int2x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static int2x3_mt min([This] int2x3_mt a, int2x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static int2x3_mt max([This] int2x3_mt a, int2x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static int2x3_mt clamp([This] int2x3_mt v, int2x3_mt min, int2x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static int2x3_mt square([This] int2x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt fma([This] int2x3_mt a, int2x3_mt b, int2x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt fms([This] int2x3_mt a, int2x3_mt b, int2x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt fnma([This] int2x3_mt a, int2x3_mt b, int2x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt fsm([This] int2x3_mt c, int2x3_mt a, int2x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt fam([This] int2x3_mt c, int2x3_mt a, int2x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x3_mt mad([This] int2x3_mt a, int2x3_mt b, int2x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int3_mt csum([This] int2x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static int3_mt cmin([This] int2x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static int3_mt cmax([This] int2x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // int2x3_mt

#region int2x4_mt

public partial struct int2x4_mt
{
    #region Constants

    public static int2x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int2x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int2x4_mt operator+(int2x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static int2x4_mt operator-(int2x4_mt a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt operator+(int2x4_mt a, int2x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt operator-(int2x4_mt a, int2x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a int2x4_mt by int2x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt operator*(int2x4_mt a, int2x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a int2x4_mt by int_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt operator*(int2x4_mt a, int_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int2x4_mt by int2x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt operator*(int_mt a, int2x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a int2x4_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt operator*(int2x4_mt a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int2x4_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int2x4_mt operator*(int a, int2x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt operator/(int2x4_mt a, int2x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt operator/(int2x4_mt a, int_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int2x4_mt operator/(int_mt a, int2x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt operator/(int2x4_mt a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int2x4_mt operator/(int a, int2x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt operator%(int2x4_mt a, int2x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt operator%(int2x4_mt a, int_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int2x4_mt operator%(int_mt a, int2x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt operator%(int2x4_mt a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int2x4_mt operator%(int a, int2x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int2x4_mt operator --(int2x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static int2x4_mt operator ++(int2x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int2x4_mt abs([This] int2x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static int2x4_mt sign([This] int2x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static int2x4_mt min([This] int2x4_mt a, int2x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static int2x4_mt max([This] int2x4_mt a, int2x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static int2x4_mt clamp([This] int2x4_mt v, int2x4_mt min, int2x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static int2x4_mt square([This] int2x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt fma([This] int2x4_mt a, int2x4_mt b, int2x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt fms([This] int2x4_mt a, int2x4_mt b, int2x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt fnma([This] int2x4_mt a, int2x4_mt b, int2x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt fsm([This] int2x4_mt c, int2x4_mt a, int2x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt fam([This] int2x4_mt c, int2x4_mt a, int2x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int2x4_mt mad([This] int2x4_mt a, int2x4_mt b, int2x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int4_mt csum([This] int2x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static int4_mt cmin([This] int2x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static int4_mt cmax([This] int2x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // int2x4_mt

#region int3x2_mt

public partial struct int3x2_mt
{
    #region Constants

    public static int3x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int3x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int3x2_mt operator+(int3x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static int3x2_mt operator-(int3x2_mt a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt operator+(int3x2_mt a, int3x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt operator-(int3x2_mt a, int3x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a int3x2_mt by int3x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt operator*(int3x2_mt a, int3x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a int3x2_mt by int_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt operator*(int3x2_mt a, int_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int3x2_mt by int3x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt operator*(int_mt a, int3x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a int3x2_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt operator*(int3x2_mt a, int b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int3x2_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x2_mt operator*(int a, int3x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt operator/(int3x2_mt a, int3x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt operator/(int3x2_mt a, int_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int3x2_mt operator/(int_mt a, int3x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt operator/(int3x2_mt a, int b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int3x2_mt operator/(int a, int3x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt operator%(int3x2_mt a, int3x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt operator%(int3x2_mt a, int_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int3x2_mt operator%(int_mt a, int3x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt operator%(int3x2_mt a, int b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int3x2_mt operator%(int a, int3x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int3x2_mt operator --(int3x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static int3x2_mt operator ++(int3x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3x2_mt abs([This] int3x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static int3x2_mt sign([This] int3x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static int3x2_mt min([This] int3x2_mt a, int3x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static int3x2_mt max([This] int3x2_mt a, int3x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static int3x2_mt clamp([This] int3x2_mt v, int3x2_mt min, int3x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static int3x2_mt square([This] int3x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt fma([This] int3x2_mt a, int3x2_mt b, int3x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt fms([This] int3x2_mt a, int3x2_mt b, int3x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt fnma([This] int3x2_mt a, int3x2_mt b, int3x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt fsm([This] int3x2_mt c, int3x2_mt a, int3x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt fam([This] int3x2_mt c, int3x2_mt a, int3x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x2_mt mad([This] int3x2_mt a, int3x2_mt b, int3x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int2_mt csum([This] int3x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static int2_mt cmin([This] int3x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static int2_mt cmax([This] int3x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // int3x2_mt

#region int3x3_mt

public partial struct int3x3_mt
{
    #region Constants

    public static int3x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int3x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int3x3_mt operator+(int3x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static int3x3_mt operator-(int3x3_mt a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt operator+(int3x3_mt a, int3x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt operator-(int3x3_mt a, int3x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a int3x3_mt by int3x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt operator*(int3x3_mt a, int3x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a int3x3_mt by int_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt operator*(int3x3_mt a, int_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int3x3_mt by int3x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt operator*(int_mt a, int3x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a int3x3_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt operator*(int3x3_mt a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int3x3_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x3_mt operator*(int a, int3x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt operator/(int3x3_mt a, int3x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt operator/(int3x3_mt a, int_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int3x3_mt operator/(int_mt a, int3x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt operator/(int3x3_mt a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int3x3_mt operator/(int a, int3x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt operator%(int3x3_mt a, int3x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt operator%(int3x3_mt a, int_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int3x3_mt operator%(int_mt a, int3x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt operator%(int3x3_mt a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int3x3_mt operator%(int a, int3x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int3x3_mt operator --(int3x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static int3x3_mt operator ++(int3x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3x3_mt abs([This] int3x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static int3x3_mt sign([This] int3x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static int3x3_mt min([This] int3x3_mt a, int3x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static int3x3_mt max([This] int3x3_mt a, int3x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static int3x3_mt clamp([This] int3x3_mt v, int3x3_mt min, int3x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static int3x3_mt square([This] int3x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt fma([This] int3x3_mt a, int3x3_mt b, int3x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt fms([This] int3x3_mt a, int3x3_mt b, int3x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt fnma([This] int3x3_mt a, int3x3_mt b, int3x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt fsm([This] int3x3_mt c, int3x3_mt a, int3x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt fam([This] int3x3_mt c, int3x3_mt a, int3x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x3_mt mad([This] int3x3_mt a, int3x3_mt b, int3x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int3_mt csum([This] int3x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static int3_mt cmin([This] int3x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static int3_mt cmax([This] int3x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // int3x3_mt

#region int3x4_mt

public partial struct int3x4_mt
{
    #region Constants

    public static int3x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int3x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int3x4_mt operator+(int3x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static int3x4_mt operator-(int3x4_mt a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt operator+(int3x4_mt a, int3x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt operator-(int3x4_mt a, int3x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a int3x4_mt by int3x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt operator*(int3x4_mt a, int3x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a int3x4_mt by int_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt operator*(int3x4_mt a, int_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int3x4_mt by int3x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt operator*(int_mt a, int3x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a int3x4_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt operator*(int3x4_mt a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int3x4_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int3x4_mt operator*(int a, int3x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt operator/(int3x4_mt a, int3x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt operator/(int3x4_mt a, int_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int3x4_mt operator/(int_mt a, int3x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt operator/(int3x4_mt a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int3x4_mt operator/(int a, int3x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt operator%(int3x4_mt a, int3x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt operator%(int3x4_mt a, int_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int3x4_mt operator%(int_mt a, int3x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt operator%(int3x4_mt a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int3x4_mt operator%(int a, int3x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int3x4_mt operator --(int3x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static int3x4_mt operator ++(int3x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int3x4_mt abs([This] int3x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static int3x4_mt sign([This] int3x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static int3x4_mt min([This] int3x4_mt a, int3x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static int3x4_mt max([This] int3x4_mt a, int3x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static int3x4_mt clamp([This] int3x4_mt v, int3x4_mt min, int3x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static int3x4_mt square([This] int3x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt fma([This] int3x4_mt a, int3x4_mt b, int3x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt fms([This] int3x4_mt a, int3x4_mt b, int3x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt fnma([This] int3x4_mt a, int3x4_mt b, int3x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt fsm([This] int3x4_mt c, int3x4_mt a, int3x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt fam([This] int3x4_mt c, int3x4_mt a, int3x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int3x4_mt mad([This] int3x4_mt a, int3x4_mt b, int3x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int4_mt csum([This] int3x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static int4_mt cmin([This] int3x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static int4_mt cmax([This] int3x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // int3x4_mt

#region int4x2_mt

public partial struct int4x2_mt
{
    #region Constants

    public static int4x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int4x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int4x2_mt operator+(int4x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static int4x2_mt operator-(int4x2_mt a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt operator+(int4x2_mt a, int4x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt operator-(int4x2_mt a, int4x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a int4x2_mt by int4x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt operator*(int4x2_mt a, int4x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a int4x2_mt by int_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt operator*(int4x2_mt a, int_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int4x2_mt by int4x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt operator*(int_mt a, int4x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a int4x2_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt operator*(int4x2_mt a, int b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a int4x2_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x2_mt operator*(int a, int4x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt operator/(int4x2_mt a, int4x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt operator/(int4x2_mt a, int_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int4x2_mt operator/(int_mt a, int4x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt operator/(int4x2_mt a, int b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static int4x2_mt operator/(int a, int4x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt operator%(int4x2_mt a, int4x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt operator%(int4x2_mt a, int_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int4x2_mt operator%(int_mt a, int4x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt operator%(int4x2_mt a, int b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static int4x2_mt operator%(int a, int4x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static int4x2_mt operator --(int4x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static int4x2_mt operator ++(int4x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4x2_mt abs([This] int4x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static int4x2_mt sign([This] int4x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static int4x2_mt min([This] int4x2_mt a, int4x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static int4x2_mt max([This] int4x2_mt a, int4x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static int4x2_mt clamp([This] int4x2_mt v, int4x2_mt min, int4x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static int4x2_mt square([This] int4x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt fma([This] int4x2_mt a, int4x2_mt b, int4x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt fms([This] int4x2_mt a, int4x2_mt b, int4x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt fnma([This] int4x2_mt a, int4x2_mt b, int4x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt fsm([This] int4x2_mt c, int4x2_mt a, int4x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt fam([This] int4x2_mt c, int4x2_mt a, int4x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x2_mt mad([This] int4x2_mt a, int4x2_mt b, int4x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int2_mt csum([This] int4x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static int2_mt cmin([This] int4x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static int2_mt cmax([This] int4x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // int4x2_mt

#region int4x3_mt

public partial struct int4x3_mt
{
    #region Constants

    public static int4x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int4x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int4x3_mt operator+(int4x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static int4x3_mt operator-(int4x3_mt a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt operator+(int4x3_mt a, int4x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt operator-(int4x3_mt a, int4x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a int4x3_mt by int4x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt operator*(int4x3_mt a, int4x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a int4x3_mt by int_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt operator*(int4x3_mt a, int_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int4x3_mt by int4x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt operator*(int_mt a, int4x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a int4x3_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt operator*(int4x3_mt a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a int4x3_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x3_mt operator*(int a, int4x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt operator/(int4x3_mt a, int4x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt operator/(int4x3_mt a, int_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int4x3_mt operator/(int_mt a, int4x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt operator/(int4x3_mt a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static int4x3_mt operator/(int a, int4x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt operator%(int4x3_mt a, int4x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt operator%(int4x3_mt a, int_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int4x3_mt operator%(int_mt a, int4x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt operator%(int4x3_mt a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static int4x3_mt operator%(int a, int4x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static int4x3_mt operator --(int4x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static int4x3_mt operator ++(int4x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4x3_mt abs([This] int4x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static int4x3_mt sign([This] int4x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static int4x3_mt min([This] int4x3_mt a, int4x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static int4x3_mt max([This] int4x3_mt a, int4x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static int4x3_mt clamp([This] int4x3_mt v, int4x3_mt min, int4x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static int4x3_mt square([This] int4x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt fma([This] int4x3_mt a, int4x3_mt b, int4x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt fms([This] int4x3_mt a, int4x3_mt b, int4x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt fnma([This] int4x3_mt a, int4x3_mt b, int4x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt fsm([This] int4x3_mt c, int4x3_mt a, int4x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt fam([This] int4x3_mt c, int4x3_mt a, int4x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x3_mt mad([This] int4x3_mt a, int4x3_mt b, int4x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int3_mt csum([This] int4x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static int3_mt cmin([This] int4x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static int3_mt cmax([This] int4x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // int4x3_mt

#region int4x4_mt

public partial struct int4x4_mt
{
    #region Constants

    public static int4x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static int4x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static int4x4_mt operator+(int4x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static int4x4_mt operator-(int4x4_mt a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt operator+(int4x4_mt a, int4x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt operator-(int4x4_mt a, int4x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a int4x4_mt by int4x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt operator*(int4x4_mt a, int4x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a int4x4_mt by int_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt operator*(int4x4_mt a, int_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int4x4_mt by int4x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt operator*(int_mt a, int4x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a int4x4_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt operator*(int4x4_mt a, int b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a int4x4_mt by int
    /// </summary>
    [MethodImpl(256 | 512)]
    public static int4x4_mt operator*(int a, int4x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt operator/(int4x4_mt a, int4x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt operator/(int4x4_mt a, int_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int4x4_mt operator/(int_mt a, int4x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt operator/(int4x4_mt a, int b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static int4x4_mt operator/(int a, int4x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt operator%(int4x4_mt a, int4x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt operator%(int4x4_mt a, int_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int4x4_mt operator%(int_mt a, int4x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt operator%(int4x4_mt a, int b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static int4x4_mt operator%(int a, int4x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static int4x4_mt operator --(int4x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static int4x4_mt operator ++(int4x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int4x4_mt abs([This] int4x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static int4x4_mt sign([This] int4x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static int4x4_mt min([This] int4x4_mt a, int4x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static int4x4_mt max([This] int4x4_mt a, int4x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static int4x4_mt clamp([This] int4x4_mt v, int4x4_mt min, int4x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static int4x4_mt square([This] int4x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt fma([This] int4x4_mt a, int4x4_mt b, int4x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt fms([This] int4x4_mt a, int4x4_mt b, int4x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt fnma([This] int4x4_mt a, int4x4_mt b, int4x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt fsm([This] int4x4_mt c, int4x4_mt a, int4x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt fam([This] int4x4_mt c, int4x4_mt a, int4x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static int4x4_mt mad([This] int4x4_mt a, int4x4_mt b, int4x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static int4_mt csum([This] int4x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static int4_mt cmin([This] int4x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static int4_mt cmax([This] int4x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // int4x4_mt

#region uint2x2_mt

public partial struct uint2x2_mt
{
    #region Constants

    public static uint2x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint2x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator+(uint2x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator+(uint2x2_mt a, uint2x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator-(uint2x2_mt a, uint2x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a uint2x2_mt by uint2x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator*(uint2x2_mt a, uint2x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a uint2x2_mt by uint_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator*(uint2x2_mt a, uint_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint2x2_mt by uint2x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator*(uint_mt a, uint2x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a uint2x2_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator*(uint2x2_mt a, uint b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint2x2_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator*(uint a, uint2x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator/(uint2x2_mt a, uint2x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator/(uint2x2_mt a, uint_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator/(uint_mt a, uint2x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator/(uint2x2_mt a, uint b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator/(uint a, uint2x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator%(uint2x2_mt a, uint2x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator%(uint2x2_mt a, uint_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator%(uint_mt a, uint2x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator%(uint2x2_mt a, uint b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator%(uint a, uint2x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator --(uint2x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint2x2_mt operator ++(uint2x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2x2_mt abs([This] uint2x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static uint2x2_mt sign([This] uint2x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static uint2x2_mt min([This] uint2x2_mt a, uint2x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static uint2x2_mt max([This] uint2x2_mt a, uint2x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static uint2x2_mt clamp([This] uint2x2_mt v, uint2x2_mt min, uint2x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static uint2x2_mt square([This] uint2x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt fma([This] uint2x2_mt a, uint2x2_mt b, uint2x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt fms([This] uint2x2_mt a, uint2x2_mt b, uint2x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt fnma([This] uint2x2_mt a, uint2x2_mt b, uint2x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt fsm([This] uint2x2_mt c, uint2x2_mt a, uint2x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt fam([This] uint2x2_mt c, uint2x2_mt a, uint2x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x2_mt mad([This] uint2x2_mt a, uint2x2_mt b, uint2x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint2_mt csum([This] uint2x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static uint2_mt cmin([This] uint2x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static uint2_mt cmax([This] uint2x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // uint2x2_mt

#region uint2x3_mt

public partial struct uint2x3_mt
{
    #region Constants

    public static uint2x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint2x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator+(uint2x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator+(uint2x3_mt a, uint2x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator-(uint2x3_mt a, uint2x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a uint2x3_mt by uint2x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator*(uint2x3_mt a, uint2x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a uint2x3_mt by uint_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator*(uint2x3_mt a, uint_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint2x3_mt by uint2x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator*(uint_mt a, uint2x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a uint2x3_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator*(uint2x3_mt a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint2x3_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator*(uint a, uint2x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator/(uint2x3_mt a, uint2x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator/(uint2x3_mt a, uint_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator/(uint_mt a, uint2x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator/(uint2x3_mt a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator/(uint a, uint2x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator%(uint2x3_mt a, uint2x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator%(uint2x3_mt a, uint_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator%(uint_mt a, uint2x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator%(uint2x3_mt a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator%(uint a, uint2x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator --(uint2x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint2x3_mt operator ++(uint2x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2x3_mt abs([This] uint2x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static uint2x3_mt sign([This] uint2x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static uint2x3_mt min([This] uint2x3_mt a, uint2x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static uint2x3_mt max([This] uint2x3_mt a, uint2x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static uint2x3_mt clamp([This] uint2x3_mt v, uint2x3_mt min, uint2x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static uint2x3_mt square([This] uint2x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt fma([This] uint2x3_mt a, uint2x3_mt b, uint2x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt fms([This] uint2x3_mt a, uint2x3_mt b, uint2x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt fnma([This] uint2x3_mt a, uint2x3_mt b, uint2x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt fsm([This] uint2x3_mt c, uint2x3_mt a, uint2x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt fam([This] uint2x3_mt c, uint2x3_mt a, uint2x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x3_mt mad([This] uint2x3_mt a, uint2x3_mt b, uint2x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint3_mt csum([This] uint2x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static uint3_mt cmin([This] uint2x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static uint3_mt cmax([This] uint2x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // uint2x3_mt

#region uint2x4_mt

public partial struct uint2x4_mt
{
    #region Constants

    public static uint2x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint2x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator+(uint2x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator+(uint2x4_mt a, uint2x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator-(uint2x4_mt a, uint2x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a uint2x4_mt by uint2x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator*(uint2x4_mt a, uint2x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a uint2x4_mt by uint_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator*(uint2x4_mt a, uint_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint2x4_mt by uint2x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator*(uint_mt a, uint2x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a uint2x4_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator*(uint2x4_mt a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint2x4_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator*(uint a, uint2x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator/(uint2x4_mt a, uint2x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator/(uint2x4_mt a, uint_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator/(uint_mt a, uint2x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator/(uint2x4_mt a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator/(uint a, uint2x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator%(uint2x4_mt a, uint2x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator%(uint2x4_mt a, uint_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator%(uint_mt a, uint2x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator%(uint2x4_mt a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator%(uint a, uint2x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator --(uint2x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint2x4_mt operator ++(uint2x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint2x4_mt abs([This] uint2x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static uint2x4_mt sign([This] uint2x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static uint2x4_mt min([This] uint2x4_mt a, uint2x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static uint2x4_mt max([This] uint2x4_mt a, uint2x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static uint2x4_mt clamp([This] uint2x4_mt v, uint2x4_mt min, uint2x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static uint2x4_mt square([This] uint2x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt fma([This] uint2x4_mt a, uint2x4_mt b, uint2x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt fms([This] uint2x4_mt a, uint2x4_mt b, uint2x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt fnma([This] uint2x4_mt a, uint2x4_mt b, uint2x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt fsm([This] uint2x4_mt c, uint2x4_mt a, uint2x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt fam([This] uint2x4_mt c, uint2x4_mt a, uint2x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint2x4_mt mad([This] uint2x4_mt a, uint2x4_mt b, uint2x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint4_mt csum([This] uint2x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static uint4_mt cmin([This] uint2x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static uint4_mt cmax([This] uint2x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // uint2x4_mt

#region uint3x2_mt

public partial struct uint3x2_mt
{
    #region Constants

    public static uint3x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint3x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator+(uint3x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator+(uint3x2_mt a, uint3x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator-(uint3x2_mt a, uint3x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a uint3x2_mt by uint3x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator*(uint3x2_mt a, uint3x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a uint3x2_mt by uint_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator*(uint3x2_mt a, uint_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint3x2_mt by uint3x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator*(uint_mt a, uint3x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a uint3x2_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator*(uint3x2_mt a, uint b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint3x2_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator*(uint a, uint3x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator/(uint3x2_mt a, uint3x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator/(uint3x2_mt a, uint_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator/(uint_mt a, uint3x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator/(uint3x2_mt a, uint b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator/(uint a, uint3x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator%(uint3x2_mt a, uint3x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator%(uint3x2_mt a, uint_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator%(uint_mt a, uint3x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator%(uint3x2_mt a, uint b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator%(uint a, uint3x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator --(uint3x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint3x2_mt operator ++(uint3x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3x2_mt abs([This] uint3x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static uint3x2_mt sign([This] uint3x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static uint3x2_mt min([This] uint3x2_mt a, uint3x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static uint3x2_mt max([This] uint3x2_mt a, uint3x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static uint3x2_mt clamp([This] uint3x2_mt v, uint3x2_mt min, uint3x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static uint3x2_mt square([This] uint3x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt fma([This] uint3x2_mt a, uint3x2_mt b, uint3x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt fms([This] uint3x2_mt a, uint3x2_mt b, uint3x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt fnma([This] uint3x2_mt a, uint3x2_mt b, uint3x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt fsm([This] uint3x2_mt c, uint3x2_mt a, uint3x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt fam([This] uint3x2_mt c, uint3x2_mt a, uint3x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x2_mt mad([This] uint3x2_mt a, uint3x2_mt b, uint3x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint2_mt csum([This] uint3x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static uint2_mt cmin([This] uint3x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static uint2_mt cmax([This] uint3x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // uint3x2_mt

#region uint3x3_mt

public partial struct uint3x3_mt
{
    #region Constants

    public static uint3x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint3x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator+(uint3x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator+(uint3x3_mt a, uint3x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator-(uint3x3_mt a, uint3x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a uint3x3_mt by uint3x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator*(uint3x3_mt a, uint3x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a uint3x3_mt by uint_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator*(uint3x3_mt a, uint_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint3x3_mt by uint3x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator*(uint_mt a, uint3x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a uint3x3_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator*(uint3x3_mt a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint3x3_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator*(uint a, uint3x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator/(uint3x3_mt a, uint3x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator/(uint3x3_mt a, uint_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator/(uint_mt a, uint3x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator/(uint3x3_mt a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator/(uint a, uint3x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator%(uint3x3_mt a, uint3x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator%(uint3x3_mt a, uint_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator%(uint_mt a, uint3x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator%(uint3x3_mt a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator%(uint a, uint3x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator --(uint3x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint3x3_mt operator ++(uint3x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3x3_mt abs([This] uint3x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static uint3x3_mt sign([This] uint3x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static uint3x3_mt min([This] uint3x3_mt a, uint3x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static uint3x3_mt max([This] uint3x3_mt a, uint3x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static uint3x3_mt clamp([This] uint3x3_mt v, uint3x3_mt min, uint3x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static uint3x3_mt square([This] uint3x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt fma([This] uint3x3_mt a, uint3x3_mt b, uint3x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt fms([This] uint3x3_mt a, uint3x3_mt b, uint3x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt fnma([This] uint3x3_mt a, uint3x3_mt b, uint3x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt fsm([This] uint3x3_mt c, uint3x3_mt a, uint3x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt fam([This] uint3x3_mt c, uint3x3_mt a, uint3x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x3_mt mad([This] uint3x3_mt a, uint3x3_mt b, uint3x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint3_mt csum([This] uint3x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static uint3_mt cmin([This] uint3x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static uint3_mt cmax([This] uint3x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // uint3x3_mt

#region uint3x4_mt

public partial struct uint3x4_mt
{
    #region Constants

    public static uint3x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint3x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator+(uint3x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator+(uint3x4_mt a, uint3x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator-(uint3x4_mt a, uint3x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a uint3x4_mt by uint3x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator*(uint3x4_mt a, uint3x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a uint3x4_mt by uint_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator*(uint3x4_mt a, uint_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint3x4_mt by uint3x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator*(uint_mt a, uint3x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a uint3x4_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator*(uint3x4_mt a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint3x4_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator*(uint a, uint3x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator/(uint3x4_mt a, uint3x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator/(uint3x4_mt a, uint_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator/(uint_mt a, uint3x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator/(uint3x4_mt a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator/(uint a, uint3x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator%(uint3x4_mt a, uint3x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator%(uint3x4_mt a, uint_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator%(uint_mt a, uint3x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator%(uint3x4_mt a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator%(uint a, uint3x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator --(uint3x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint3x4_mt operator ++(uint3x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint3x4_mt abs([This] uint3x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static uint3x4_mt sign([This] uint3x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static uint3x4_mt min([This] uint3x4_mt a, uint3x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static uint3x4_mt max([This] uint3x4_mt a, uint3x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static uint3x4_mt clamp([This] uint3x4_mt v, uint3x4_mt min, uint3x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static uint3x4_mt square([This] uint3x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt fma([This] uint3x4_mt a, uint3x4_mt b, uint3x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt fms([This] uint3x4_mt a, uint3x4_mt b, uint3x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt fnma([This] uint3x4_mt a, uint3x4_mt b, uint3x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt fsm([This] uint3x4_mt c, uint3x4_mt a, uint3x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt fam([This] uint3x4_mt c, uint3x4_mt a, uint3x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint3x4_mt mad([This] uint3x4_mt a, uint3x4_mt b, uint3x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint4_mt csum([This] uint3x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static uint4_mt cmin([This] uint3x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static uint4_mt cmax([This] uint3x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // uint3x4_mt

#region uint4x2_mt

public partial struct uint4x2_mt
{
    #region Constants

    public static uint4x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint4x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator+(uint4x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator+(uint4x2_mt a, uint4x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator-(uint4x2_mt a, uint4x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a uint4x2_mt by uint4x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator*(uint4x2_mt a, uint4x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a uint4x2_mt by uint_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator*(uint4x2_mt a, uint_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint4x2_mt by uint4x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator*(uint_mt a, uint4x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a uint4x2_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator*(uint4x2_mt a, uint b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a uint4x2_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator*(uint a, uint4x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator/(uint4x2_mt a, uint4x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator/(uint4x2_mt a, uint_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator/(uint_mt a, uint4x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator/(uint4x2_mt a, uint b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator/(uint a, uint4x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator%(uint4x2_mt a, uint4x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator%(uint4x2_mt a, uint_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator%(uint_mt a, uint4x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator%(uint4x2_mt a, uint b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator%(uint a, uint4x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator --(uint4x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint4x2_mt operator ++(uint4x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4x2_mt abs([This] uint4x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static uint4x2_mt sign([This] uint4x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static uint4x2_mt min([This] uint4x2_mt a, uint4x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static uint4x2_mt max([This] uint4x2_mt a, uint4x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static uint4x2_mt clamp([This] uint4x2_mt v, uint4x2_mt min, uint4x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static uint4x2_mt square([This] uint4x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt fma([This] uint4x2_mt a, uint4x2_mt b, uint4x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt fms([This] uint4x2_mt a, uint4x2_mt b, uint4x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt fnma([This] uint4x2_mt a, uint4x2_mt b, uint4x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt fsm([This] uint4x2_mt c, uint4x2_mt a, uint4x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt fam([This] uint4x2_mt c, uint4x2_mt a, uint4x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x2_mt mad([This] uint4x2_mt a, uint4x2_mt b, uint4x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint2_mt csum([This] uint4x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static uint2_mt cmin([This] uint4x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static uint2_mt cmax([This] uint4x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // uint4x2_mt

#region uint4x3_mt

public partial struct uint4x3_mt
{
    #region Constants

    public static uint4x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint4x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator+(uint4x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator+(uint4x3_mt a, uint4x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator-(uint4x3_mt a, uint4x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a uint4x3_mt by uint4x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator*(uint4x3_mt a, uint4x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a uint4x3_mt by uint_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator*(uint4x3_mt a, uint_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint4x3_mt by uint4x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator*(uint_mt a, uint4x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a uint4x3_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator*(uint4x3_mt a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a uint4x3_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator*(uint a, uint4x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator/(uint4x3_mt a, uint4x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator/(uint4x3_mt a, uint_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator/(uint_mt a, uint4x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator/(uint4x3_mt a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator/(uint a, uint4x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator%(uint4x3_mt a, uint4x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator%(uint4x3_mt a, uint_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator%(uint_mt a, uint4x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator%(uint4x3_mt a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator%(uint a, uint4x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator --(uint4x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint4x3_mt operator ++(uint4x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4x3_mt abs([This] uint4x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static uint4x3_mt sign([This] uint4x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static uint4x3_mt min([This] uint4x3_mt a, uint4x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static uint4x3_mt max([This] uint4x3_mt a, uint4x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static uint4x3_mt clamp([This] uint4x3_mt v, uint4x3_mt min, uint4x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static uint4x3_mt square([This] uint4x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt fma([This] uint4x3_mt a, uint4x3_mt b, uint4x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt fms([This] uint4x3_mt a, uint4x3_mt b, uint4x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt fnma([This] uint4x3_mt a, uint4x3_mt b, uint4x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt fsm([This] uint4x3_mt c, uint4x3_mt a, uint4x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt fam([This] uint4x3_mt c, uint4x3_mt a, uint4x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x3_mt mad([This] uint4x3_mt a, uint4x3_mt b, uint4x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint3_mt csum([This] uint4x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static uint3_mt cmin([This] uint4x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static uint3_mt cmax([This] uint4x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // uint4x3_mt

#region uint4x4_mt

public partial struct uint4x4_mt
{
    #region Constants

    public static uint4x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static uint4x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1u); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator+(uint4x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator+(uint4x4_mt a, uint4x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator-(uint4x4_mt a, uint4x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a uint4x4_mt by uint4x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator*(uint4x4_mt a, uint4x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a uint4x4_mt by uint_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator*(uint4x4_mt a, uint_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint4x4_mt by uint4x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator*(uint_mt a, uint4x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a uint4x4_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator*(uint4x4_mt a, uint b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a uint4x4_mt by uint
    /// </summary>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator*(uint a, uint4x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator/(uint4x4_mt a, uint4x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator/(uint4x4_mt a, uint_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator/(uint_mt a, uint4x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator/(uint4x4_mt a, uint b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator/(uint a, uint4x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator%(uint4x4_mt a, uint4x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator%(uint4x4_mt a, uint_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator%(uint_mt a, uint4x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator%(uint4x4_mt a, uint b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator%(uint a, uint4x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator --(uint4x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static uint4x4_mt operator ++(uint4x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint4x4_mt abs([This] uint4x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static uint4x4_mt sign([This] uint4x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static uint4x4_mt min([This] uint4x4_mt a, uint4x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static uint4x4_mt max([This] uint4x4_mt a, uint4x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static uint4x4_mt clamp([This] uint4x4_mt v, uint4x4_mt min, uint4x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static uint4x4_mt square([This] uint4x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt fma([This] uint4x4_mt a, uint4x4_mt b, uint4x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt fms([This] uint4x4_mt a, uint4x4_mt b, uint4x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt fnma([This] uint4x4_mt a, uint4x4_mt b, uint4x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt fsm([This] uint4x4_mt c, uint4x4_mt a, uint4x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt fam([This] uint4x4_mt c, uint4x4_mt a, uint4x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static uint4x4_mt mad([This] uint4x4_mt a, uint4x4_mt b, uint4x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static uint4_mt csum([This] uint4x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static uint4_mt cmin([This] uint4x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static uint4_mt cmax([This] uint4x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // uint4x4_mt

#region long2x2_mt

public partial struct long2x2_mt
{
    #region Constants

    public static long2x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long2x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long2x2_mt operator+(long2x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static long2x2_mt operator-(long2x2_mt a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt operator+(long2x2_mt a, long2x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt operator-(long2x2_mt a, long2x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a long2x2_mt by long2x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt operator*(long2x2_mt a, long2x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a long2x2_mt by long_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt operator*(long2x2_mt a, long_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long2x2_mt by long2x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt operator*(long_mt a, long2x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a long2x2_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt operator*(long2x2_mt a, long b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long2x2_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x2_mt operator*(long a, long2x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt operator/(long2x2_mt a, long2x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt operator/(long2x2_mt a, long_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long2x2_mt operator/(long_mt a, long2x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt operator/(long2x2_mt a, long b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long2x2_mt operator/(long a, long2x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt operator%(long2x2_mt a, long2x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt operator%(long2x2_mt a, long_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long2x2_mt operator%(long_mt a, long2x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt operator%(long2x2_mt a, long b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long2x2_mt operator%(long a, long2x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long2x2_mt operator --(long2x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static long2x2_mt operator ++(long2x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2x2_mt abs([This] long2x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static long2x2_mt sign([This] long2x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static long2x2_mt min([This] long2x2_mt a, long2x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static long2x2_mt max([This] long2x2_mt a, long2x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static long2x2_mt clamp([This] long2x2_mt v, long2x2_mt min, long2x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static long2x2_mt square([This] long2x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt fma([This] long2x2_mt a, long2x2_mt b, long2x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt fms([This] long2x2_mt a, long2x2_mt b, long2x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt fnma([This] long2x2_mt a, long2x2_mt b, long2x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt fsm([This] long2x2_mt c, long2x2_mt a, long2x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt fam([This] long2x2_mt c, long2x2_mt a, long2x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x2_mt mad([This] long2x2_mt a, long2x2_mt b, long2x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long2_mt csum([This] long2x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static long2_mt cmin([This] long2x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static long2_mt cmax([This] long2x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // long2x2_mt

#region long2x3_mt

public partial struct long2x3_mt
{
    #region Constants

    public static long2x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long2x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long2x3_mt operator+(long2x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static long2x3_mt operator-(long2x3_mt a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt operator+(long2x3_mt a, long2x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt operator-(long2x3_mt a, long2x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a long2x3_mt by long2x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt operator*(long2x3_mt a, long2x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a long2x3_mt by long_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt operator*(long2x3_mt a, long_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long2x3_mt by long2x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt operator*(long_mt a, long2x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a long2x3_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt operator*(long2x3_mt a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long2x3_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x3_mt operator*(long a, long2x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt operator/(long2x3_mt a, long2x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt operator/(long2x3_mt a, long_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long2x3_mt operator/(long_mt a, long2x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt operator/(long2x3_mt a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long2x3_mt operator/(long a, long2x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt operator%(long2x3_mt a, long2x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt operator%(long2x3_mt a, long_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long2x3_mt operator%(long_mt a, long2x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt operator%(long2x3_mt a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long2x3_mt operator%(long a, long2x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long2x3_mt operator --(long2x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static long2x3_mt operator ++(long2x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2x3_mt abs([This] long2x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static long2x3_mt sign([This] long2x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static long2x3_mt min([This] long2x3_mt a, long2x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static long2x3_mt max([This] long2x3_mt a, long2x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static long2x3_mt clamp([This] long2x3_mt v, long2x3_mt min, long2x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static long2x3_mt square([This] long2x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt fma([This] long2x3_mt a, long2x3_mt b, long2x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt fms([This] long2x3_mt a, long2x3_mt b, long2x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt fnma([This] long2x3_mt a, long2x3_mt b, long2x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt fsm([This] long2x3_mt c, long2x3_mt a, long2x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt fam([This] long2x3_mt c, long2x3_mt a, long2x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x3_mt mad([This] long2x3_mt a, long2x3_mt b, long2x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long3_mt csum([This] long2x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static long3_mt cmin([This] long2x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static long3_mt cmax([This] long2x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // long2x3_mt

#region long2x4_mt

public partial struct long2x4_mt
{
    #region Constants

    public static long2x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long2x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long2x4_mt operator+(long2x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static long2x4_mt operator-(long2x4_mt a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt operator+(long2x4_mt a, long2x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt operator-(long2x4_mt a, long2x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a long2x4_mt by long2x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt operator*(long2x4_mt a, long2x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a long2x4_mt by long_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt operator*(long2x4_mt a, long_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long2x4_mt by long2x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt operator*(long_mt a, long2x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a long2x4_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt operator*(long2x4_mt a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long2x4_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long2x4_mt operator*(long a, long2x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt operator/(long2x4_mt a, long2x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt operator/(long2x4_mt a, long_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long2x4_mt operator/(long_mt a, long2x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt operator/(long2x4_mt a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long2x4_mt operator/(long a, long2x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt operator%(long2x4_mt a, long2x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt operator%(long2x4_mt a, long_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long2x4_mt operator%(long_mt a, long2x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt operator%(long2x4_mt a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long2x4_mt operator%(long a, long2x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long2x4_mt operator --(long2x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static long2x4_mt operator ++(long2x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long2x4_mt abs([This] long2x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static long2x4_mt sign([This] long2x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static long2x4_mt min([This] long2x4_mt a, long2x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static long2x4_mt max([This] long2x4_mt a, long2x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static long2x4_mt clamp([This] long2x4_mt v, long2x4_mt min, long2x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static long2x4_mt square([This] long2x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt fma([This] long2x4_mt a, long2x4_mt b, long2x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt fms([This] long2x4_mt a, long2x4_mt b, long2x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt fnma([This] long2x4_mt a, long2x4_mt b, long2x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt fsm([This] long2x4_mt c, long2x4_mt a, long2x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt fam([This] long2x4_mt c, long2x4_mt a, long2x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long2x4_mt mad([This] long2x4_mt a, long2x4_mt b, long2x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long4_mt csum([This] long2x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static long4_mt cmin([This] long2x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static long4_mt cmax([This] long2x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // long2x4_mt

#region long3x2_mt

public partial struct long3x2_mt
{
    #region Constants

    public static long3x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long3x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long3x2_mt operator+(long3x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static long3x2_mt operator-(long3x2_mt a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt operator+(long3x2_mt a, long3x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt operator-(long3x2_mt a, long3x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a long3x2_mt by long3x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt operator*(long3x2_mt a, long3x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a long3x2_mt by long_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt operator*(long3x2_mt a, long_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long3x2_mt by long3x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt operator*(long_mt a, long3x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a long3x2_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt operator*(long3x2_mt a, long b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long3x2_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x2_mt operator*(long a, long3x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt operator/(long3x2_mt a, long3x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt operator/(long3x2_mt a, long_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long3x2_mt operator/(long_mt a, long3x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt operator/(long3x2_mt a, long b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long3x2_mt operator/(long a, long3x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt operator%(long3x2_mt a, long3x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt operator%(long3x2_mt a, long_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long3x2_mt operator%(long_mt a, long3x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt operator%(long3x2_mt a, long b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long3x2_mt operator%(long a, long3x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long3x2_mt operator --(long3x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static long3x2_mt operator ++(long3x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3x2_mt abs([This] long3x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static long3x2_mt sign([This] long3x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static long3x2_mt min([This] long3x2_mt a, long3x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static long3x2_mt max([This] long3x2_mt a, long3x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static long3x2_mt clamp([This] long3x2_mt v, long3x2_mt min, long3x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static long3x2_mt square([This] long3x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt fma([This] long3x2_mt a, long3x2_mt b, long3x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt fms([This] long3x2_mt a, long3x2_mt b, long3x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt fnma([This] long3x2_mt a, long3x2_mt b, long3x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt fsm([This] long3x2_mt c, long3x2_mt a, long3x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt fam([This] long3x2_mt c, long3x2_mt a, long3x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x2_mt mad([This] long3x2_mt a, long3x2_mt b, long3x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long2_mt csum([This] long3x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static long2_mt cmin([This] long3x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static long2_mt cmax([This] long3x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // long3x2_mt

#region long3x3_mt

public partial struct long3x3_mt
{
    #region Constants

    public static long3x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long3x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long3x3_mt operator+(long3x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static long3x3_mt operator-(long3x3_mt a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt operator+(long3x3_mt a, long3x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt operator-(long3x3_mt a, long3x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a long3x3_mt by long3x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt operator*(long3x3_mt a, long3x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a long3x3_mt by long_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt operator*(long3x3_mt a, long_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long3x3_mt by long3x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt operator*(long_mt a, long3x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a long3x3_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt operator*(long3x3_mt a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long3x3_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x3_mt operator*(long a, long3x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt operator/(long3x3_mt a, long3x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt operator/(long3x3_mt a, long_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long3x3_mt operator/(long_mt a, long3x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt operator/(long3x3_mt a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long3x3_mt operator/(long a, long3x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt operator%(long3x3_mt a, long3x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt operator%(long3x3_mt a, long_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long3x3_mt operator%(long_mt a, long3x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt operator%(long3x3_mt a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long3x3_mt operator%(long a, long3x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long3x3_mt operator --(long3x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static long3x3_mt operator ++(long3x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3x3_mt abs([This] long3x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static long3x3_mt sign([This] long3x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static long3x3_mt min([This] long3x3_mt a, long3x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static long3x3_mt max([This] long3x3_mt a, long3x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static long3x3_mt clamp([This] long3x3_mt v, long3x3_mt min, long3x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static long3x3_mt square([This] long3x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt fma([This] long3x3_mt a, long3x3_mt b, long3x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt fms([This] long3x3_mt a, long3x3_mt b, long3x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt fnma([This] long3x3_mt a, long3x3_mt b, long3x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt fsm([This] long3x3_mt c, long3x3_mt a, long3x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt fam([This] long3x3_mt c, long3x3_mt a, long3x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x3_mt mad([This] long3x3_mt a, long3x3_mt b, long3x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long3_mt csum([This] long3x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static long3_mt cmin([This] long3x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static long3_mt cmax([This] long3x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // long3x3_mt

#region long3x4_mt

public partial struct long3x4_mt
{
    #region Constants

    public static long3x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long3x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long3x4_mt operator+(long3x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static long3x4_mt operator-(long3x4_mt a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt operator+(long3x4_mt a, long3x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt operator-(long3x4_mt a, long3x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a long3x4_mt by long3x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt operator*(long3x4_mt a, long3x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a long3x4_mt by long_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt operator*(long3x4_mt a, long_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long3x4_mt by long3x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt operator*(long_mt a, long3x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a long3x4_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt operator*(long3x4_mt a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long3x4_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long3x4_mt operator*(long a, long3x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt operator/(long3x4_mt a, long3x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt operator/(long3x4_mt a, long_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long3x4_mt operator/(long_mt a, long3x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt operator/(long3x4_mt a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long3x4_mt operator/(long a, long3x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt operator%(long3x4_mt a, long3x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt operator%(long3x4_mt a, long_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long3x4_mt operator%(long_mt a, long3x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt operator%(long3x4_mt a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long3x4_mt operator%(long a, long3x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long3x4_mt operator --(long3x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static long3x4_mt operator ++(long3x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long3x4_mt abs([This] long3x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static long3x4_mt sign([This] long3x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static long3x4_mt min([This] long3x4_mt a, long3x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static long3x4_mt max([This] long3x4_mt a, long3x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static long3x4_mt clamp([This] long3x4_mt v, long3x4_mt min, long3x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static long3x4_mt square([This] long3x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt fma([This] long3x4_mt a, long3x4_mt b, long3x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt fms([This] long3x4_mt a, long3x4_mt b, long3x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt fnma([This] long3x4_mt a, long3x4_mt b, long3x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt fsm([This] long3x4_mt c, long3x4_mt a, long3x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt fam([This] long3x4_mt c, long3x4_mt a, long3x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long3x4_mt mad([This] long3x4_mt a, long3x4_mt b, long3x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long4_mt csum([This] long3x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static long4_mt cmin([This] long3x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static long4_mt cmax([This] long3x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // long3x4_mt

#region long4x2_mt

public partial struct long4x2_mt
{
    #region Constants

    public static long4x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long4x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long4x2_mt operator+(long4x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static long4x2_mt operator-(long4x2_mt a) => new(-a.c0, -a.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt operator+(long4x2_mt a, long4x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt operator-(long4x2_mt a, long4x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a long4x2_mt by long4x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt operator*(long4x2_mt a, long4x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a long4x2_mt by long_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt operator*(long4x2_mt a, long_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long4x2_mt by long4x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt operator*(long_mt a, long4x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a long4x2_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt operator*(long4x2_mt a, long b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a long4x2_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x2_mt operator*(long a, long4x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt operator/(long4x2_mt a, long4x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt operator/(long4x2_mt a, long_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long4x2_mt operator/(long_mt a, long4x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt operator/(long4x2_mt a, long b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static long4x2_mt operator/(long a, long4x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt operator%(long4x2_mt a, long4x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt operator%(long4x2_mt a, long_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long4x2_mt operator%(long_mt a, long4x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt operator%(long4x2_mt a, long b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static long4x2_mt operator%(long a, long4x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static long4x2_mt operator --(long4x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static long4x2_mt operator ++(long4x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4x2_mt abs([This] long4x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static long4x2_mt sign([This] long4x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static long4x2_mt min([This] long4x2_mt a, long4x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static long4x2_mt max([This] long4x2_mt a, long4x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static long4x2_mt clamp([This] long4x2_mt v, long4x2_mt min, long4x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static long4x2_mt square([This] long4x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt fma([This] long4x2_mt a, long4x2_mt b, long4x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt fms([This] long4x2_mt a, long4x2_mt b, long4x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt fnma([This] long4x2_mt a, long4x2_mt b, long4x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt fsm([This] long4x2_mt c, long4x2_mt a, long4x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt fam([This] long4x2_mt c, long4x2_mt a, long4x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x2_mt mad([This] long4x2_mt a, long4x2_mt b, long4x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long2_mt csum([This] long4x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static long2_mt cmin([This] long4x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static long2_mt cmax([This] long4x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // long4x2_mt

#region long4x3_mt

public partial struct long4x3_mt
{
    #region Constants

    public static long4x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long4x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long4x3_mt operator+(long4x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static long4x3_mt operator-(long4x3_mt a) => new(-a.c0, -a.c1, -a.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt operator+(long4x3_mt a, long4x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt operator-(long4x3_mt a, long4x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a long4x3_mt by long4x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt operator*(long4x3_mt a, long4x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a long4x3_mt by long_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt operator*(long4x3_mt a, long_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long4x3_mt by long4x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt operator*(long_mt a, long4x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a long4x3_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt operator*(long4x3_mt a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a long4x3_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x3_mt operator*(long a, long4x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt operator/(long4x3_mt a, long4x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt operator/(long4x3_mt a, long_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long4x3_mt operator/(long_mt a, long4x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt operator/(long4x3_mt a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static long4x3_mt operator/(long a, long4x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt operator%(long4x3_mt a, long4x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt operator%(long4x3_mt a, long_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long4x3_mt operator%(long_mt a, long4x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt operator%(long4x3_mt a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static long4x3_mt operator%(long a, long4x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static long4x3_mt operator --(long4x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static long4x3_mt operator ++(long4x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4x3_mt abs([This] long4x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static long4x3_mt sign([This] long4x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static long4x3_mt min([This] long4x3_mt a, long4x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static long4x3_mt max([This] long4x3_mt a, long4x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static long4x3_mt clamp([This] long4x3_mt v, long4x3_mt min, long4x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static long4x3_mt square([This] long4x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt fma([This] long4x3_mt a, long4x3_mt b, long4x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt fms([This] long4x3_mt a, long4x3_mt b, long4x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt fnma([This] long4x3_mt a, long4x3_mt b, long4x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt fsm([This] long4x3_mt c, long4x3_mt a, long4x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt fam([This] long4x3_mt c, long4x3_mt a, long4x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x3_mt mad([This] long4x3_mt a, long4x3_mt b, long4x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long3_mt csum([This] long4x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static long3_mt cmin([This] long4x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static long3_mt cmax([This] long4x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // long4x3_mt

#region long4x4_mt

public partial struct long4x4_mt
{
    #region Constants

    public static long4x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static long4x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1L); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static long4x4_mt operator+(long4x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static long4x4_mt operator-(long4x4_mt a) => new(-a.c0, -a.c1, -a.c2, -a.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt operator+(long4x4_mt a, long4x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt operator-(long4x4_mt a, long4x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a long4x4_mt by long4x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt operator*(long4x4_mt a, long4x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a long4x4_mt by long_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt operator*(long4x4_mt a, long_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long4x4_mt by long4x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt operator*(long_mt a, long4x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a long4x4_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt operator*(long4x4_mt a, long b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a long4x4_mt by long
    /// </summary>
    [MethodImpl(256 | 512)]
    public static long4x4_mt operator*(long a, long4x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt operator/(long4x4_mt a, long4x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt operator/(long4x4_mt a, long_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long4x4_mt operator/(long_mt a, long4x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt operator/(long4x4_mt a, long b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static long4x4_mt operator/(long a, long4x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt operator%(long4x4_mt a, long4x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt operator%(long4x4_mt a, long_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long4x4_mt operator%(long_mt a, long4x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt operator%(long4x4_mt a, long b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static long4x4_mt operator%(long a, long4x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static long4x4_mt operator --(long4x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static long4x4_mt operator ++(long4x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long4x4_mt abs([This] long4x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static long4x4_mt sign([This] long4x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static long4x4_mt min([This] long4x4_mt a, long4x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static long4x4_mt max([This] long4x4_mt a, long4x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static long4x4_mt clamp([This] long4x4_mt v, long4x4_mt min, long4x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static long4x4_mt square([This] long4x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt fma([This] long4x4_mt a, long4x4_mt b, long4x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt fms([This] long4x4_mt a, long4x4_mt b, long4x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt fnma([This] long4x4_mt a, long4x4_mt b, long4x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt fsm([This] long4x4_mt c, long4x4_mt a, long4x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt fam([This] long4x4_mt c, long4x4_mt a, long4x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static long4x4_mt mad([This] long4x4_mt a, long4x4_mt b, long4x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static long4_mt csum([This] long4x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static long4_mt cmin([This] long4x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static long4_mt cmax([This] long4x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // long4x4_mt

#region ulong2x2_mt

public partial struct ulong2x2_mt
{
    #region Constants

    public static ulong2x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong2x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator+(ulong2x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator+(ulong2x2_mt a, ulong2x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator-(ulong2x2_mt a, ulong2x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a ulong2x2_mt by ulong2x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator*(ulong2x2_mt a, ulong2x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a ulong2x2_mt by ulong_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator*(ulong2x2_mt a, ulong_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong2x2_mt by ulong2x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator*(ulong_mt a, ulong2x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a ulong2x2_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator*(ulong2x2_mt a, ulong b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong2x2_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator*(ulong a, ulong2x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator/(ulong2x2_mt a, ulong2x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator/(ulong2x2_mt a, ulong_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator/(ulong_mt a, ulong2x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator/(ulong2x2_mt a, ulong b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator/(ulong a, ulong2x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator%(ulong2x2_mt a, ulong2x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator%(ulong2x2_mt a, ulong_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator%(ulong_mt a, ulong2x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator%(ulong2x2_mt a, ulong b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator%(ulong a, ulong2x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator --(ulong2x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt operator ++(ulong2x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt abs([This] ulong2x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt sign([This] ulong2x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt min([This] ulong2x2_mt a, ulong2x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt max([This] ulong2x2_mt a, ulong2x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt clamp([This] ulong2x2_mt v, ulong2x2_mt min, ulong2x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static ulong2x2_mt square([This] ulong2x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt fma([This] ulong2x2_mt a, ulong2x2_mt b, ulong2x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt fms([This] ulong2x2_mt a, ulong2x2_mt b, ulong2x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt fnma([This] ulong2x2_mt a, ulong2x2_mt b, ulong2x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt fsm([This] ulong2x2_mt c, ulong2x2_mt a, ulong2x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt fam([This] ulong2x2_mt c, ulong2x2_mt a, ulong2x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x2_mt mad([This] ulong2x2_mt a, ulong2x2_mt b, ulong2x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong2_mt csum([This] ulong2x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static ulong2_mt cmin([This] ulong2x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static ulong2_mt cmax([This] ulong2x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // ulong2x2_mt

#region ulong2x3_mt

public partial struct ulong2x3_mt
{
    #region Constants

    public static ulong2x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong2x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator+(ulong2x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator+(ulong2x3_mt a, ulong2x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator-(ulong2x3_mt a, ulong2x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a ulong2x3_mt by ulong2x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator*(ulong2x3_mt a, ulong2x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a ulong2x3_mt by ulong_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator*(ulong2x3_mt a, ulong_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong2x3_mt by ulong2x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator*(ulong_mt a, ulong2x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a ulong2x3_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator*(ulong2x3_mt a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong2x3_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator*(ulong a, ulong2x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator/(ulong2x3_mt a, ulong2x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator/(ulong2x3_mt a, ulong_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator/(ulong_mt a, ulong2x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator/(ulong2x3_mt a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator/(ulong a, ulong2x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator%(ulong2x3_mt a, ulong2x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator%(ulong2x3_mt a, ulong_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator%(ulong_mt a, ulong2x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator%(ulong2x3_mt a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator%(ulong a, ulong2x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator --(ulong2x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt operator ++(ulong2x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt abs([This] ulong2x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt sign([This] ulong2x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt min([This] ulong2x3_mt a, ulong2x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt max([This] ulong2x3_mt a, ulong2x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt clamp([This] ulong2x3_mt v, ulong2x3_mt min, ulong2x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static ulong2x3_mt square([This] ulong2x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt fma([This] ulong2x3_mt a, ulong2x3_mt b, ulong2x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt fms([This] ulong2x3_mt a, ulong2x3_mt b, ulong2x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt fnma([This] ulong2x3_mt a, ulong2x3_mt b, ulong2x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt fsm([This] ulong2x3_mt c, ulong2x3_mt a, ulong2x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt fam([This] ulong2x3_mt c, ulong2x3_mt a, ulong2x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x3_mt mad([This] ulong2x3_mt a, ulong2x3_mt b, ulong2x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong3_mt csum([This] ulong2x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static ulong3_mt cmin([This] ulong2x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static ulong3_mt cmax([This] ulong2x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // ulong2x3_mt

#region ulong2x4_mt

public partial struct ulong2x4_mt
{
    #region Constants

    public static ulong2x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong2x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator+(ulong2x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator+(ulong2x4_mt a, ulong2x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator-(ulong2x4_mt a, ulong2x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a ulong2x4_mt by ulong2x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator*(ulong2x4_mt a, ulong2x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a ulong2x4_mt by ulong_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator*(ulong2x4_mt a, ulong_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong2x4_mt by ulong2x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator*(ulong_mt a, ulong2x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a ulong2x4_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator*(ulong2x4_mt a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong2x4_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator*(ulong a, ulong2x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator/(ulong2x4_mt a, ulong2x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator/(ulong2x4_mt a, ulong_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator/(ulong_mt a, ulong2x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator/(ulong2x4_mt a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator/(ulong a, ulong2x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator%(ulong2x4_mt a, ulong2x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator%(ulong2x4_mt a, ulong_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator%(ulong_mt a, ulong2x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator%(ulong2x4_mt a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator%(ulong a, ulong2x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator --(ulong2x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt operator ++(ulong2x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt abs([This] ulong2x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt sign([This] ulong2x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt min([This] ulong2x4_mt a, ulong2x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt max([This] ulong2x4_mt a, ulong2x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt clamp([This] ulong2x4_mt v, ulong2x4_mt min, ulong2x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static ulong2x4_mt square([This] ulong2x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt fma([This] ulong2x4_mt a, ulong2x4_mt b, ulong2x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt fms([This] ulong2x4_mt a, ulong2x4_mt b, ulong2x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt fnma([This] ulong2x4_mt a, ulong2x4_mt b, ulong2x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt fsm([This] ulong2x4_mt c, ulong2x4_mt a, ulong2x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt fam([This] ulong2x4_mt c, ulong2x4_mt a, ulong2x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong2x4_mt mad([This] ulong2x4_mt a, ulong2x4_mt b, ulong2x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong4_mt csum([This] ulong2x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static ulong4_mt cmin([This] ulong2x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static ulong4_mt cmax([This] ulong2x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // ulong2x4_mt

#region ulong3x2_mt

public partial struct ulong3x2_mt
{
    #region Constants

    public static ulong3x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong3x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator+(ulong3x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator+(ulong3x2_mt a, ulong3x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator-(ulong3x2_mt a, ulong3x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a ulong3x2_mt by ulong3x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator*(ulong3x2_mt a, ulong3x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a ulong3x2_mt by ulong_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator*(ulong3x2_mt a, ulong_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong3x2_mt by ulong3x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator*(ulong_mt a, ulong3x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a ulong3x2_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator*(ulong3x2_mt a, ulong b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong3x2_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator*(ulong a, ulong3x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator/(ulong3x2_mt a, ulong3x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator/(ulong3x2_mt a, ulong_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator/(ulong_mt a, ulong3x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator/(ulong3x2_mt a, ulong b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator/(ulong a, ulong3x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator%(ulong3x2_mt a, ulong3x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator%(ulong3x2_mt a, ulong_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator%(ulong_mt a, ulong3x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator%(ulong3x2_mt a, ulong b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator%(ulong a, ulong3x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator --(ulong3x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt operator ++(ulong3x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt abs([This] ulong3x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt sign([This] ulong3x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt min([This] ulong3x2_mt a, ulong3x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt max([This] ulong3x2_mt a, ulong3x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt clamp([This] ulong3x2_mt v, ulong3x2_mt min, ulong3x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static ulong3x2_mt square([This] ulong3x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt fma([This] ulong3x2_mt a, ulong3x2_mt b, ulong3x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt fms([This] ulong3x2_mt a, ulong3x2_mt b, ulong3x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt fnma([This] ulong3x2_mt a, ulong3x2_mt b, ulong3x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt fsm([This] ulong3x2_mt c, ulong3x2_mt a, ulong3x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt fam([This] ulong3x2_mt c, ulong3x2_mt a, ulong3x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x2_mt mad([This] ulong3x2_mt a, ulong3x2_mt b, ulong3x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong2_mt csum([This] ulong3x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static ulong2_mt cmin([This] ulong3x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static ulong2_mt cmax([This] ulong3x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // ulong3x2_mt

#region ulong3x3_mt

public partial struct ulong3x3_mt
{
    #region Constants

    public static ulong3x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong3x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator+(ulong3x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator+(ulong3x3_mt a, ulong3x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator-(ulong3x3_mt a, ulong3x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a ulong3x3_mt by ulong3x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator*(ulong3x3_mt a, ulong3x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a ulong3x3_mt by ulong_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator*(ulong3x3_mt a, ulong_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong3x3_mt by ulong3x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator*(ulong_mt a, ulong3x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a ulong3x3_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator*(ulong3x3_mt a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong3x3_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator*(ulong a, ulong3x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator/(ulong3x3_mt a, ulong3x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator/(ulong3x3_mt a, ulong_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator/(ulong_mt a, ulong3x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator/(ulong3x3_mt a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator/(ulong a, ulong3x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator%(ulong3x3_mt a, ulong3x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator%(ulong3x3_mt a, ulong_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator%(ulong_mt a, ulong3x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator%(ulong3x3_mt a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator%(ulong a, ulong3x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator --(ulong3x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt operator ++(ulong3x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt abs([This] ulong3x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt sign([This] ulong3x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt min([This] ulong3x3_mt a, ulong3x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt max([This] ulong3x3_mt a, ulong3x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt clamp([This] ulong3x3_mt v, ulong3x3_mt min, ulong3x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static ulong3x3_mt square([This] ulong3x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt fma([This] ulong3x3_mt a, ulong3x3_mt b, ulong3x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt fms([This] ulong3x3_mt a, ulong3x3_mt b, ulong3x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt fnma([This] ulong3x3_mt a, ulong3x3_mt b, ulong3x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt fsm([This] ulong3x3_mt c, ulong3x3_mt a, ulong3x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt fam([This] ulong3x3_mt c, ulong3x3_mt a, ulong3x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x3_mt mad([This] ulong3x3_mt a, ulong3x3_mt b, ulong3x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong3_mt csum([This] ulong3x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static ulong3_mt cmin([This] ulong3x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static ulong3_mt cmax([This] ulong3x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // ulong3x3_mt

#region ulong3x4_mt

public partial struct ulong3x4_mt
{
    #region Constants

    public static ulong3x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong3x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator+(ulong3x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator+(ulong3x4_mt a, ulong3x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator-(ulong3x4_mt a, ulong3x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a ulong3x4_mt by ulong3x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator*(ulong3x4_mt a, ulong3x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a ulong3x4_mt by ulong_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator*(ulong3x4_mt a, ulong_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong3x4_mt by ulong3x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator*(ulong_mt a, ulong3x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a ulong3x4_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator*(ulong3x4_mt a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong3x4_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator*(ulong a, ulong3x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator/(ulong3x4_mt a, ulong3x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator/(ulong3x4_mt a, ulong_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator/(ulong_mt a, ulong3x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator/(ulong3x4_mt a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator/(ulong a, ulong3x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator%(ulong3x4_mt a, ulong3x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator%(ulong3x4_mt a, ulong_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator%(ulong_mt a, ulong3x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator%(ulong3x4_mt a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator%(ulong a, ulong3x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator --(ulong3x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt operator ++(ulong3x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt abs([This] ulong3x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt sign([This] ulong3x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt min([This] ulong3x4_mt a, ulong3x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt max([This] ulong3x4_mt a, ulong3x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt clamp([This] ulong3x4_mt v, ulong3x4_mt min, ulong3x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static ulong3x4_mt square([This] ulong3x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt fma([This] ulong3x4_mt a, ulong3x4_mt b, ulong3x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt fms([This] ulong3x4_mt a, ulong3x4_mt b, ulong3x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt fnma([This] ulong3x4_mt a, ulong3x4_mt b, ulong3x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt fsm([This] ulong3x4_mt c, ulong3x4_mt a, ulong3x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt fam([This] ulong3x4_mt c, ulong3x4_mt a, ulong3x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong3x4_mt mad([This] ulong3x4_mt a, ulong3x4_mt b, ulong3x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong4_mt csum([This] ulong3x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static ulong4_mt cmin([This] ulong3x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static ulong4_mt cmax([This] ulong3x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // ulong3x4_mt

#region ulong4x2_mt

public partial struct ulong4x2_mt
{
    #region Constants

    public static ulong4x2_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong4x2_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator+(ulong4x2_mt a) => a;

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator+(ulong4x2_mt a, ulong4x2_mt b) => new(a.c0 + b.c0, a.c1 + b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator-(ulong4x2_mt a, ulong4x2_mt b) => new(a.c0 - b.c0, a.c1 - b.c1);

    /// <summary>
    /// Scale a ulong4x2_mt by ulong4x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator*(ulong4x2_mt a, ulong4x2_mt b) => new(a.c0 * b.c0, a.c1 * b.c1);

    /// <summary>
    /// Scale a ulong4x2_mt by ulong_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator*(ulong4x2_mt a, ulong_mt b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong4x2_mt by ulong4x2_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator*(ulong_mt a, ulong4x2_mt b) => new(a * b.c0, a * b.c1);

    /// <summary>
    /// Scale a ulong4x2_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator*(ulong4x2_mt a, ulong b) => new(a.c0 * b, a.c1 * b);

    /// <summary>
    /// Scale a ulong4x2_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator*(ulong a, ulong4x2_mt b) => new(a * b.c0, a * b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator/(ulong4x2_mt a, ulong4x2_mt b) => new(a.c0 / b.c0, a.c1 / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator/(ulong4x2_mt a, ulong_mt b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator/(ulong_mt a, ulong4x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator/(ulong4x2_mt a, ulong b) => new(a.c0 / b, a.c1 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator/(ulong a, ulong4x2_mt b) => new(a / b.c0, a / b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator%(ulong4x2_mt a, ulong4x2_mt b) => new(a.c0 % b.c0, a.c1 % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator%(ulong4x2_mt a, ulong_mt b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator%(ulong_mt a, ulong4x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator%(ulong4x2_mt a, ulong b) => new(a.c0 % b, a.c1 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator%(ulong a, ulong4x2_mt b) => new(a % b.c0, a % b.c1);

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator --(ulong4x2_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt operator ++(ulong4x2_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt abs([This] ulong4x2_mt a) => 
        new(a.c0.abs(), a.c1.abs());

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt sign([This] ulong4x2_mt a) => 
        new(a.c0.sign(), a.c1.sign());

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt min([This] ulong4x2_mt a, ulong4x2_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt max([This] ulong4x2_mt a, ulong4x2_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1));

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt clamp([This] ulong4x2_mt v, ulong4x2_mt min, ulong4x2_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1));

    [MethodImpl(256 | 512)]
    public static ulong4x2_mt square([This] ulong4x2_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt fma([This] ulong4x2_mt a, ulong4x2_mt b, ulong4x2_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt fms([This] ulong4x2_mt a, ulong4x2_mt b, ulong4x2_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt fnma([This] ulong4x2_mt a, ulong4x2_mt b, ulong4x2_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt fsm([This] ulong4x2_mt c, ulong4x2_mt a, ulong4x2_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt fam([This] ulong4x2_mt c, ulong4x2_mt a, ulong4x2_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x2_mt mad([This] ulong4x2_mt a, ulong4x2_mt b, ulong4x2_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong2_mt csum([This] ulong4x2_mt a) => 
        new(a.c0.csum(), a.c1.csum());

    [MethodImpl(256 | 512)]
    public static ulong2_mt cmin([This] ulong4x2_mt a) => 
        new(a.c0.cmin(), a.c1.cmin());

    [MethodImpl(256 | 512)]
    public static ulong2_mt cmax([This] ulong4x2_mt a) => 
        new(a.c0.cmax(), a.c1.cmax());
}

#endregion // ulong4x2_mt

#region ulong4x3_mt

public partial struct ulong4x3_mt
{
    #region Constants

    public static ulong4x3_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong4x3_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator+(ulong4x3_mt a) => a;

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator+(ulong4x3_mt a, ulong4x3_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator-(ulong4x3_mt a, ulong4x3_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2);

    /// <summary>
    /// Scale a ulong4x3_mt by ulong4x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator*(ulong4x3_mt a, ulong4x3_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2);

    /// <summary>
    /// Scale a ulong4x3_mt by ulong_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator*(ulong4x3_mt a, ulong_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong4x3_mt by ulong4x3_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator*(ulong_mt a, ulong4x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    /// <summary>
    /// Scale a ulong4x3_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator*(ulong4x3_mt a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b);

    /// <summary>
    /// Scale a ulong4x3_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator*(ulong a, ulong4x3_mt b) => new(a * b.c0, a * b.c1, a * b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator/(ulong4x3_mt a, ulong4x3_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator/(ulong4x3_mt a, ulong_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator/(ulong_mt a, ulong4x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator/(ulong4x3_mt a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator/(ulong a, ulong4x3_mt b) => new(a / b.c0, a / b.c1, a / b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator%(ulong4x3_mt a, ulong4x3_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator%(ulong4x3_mt a, ulong_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator%(ulong_mt a, ulong4x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator%(ulong4x3_mt a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator%(ulong a, ulong4x3_mt b) => new(a % b.c0, a % b.c1, a % b.c2);

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator --(ulong4x3_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt operator ++(ulong4x3_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt abs([This] ulong4x3_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs());

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt sign([This] ulong4x3_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign());

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt min([This] ulong4x3_mt a, ulong4x3_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt max([This] ulong4x3_mt a, ulong4x3_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2));

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt clamp([This] ulong4x3_mt v, ulong4x3_mt min, ulong4x3_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2));

    [MethodImpl(256 | 512)]
    public static ulong4x3_mt square([This] ulong4x3_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt fma([This] ulong4x3_mt a, ulong4x3_mt b, ulong4x3_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt fms([This] ulong4x3_mt a, ulong4x3_mt b, ulong4x3_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt fnma([This] ulong4x3_mt a, ulong4x3_mt b, ulong4x3_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt fsm([This] ulong4x3_mt c, ulong4x3_mt a, ulong4x3_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt fam([This] ulong4x3_mt c, ulong4x3_mt a, ulong4x3_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x3_mt mad([This] ulong4x3_mt a, ulong4x3_mt b, ulong4x3_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong3_mt csum([This] ulong4x3_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum());

    [MethodImpl(256 | 512)]
    public static ulong3_mt cmin([This] ulong4x3_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin());

    [MethodImpl(256 | 512)]
    public static ulong3_mt cmax([This] ulong4x3_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax());
}

#endregion // ulong4x3_mt

#region ulong4x4_mt

public partial struct ulong4x4_mt
{
    #region Constants

    public static ulong4x4_mt Zero
    { 
        [MethodImpl(256 | 512)]
        get => default; 
    }

    public static ulong4x4_mt One
    { 
        [MethodImpl(256 | 512)]
        get => new(1UL); 
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator+(ulong4x4_mt a) => a;

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator+(ulong4x4_mt a, ulong4x4_mt b) => new(a.c0 + b.c0, a.c1 + b.c1, a.c2 + b.c2, a.c3 + b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator-(ulong4x4_mt a, ulong4x4_mt b) => new(a.c0 - b.c0, a.c1 - b.c1, a.c2 - b.c2, a.c3 - b.c3);

    /// <summary>
    /// Scale a ulong4x4_mt by ulong4x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator*(ulong4x4_mt a, ulong4x4_mt b) => new(a.c0 * b.c0, a.c1 * b.c1, a.c2 * b.c2, a.c3 * b.c3);

    /// <summary>
    /// Scale a ulong4x4_mt by ulong_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator*(ulong4x4_mt a, ulong_mt b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong4x4_mt by ulong4x4_mt
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator*(ulong_mt a, ulong4x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    /// <summary>
    /// Scale a ulong4x4_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator*(ulong4x4_mt a, ulong b) => new(a.c0 * b, a.c1 * b, a.c2 * b, a.c3 * b);

    /// <summary>
    /// Scale a ulong4x4_mt by ulong
    /// </summary>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator*(ulong a, ulong4x4_mt b) => new(a * b.c0, a * b.c1, a * b.c2, a * b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator/(ulong4x4_mt a, ulong4x4_mt b) => new(a.c0 / b.c0, a.c1 / b.c1, a.c2 / b.c2, a.c3 / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator/(ulong4x4_mt a, ulong_mt b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator/(ulong_mt a, ulong4x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator/(ulong4x4_mt a, ulong b) => new(a.c0 / b, a.c1 / b, a.c2 / b, a.c3 / b);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator/(ulong a, ulong4x4_mt b) => new(a / b.c0, a / b.c1, a / b.c2, a / b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator%(ulong4x4_mt a, ulong4x4_mt b) => new(a.c0 % b.c0, a.c1 % b.c1, a.c2 % b.c2, a.c3 % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator%(ulong4x4_mt a, ulong_mt b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator%(ulong_mt a, ulong4x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator%(ulong4x4_mt a, ulong b) => new(a.c0 % b, a.c1 % b, a.c2 % b, a.c3 % b);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator%(ulong a, ulong4x4_mt b) => new(a % b.c0, a % b.c1, a % b.c2, a % b.c3);

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator --(ulong4x4_mt a) => a - One;

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt operator ++(ulong4x4_mt a) => a + One;

    #endregion
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt abs([This] ulong4x4_mt a) => 
        new(a.c0.abs(), a.c1.abs(), a.c2.abs(), a.c3.abs());

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt sign([This] ulong4x4_mt a) => 
        new(a.c0.sign(), a.c1.sign(), a.c2.sign(), a.c3.sign());

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt min([This] ulong4x4_mt a, ulong4x4_mt b) => 
        new(a.c0.min(b.c0), a.c1.min(b.c1), a.c2.min(b.c2), a.c3.min(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt max([This] ulong4x4_mt a, ulong4x4_mt b) => 
        new(a.c0.max(b.c0), a.c1.max(b.c1), a.c2.max(b.c2), a.c3.max(b.c3));

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt clamp([This] ulong4x4_mt v, ulong4x4_mt min, ulong4x4_mt max) => 
        new(v.c0.clamp(min.c0, max.c0), v.c1.clamp(min.c1, max.c1), v.c2.clamp(min.c2, max.c2), v.c3.clamp(min.c3, max.c3));

    [MethodImpl(256 | 512)]
    public static ulong4x4_mt square([This] ulong4x4_mt a) => a * a;

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt fma([This] ulong4x4_mt a, ulong4x4_mt b, ulong4x4_mt c) => 
        new(a.c0.fma(b.c0, c.c0), a.c1.fma(b.c1, c.c1), a.c2.fma(b.c2, c.c2), a.c3.fma(b.c3, c.c3));

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt fms([This] ulong4x4_mt a, ulong4x4_mt b, ulong4x4_mt c) => 
        new(a.c0.fms(b.c0, c.c0), a.c1.fms(b.c1, c.c1), a.c2.fms(b.c2, c.c2), a.c3.fms(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt fnma([This] ulong4x4_mt a, ulong4x4_mt b, ulong4x4_mt c) => 
        new(a.c0.fnma(b.c0, c.c0), a.c1.fnma(b.c1, c.c1), a.c2.fnma(b.c2, c.c2), a.c3.fnma(b.c3, c.c3));

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt fsm([This] ulong4x4_mt c, ulong4x4_mt a, ulong4x4_mt b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt fam([This] ulong4x4_mt c, ulong4x4_mt a, ulong4x4_mt b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static ulong4x4_mt mad([This] ulong4x4_mt a, ulong4x4_mt b, ulong4x4_mt c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static ulong4_mt csum([This] ulong4x4_mt a) => 
        new(a.c0.csum(), a.c1.csum(), a.c2.csum(), a.c3.csum());

    [MethodImpl(256 | 512)]
    public static ulong4_mt cmin([This] ulong4x4_mt a) => 
        new(a.c0.cmin(), a.c1.cmin(), a.c2.cmin(), a.c3.cmin());

    [MethodImpl(256 | 512)]
    public static ulong4_mt cmax([This] ulong4x4_mt a) => 
        new(a.c0.cmax(), a.c1.cmax(), a.c2.cmax(), a.c3.cmax());
}

#endregion // ulong4x4_mt
