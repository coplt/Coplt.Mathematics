<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;
<#
    var sizes = new[] { 16 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        if (!typ.arith) continue;
        if (!typ.f) continue;
        for (var n = 2; n <= 4; n++)
        {
            for (var m = 2; m <= 4; m++)
            {
                foreach (var size in sizes)
                {
                    var byteSize = typ.size * size;
                    var bitSize = 8 * byteSize;
                    var num_vectors = Math.Max(1, bitSize / 512);
                    bitSize = Math.Min(512, bitSize);

                    var scalarName = $"{typ.compType}_mt";
                    var vecTypeName = $"{typ.name}{n}_mt";
                    var vecTypeNameM = $"{typ.name}{m}_mt";
                    var typeName = $"{typ.name.Replace('v', 'm')}{n}x{m}_mt";
                    var simd_typeName = $"{typ.name.Replace('v', 'm')}{n}x{m}";
                    
                    var bType = $"b{typ.size * 8}v";
                    var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
                    var bTypeName = $"{bType.Replace('v', 'm')}{n}x{m}_mt";
#>

#region <#= typeName #>

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static <#= typeName #> ceil([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.ceil()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> floor([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.floor()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> round([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.round()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> trunc([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.trunc()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> frac([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.frac()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> modf([This] <#= typeName #> a, out <#= typeName #> i)
    {
        <#= typeName #> r = new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.modf(out var i{i})")) #>);
        i = new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"i{i}")) #>);
        return r;
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> rcp([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.rcp()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> saturate([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.saturate()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> smoothstep(<#= typeName #> min, <#= typeName #> max, [This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.smoothstep(min.c{i}, max.c{i})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> radians([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.radians()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> degrees([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.degrees()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> wrap([This] <#= typeName #> x, <#= typeName #> min, <#= typeName #> max) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"x.c{i}.wrap(min.c{i}, max.c{i})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isNaN([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.isNaN()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isFinite([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.isFinite()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isInf([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.isInf()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isPosInf([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.isPosInf()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isNegInf([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.isNegInf()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.log()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log2([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.log2()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log([This] <#= typeName #> a, <#= typeName #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.log(b.c{i})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log10([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.log10()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> exp([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.exp()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> exp2([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.exp2()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> exp10([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.exp10()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> pow([This] <#= typeName #> a, <#= typeName #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.pow(b.c{i})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> pow([This] <#= typeName #> a, <#= vecTypeName #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.pow(b)")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> pow([This] <#= typeName #> a, <#= typ.simdComp #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.pow(b)")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> sqrt([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.sqrt()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> rsqrt([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.rsqrt()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> sin([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.sin()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> cos([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.cos()")) #>);

    [MethodImpl(256 | 512)]
    public static (<#= typeName #> sin, <#= typeName #> cos) sincos([This] <#= typeName #> a)
    {
        <#=
                    string.Join(";\n        ", Enumerable.Range(0, m).Select(i => $"a.c{i}.sincos(out var s{i}, out var c{i})")) #>;
        return (
            new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"s{i}")) #>),
            new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"c{i}")) #>)
        );
    }

    [MethodImpl(256 | 512)]
    public static void sincos([This] <#= typeName #> a, out <#= typeName #> sin, out <#= typeName #> cos)
    {
        <#=
                    string.Join(";\n        ", Enumerable.Range(0, m).Select(i => $"a.c{i}.sincos(out var s{i}, out var c{i})")) #>;
        sin = new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"s{i}")) #>);
        cos = new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"c{i}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> tan([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.tan()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> asin([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.asin()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> acos([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.acos()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> atan([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.atan()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> atan2([This] <#= typeName #> a, <#= typeName #> b) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.atan2(b.c{i})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> sinh([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.sinh()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> cosh([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.cosh()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> tanh([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.tanh()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> asinh([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.asinh()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> acosh([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.acosh()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> atanh([This] <#= typeName #> a) => 
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.atanh()")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> step(<#= typeName #> threshold, [This] <#= typeName #> a) =>
        new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"a.c{i}.step(threshold.c{i})")) #>);
}

#endregion // <#= typeName #>
<#
                }
            }
        }
    }
#>
