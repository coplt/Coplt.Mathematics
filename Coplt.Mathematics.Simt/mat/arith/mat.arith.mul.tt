<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;
<#
    string RN(int a, int n) => string.Join("", Enumerable.Repeat(Typ.xyzw[a], n));
    
    var sizes = new[] { 4, 8, 16 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        if (!typ.arith) continue;
        for (var n = 2; n <= 4; n++)
        {
            for (var m = 2; m <= 4; m++)
            {
                foreach (var size in sizes)
                {
                    var byteSize = typ.size * size;
                    var bitSize = 8 * byteSize;
                    var num_vectors = Math.Max(1, bitSize / 512);
                    bitSize = Math.Min(512, bitSize);

                    var scalarName = $"{typ.compType}_mt{size}";
                    var vecTypeName = $"{typ.name}{n}_mt{size}";
                    var vecTypeNameM = $"{typ.name}{m}_mt{size}";
                    var typeName = $"{typ.name.Replace('v', 'm')}{n}x{m}_mt{size}";
                    var simd_typeName = $"{typ.name.Replace('v', 'm')}{n}x{m}";
                    
                    var bType = $"b{typ.size * 8}v";
                    var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
                    var bTypeName = $"{bType.Replace('v', 'm')}{n}x{m}_mt{size}";
#>

#region <#= typeName #>

[Ex]
public static partial class math_mt
{
<#
                for (int v = 2; v <= n; v++)
                {
                    var mulTypeName = $"{typ.name.Replace('v', 'm')}{m}x{v}_mt{size}";
                    var rTypeName = $"{typ.name.Replace('v', 'm')}{n}x{v}_mt{size}";
#>
    [MethodImpl(256 | 512)]
    public static <#= rTypeName #> mul([This] <#= typeName #> a, <#= mulTypeName #> b)
        => new(
<#
                    for (var b = 0; b < v; b++)
                    {
                        var split = b + 1 < v ? "," : " ";
#>
            <#= Enumerable.Range(0, m).Select(a => $"a.c{a} * b.c{b}.{RN(a, n)}")
                    .Aggregate((a, b) => $"fma({b.Replace(" * ", ", ")}, {a})") #><#= split #> // <#=
                            string.Join(" + ", Enumerable.Range(0, m).Select(a => $"a.c{a} * b.c{b}.{RN(a, n)}")) #>
<#
                    }
#>
        );
<#
                }
#>
}

#endregion // <#= typeName #>
<#
                }
            }
        }
    }
#>
