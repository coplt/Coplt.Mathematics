<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;
<#
    var sizes = new[] { 16 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        for (var n = 2; n <= 4; n++)
        {
            for (var m = 2; m <= 4; m++)
            {
                foreach (var size in sizes)
                {
                    var vecTypeName = $"{typ.name}{n}_mt";
                    var typeName = $"{typ.name.Replace('v', 'm')}{n}x{m}_mt";

                    var t_vecTypeName = $"{typ.name}{m}_mt";
                    var t_typeName = $"{typ.name.Replace('v', 'm')}{m}x{n}_mt";

                    var simd_method_suffix = n == m ? $"{n}x{m}_mt" : $"{n}x{m}To{m}x{n}_mt";

                    var has_simd = typ.simd && !(n == m && n == 2);
#>

#region <#= typeName #>

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static <#= t_typeName #> transpose([This] <#= typeName #> mat)
    {
        return new(
<#
                    for (var i = 0; i < n; i++)
                    {
#>
            new(<#= string.Join(", ", Enumerable.Range(0, m).Select(j => $"mat.c{j}.{Typ.xyzw[i]}")) #>)<#= i == n - 1 ? "" : "," #>
<#
                    }
#>
        );
    }
}

#endregion // <#= typeName #>
<#
                }
            }
        }
    }
#>
