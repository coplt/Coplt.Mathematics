<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;
<#
    var sizes = new[] { 4, 8, 16 };
    for (int s = 2; s <= 8; s *= 2)
    {
        for (var n = 2; n <= 4; n++)
        {
            for (var m = 2; m <= 4; m++)
            {
                var typ = Typ.Typs.FirstOrDefault(a => a.name == $"b{s * 8}v");
                if (!typ.simd) continue;
                if (typ.size < 4) continue;
                if (typ.name == null) continue;
                foreach (var size in sizes)
                {
                    var typ_size = s * 8;
                    var scalarName = $"b{typ_size}_mt{size}";
                    var typeName = $"b{typ_size}m{n}x{m}_mt{size}";
#>

#region <#= typeName #>

public partial struct <#= typeName #>
{
    public static <#= typeName #> True
    {
        [MethodImpl(256 | 512)]
        get => new(<#= scalarName #>.True);
    }

    public static <#= typeName #> False
    {
        [MethodImpl(256 | 512)]
        get => new(<#= scalarName #>.False);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator !(<#= typeName #> self) => new(<#= string.Join(", ", Enumerable.Range(0, m).Select(i => $"!self.c{i}")) #>);
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static <#= scalarName #> all([This] <#= typeName #> v) => <#= string.Join(" & ", Enumerable.Range(0, m).Select(i => $"all(v.c{i})")) #>;

    [MethodImpl(256 | 512)]
    public static <#= scalarName #> any([This] <#= typeName #> v) => <#= string.Join(" | ", Enumerable.Range(0, m).Select(i => $"any(v.c{i})")) #>;

    [MethodImpl(256 | 512)]
    public static <#= scalarName #> all_false([This] <#= typeName #> v) => <#= string.Join(" & ", Enumerable.Range(0, m).Select(i => $"all_false(v.c{i})")) #>;

    [MethodImpl(256 | 512)]
    public static bool lane_all([This] <#= typeName #> v)
    {
        return <#= string.Join(" && ", Enumerable.Range(0, m).Select(i => $"lane_all(v.c{i})")) #>;
    }

    [MethodImpl(256 | 512)]
    public static bool lane_any([This] <#= typeName #> v)
    {
        return <#= string.Join(" || ", Enumerable.Range(0, m).Select(i => $"lane_any(v.c{i})")) #>;
    }

    [MethodImpl(256 | 512)]
    public static bool lane_all_false([This] <#= typeName #> v)
    {
        return <#= string.Join(" && ", Enumerable.Range(0, m).Select(i => $"lane_all_false(v.c{i})")) #>;
    }
}

#endregion // <#= typeName #>
<#
                }
            }
        }
    }
#>
