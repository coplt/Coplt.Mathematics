<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt.Geometries;

<#
    var sizes = new[] { 16 };

    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        if (!typ.f || !typ.bin) continue;

        foreach (var size in sizes)
        {
            var byteSize = 4 * size;
            var bitSize = 8 * byteSize;
            var num_vectors = Math.Max(1, bitSize / 512);
            bitSize = Math.Min(512, bitSize);

            var scalarName = $"{typ.compType}_mt";
            var vectorName = $"{typ.name}3_mt";
            var typeName = $"ray{typ.structSuffix}_mt";

            IEnumerable<string> ForVectors(string name)
            {
                if (num_vectors == 1) yield return name;
                else
                {
                    for (var i = 0; i < num_vectors; i++)
                    {
                        yield return $"{name}{i}";
                    }
                }
            }

            var vectors = ForVectors("vector").ToList();
#>
#region <#= typeName #>

[CpuOnly]
public partial struct <#= typeName #>
{
    /// <summary>The origin point of the ray.</summary>
    public <#= vectorName #> origin;

    /// <summary>The direction of the ray.</summary>
    public <#= vectorName #> direction;
        
    [MethodImpl(256 | 512)]
    public <#= typeName #>(<#= vectorName #> origin, <#= vectorName #> direction)
    {
        this.origin = origin;
        this.direction = direction;
    }

    /// <summary>
    /// Returns a point at distance units along the ray.
    /// </summary>
    [MethodImpl(256 | 512)]
    public readonly <#= vectorName #> point_at(<#= scalarName #> distance) => direction.fma(distance, origin);
}

#endregion // <#= typeName #>
<#
        }
    }
#>
