// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region int_mt

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static b32_mt isPow2([This] int_mt a)
    {
        return ((a & (a - int_mt.One)) == default) & (a > default(int_mt));
    }

    [MethodImpl(256 | 512)]
    public static int_mt up2pow2([This] int_mt a)
    {
        return new(simd.RoundUpToPowerOf2(a.vector));
    }
}

#endregion // int_mt
#region uint_mt

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static b32_mt isPow2([This] uint_mt a)
    {
        return ((a & (a - uint_mt.One)) == default) & (a != default);
    }

    [MethodImpl(256 | 512)]
    public static uint_mt up2pow2([This] uint_mt a)
    {
        return new(simd.RoundUpToPowerOf2(a.vector));
    }
}

#endregion // uint_mt
#region long_mt

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static b64_mt isPow2([This] long_mt a)
    {
        return ((a & (a - long_mt.One)) == default) & (a > default(long_mt));
    }

    [MethodImpl(256 | 512)]
    public static long_mt up2pow2([This] long_mt a)
    {
        return new(simd.RoundUpToPowerOf2(a.vector0), simd.RoundUpToPowerOf2(a.vector1));
    }
}

#endregion // long_mt
#region ulong_mt

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static b64_mt isPow2([This] ulong_mt a)
    {
        return ((a & (a - ulong_mt.One)) == default) & (a != default);
    }

    [MethodImpl(256 | 512)]
    public static ulong_mt up2pow2([This] ulong_mt a)
    {
        return new(simd.RoundUpToPowerOf2(a.vector0), simd.RoundUpToPowerOf2(a.vector1));
    }
}

#endregion // ulong_mt
