// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region float_mt

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static float_mt select([This] b32_mt c, float_mt t, float_mt f)
    {
        return new(Vector512.ConditionalSelect(c.vector.AsSingle(), t.vector, f.vector));
    }

    [MethodImpl(256 | 512)]
    public static float_mt select([This] bool c, float_mt t, float_mt f) => c ? t : f;
}

#endregion // float_mt
#region double_mt

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static double_mt select([This] b64_mt c, double_mt t, double_mt f)
    {
        return new(Vector512.ConditionalSelect(c.vector0.AsDouble(), t.vector0, f.vector0), Vector512.ConditionalSelect(c.vector1.AsDouble(), t.vector1, f.vector1));
    }

    [MethodImpl(256 | 512)]
    public static double_mt select([This] bool c, double_mt t, double_mt f) => c ? t : f;
}

#endregion // double_mt
#region int_mt

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static int_mt select([This] b32_mt c, int_mt t, int_mt f)
    {
        return new(Vector512.ConditionalSelect(c.vector.AsInt32(), t.vector, f.vector));
    }

    [MethodImpl(256 | 512)]
    public static int_mt select([This] bool c, int_mt t, int_mt f) => c ? t : f;
}

#endregion // int_mt
#region uint_mt

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static uint_mt select([This] b32_mt c, uint_mt t, uint_mt f)
    {
        return new(Vector512.ConditionalSelect(c.vector.AsUInt32(), t.vector, f.vector));
    }

    [MethodImpl(256 | 512)]
    public static uint_mt select([This] bool c, uint_mt t, uint_mt f) => c ? t : f;
}

#endregion // uint_mt
#region long_mt

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static long_mt select([This] b64_mt c, long_mt t, long_mt f)
    {
        return new(Vector512.ConditionalSelect(c.vector0.AsInt64(), t.vector0, f.vector0), Vector512.ConditionalSelect(c.vector1.AsInt64(), t.vector1, f.vector1));
    }

    [MethodImpl(256 | 512)]
    public static long_mt select([This] bool c, long_mt t, long_mt f) => c ? t : f;
}

#endregion // long_mt
#region ulong_mt

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static ulong_mt select([This] b64_mt c, ulong_mt t, ulong_mt f)
    {
        return new(Vector512.ConditionalSelect(c.vector0.AsUInt64(), t.vector0, f.vector0), Vector512.ConditionalSelect(c.vector1.AsUInt64(), t.vector1, f.vector1));
    }

    [MethodImpl(256 | 512)]
    public static ulong_mt select([This] bool c, ulong_mt t, ulong_mt f) => c ? t : f;
}

#endregion // ulong_mt
#region b32_mt

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static b32_mt select([This] b32_mt c, b32_mt t, b32_mt f)
    {
        return new(Vector512.ConditionalSelect(c.vector.AsUInt32(), t.vector, f.vector));
    }

    [MethodImpl(256 | 512)]
    public static b32_mt select([This] bool c, b32_mt t, b32_mt f) => c ? t : f;
}

#endregion // b32_mt
#region b64_mt

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static b64_mt select([This] b64_mt c, b64_mt t, b64_mt f)
    {
        return new(Vector512.ConditionalSelect(c.vector0.AsUInt64(), t.vector0, f.vector0), Vector512.ConditionalSelect(c.vector1.AsUInt64(), t.vector1, f.vector1));
    }

    [MethodImpl(256 | 512)]
    public static b64_mt select([This] bool c, b64_mt t, b64_mt f) => c ? t : f;
}

#endregion // b64_mt
