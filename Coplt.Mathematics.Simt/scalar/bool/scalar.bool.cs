// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region b32_mt

public partial struct b32_mt
{
    public static b32_mt True
    {
        [MethodImpl(256 | 512)]
        get => new(b32.True);
    }
    public static b32_mt False
    {
        [MethodImpl(256 | 512)]
        get => new(b32.False);
    }

    [MethodImpl(256 | 512)]
    public static b32_mt operator !(b32_mt self) => ~self;
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static bool lane_all([This] b32_mt v)
    {
        return (v.vector == Vector512<uint>.AllBitsSet);
    }

    [MethodImpl(256 | 512)]
    public static bool lane_any([This] b32_mt v)
    {
        return (v.vector != default);
    }

    [MethodImpl(256 | 512)]
    public static bool lane_all_false([This] b32_mt v)
    {
        return (v.vector == default);
    }
}

#endregion // b32_mt
#region b64_mt

public partial struct b64_mt
{
    public static b64_mt True
    {
        [MethodImpl(256 | 512)]
        get => new(b64.True);
    }
    public static b64_mt False
    {
        [MethodImpl(256 | 512)]
        get => new(b64.False);
    }

    [MethodImpl(256 | 512)]
    public static b64_mt operator !(b64_mt self) => ~self;
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static bool lane_all([This] b64_mt v)
    {
        return (v.vector0 == Vector512<ulong>.AllBitsSet) && (v.vector1 == Vector512<ulong>.AllBitsSet);
    }

    [MethodImpl(256 | 512)]
    public static bool lane_any([This] b64_mt v)
    {
        return (v.vector0 != default) || (v.vector1 != default);
    }

    [MethodImpl(256 | 512)]
    public static bool lane_all_false([This] b64_mt v)
    {
        return (v.vector0 == default) && (v.vector1 == default);
    }
}

#endregion // b64_mt
