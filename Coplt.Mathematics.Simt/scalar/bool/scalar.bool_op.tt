<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

<#
    var sizes = new[] { 4, 8, 16, 32 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        foreach (var size in sizes)
        {
            var byteSize = typ.size * size;
            var bitSize = 8 * byteSize;
            var num_vectors = Math.Max(1, bitSize / 512);
            bitSize = Math.Min(512, bitSize);

            var typeName = $"{typ.compType}_mt{size}";
            var bTypeV = $"b{typ.size * 8}v";
            var bType = $"b{typ.size * 8}";
            var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bTypeV);
            var bTypeName = $"{bType}_mt{size}";

            IEnumerable<string> ForVectors(string name)
            {
                if (num_vectors == 1) yield return name;
                else
                {
                    for (var i = 0; i < num_vectors; i++)
                    {
                        yield return $"{name}{i}";
                    }
                }
            }

            var vectors = ForVectors("vector").ToList();
#>
#region <#= typeName #>

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static <#= typeName #> select([This] <#= bTypeName #> c, <#= typeName #> t, <#= typeName #> f)
    {
        return new(<#=
                    string.Join(", ", vectors.Select(v => $"Vector{bitSize}.ConditionalSelect(c.{v}.As{typ.Type}(), t.{v}, f.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> select([This] bool c, <#= typeName #> t, <#= typeName #> f) => c ? t : f;
}

#endregion // <#= typeName #>
<#
        }
    }
#>
