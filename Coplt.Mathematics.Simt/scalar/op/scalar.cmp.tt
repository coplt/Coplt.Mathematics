<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

<#
    var sizes = new[] { 16 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        foreach (var size in sizes)
        {
            var byteSize = typ.size * size;
            var bitSize = 8 * byteSize;
            var num_vectors = Math.Max(1, bitSize / 512);
            bitSize = Math.Min(512, bitSize);

            var typeName = $"{typ.compType}_mt";
            var bTypeV = $"b{typ.size * 8}v";
            var bType = $"b{typ.size * 8}";
            var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bTypeV);
            var bTypeName = $"{bType}_mt";

            IEnumerable<string> ForVectors(string name)
            {
                if (num_vectors == 1) yield return name;
                else
                {
                    for (var i = 0; i < num_vectors; i++)
                    {
                        yield return $"{name}{i}";
                    }
                }
            }

            var vectors = ForVectors("vector").ToList();
#>
#region <#= typeName #>

public partial struct <#= typeName #> : IComparable<<#= typeName #>>, IComparable
    , IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>
<#
            if (bTyp.name != null)
            {
#>
    , IComparisonOperators<<#= typeName #>, <#= typeName #>, <#= bTypeName #>>
<#
            }
#>
{
    [MethodImpl(256 | 512)]
    public readonly bool LessThanAll(<#= typeName #> other)
    {
        return <#= string.Join(" && ", vectors.Select(v => $"Vector{bitSize}.LessThanAll({v}, other.{v})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool GreaterThanAll(<#= typeName #> other)
    {
        return <#= string.Join(" && ", vectors.Select(v => $"Vector{bitSize}.GreaterThanAll({v}, other.{v})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool LessThanOrEqualAll(<#= typeName #> other)
    {
        return <#= string.Join(" && ", vectors.Select(v => $"Vector{bitSize}.LessThanOrEqualAll({v}, other.{v})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool GreaterThanOrEqualAll(<#= typeName #> other)
    {
        return <#= string.Join(" && ", vectors.Select(v => $"Vector{bitSize}.GreaterThanOrEqualAll({v}, other.{v})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool LessThanAny(<#= typeName #> other)
    {
        return <#= string.Join(" || ", vectors.Select(v => $"Vector{bitSize}.LessThanAny({v}, other.{v})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool GreaterThanAny(<#= typeName #> other)
    {
        return <#= string.Join(" || ", vectors.Select(v => $"Vector{bitSize}.GreaterThanAny({v}, other.{v})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool LessThanOrEqualAny(<#= typeName #> other)
    {
        return <#= string.Join(" || ", vectors.Select(v => $"Vector{bitSize}.LessThanOrEqualAny({v}, other.{v})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool GreaterThanOrEqualAny(<#= typeName #> other)
    {
        return <#= string.Join(" || ", vectors.Select(v => $"Vector{bitSize}.GreaterThanOrEqualAny({v}, other.{v})")) #>;
    }

    static bool IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>.operator <(<#= typeName #> left, <#= typeName #> right) => 
        left.LessThanAll(right);
    [MethodImpl(256 | 512)]
    static bool IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>.operator >(<#= typeName #> left, <#= typeName #> right) => 
        left.GreaterThanAll(right);
    [MethodImpl(256 | 512)]
    static bool IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>.operator <=(<#= typeName #> left, <#= typeName #> right) => 
        left.LessThanOrEqualAll(right);
    [MethodImpl(256 | 512)]
    static bool IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>.operator >=(<#= typeName #> left, <#= typeName #> right) => 
        left.GreaterThanOrEqualAll(right);

    [MethodImpl(256 | 512)]
    public readonly int CompareTo(<#= typeName #> other)
    {
        if (LessThanAny(other)) return -1;
        if (GreaterThanAny(other)) return 1;
        return 0;
    }

    [MethodImpl(256 | 512)]
    public readonly int CompareTo(object? obj)
    {
        if (ReferenceEquals(null, obj)) return 1;
        return obj is <#= typeName #> other ? CompareTo(other) : throw new ArgumentException($"Object must be of type {nameof(<#= typeName #>)}");
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator <(<#= typeName #> left, <#= typeName #> right)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"Vector{bitSize}.LessThan(left.{v}, right.{v}).As{bTyp.Type}()")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator >(<#= typeName #> left, <#= typeName #> right)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"Vector{bitSize}.GreaterThan(left.{v}, right.{v}).As{bTyp.Type}()")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator <=(<#= typeName #> left, <#= typeName #> right)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"Vector{bitSize}.LessThanOrEqual(left.{v}, right.{v}).As{bTyp.Type}()")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator >=(<#= typeName #> left, <#= typeName #> right)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"Vector{bitSize}.GreaterThanOrEqual(left.{v}, right.{v}).As{bTyp.Type}()")) #>);
    }
}


#endregion // <#= typeName #>
<#
        }
    }
#>
