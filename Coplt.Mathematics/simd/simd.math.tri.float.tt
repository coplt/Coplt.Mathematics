<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.Simd;
<#
    var type = "f32";
    var sizes = new[] { 64, 128, 256, 512 };

    var v64 = $"Vector{64}";
    var v128 = $"Vector{128}";
    var v256 = $"Vector{256}";
    var v512 = $"Vector{512}";

    var vt64 = $"{v64}<f32>";
    var vt128 = $"{v128}<f32>";
    var vt256 = $"{v256}<f32>";
    var vt512 = $"{v512}<f32>";
#>

public static partial class simd_math
{
    #region Sin Cos

    #region SinCos

    [MethodImpl(512)]
    public static <#= vt64 #> SinCos(<#= vt64 #> x) => Sin_impl(x + <#= v64 #>.Create(0.0f, math.F_Half_PI));

    [MethodImpl(512)]
    public static <#= vt128 #> SinCos(<#= vt128 #> x) => Sin_impl(x + <#= v128 #>.Create(0.0f, 0.0f, math.F_Half_PI, math.F_Half_PI));

    [MethodImpl(512)]
    public static <#= vt256 #> SinCos(<#= vt256 #> x) =>
        Sin_impl(x + <#= v256 #>.Create(0.0f, 0.0f, 0.0f, 0.0f, math.F_Half_PI, math.F_Half_PI, math.F_Half_PI, math.F_Half_PI));

    [MethodImpl(512)]
    public static <#= vt512 #> SinCos(<#= vt512 #> x) =>
        Sin_impl(x + <#= v512 #>.Create(
            0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
            math.F_Half_PI, math.F_Half_PI, math.F_Half_PI, math.F_Half_PI, math.F_Half_PI, math.F_Half_PI, math.F_Half_PI, math.F_Half_PI
        ));

    #endregion

<#
    foreach (var size in sizes)
    {
        var vector = $"Vector{size}";
        var vt = $"{vector}<{type}>";
#>
    #region <#= vt #>

    [MethodImpl(512)]
    public static <#= vt #> Cos(<#= vt #> x) => Sin_impl(x + <#= vector #>.Create(math.F_Half_PI));

    [MethodImpl(512)]
    public static <#= vt #> Sin(<#= vt #> x) => Sin_impl(x);

    [MethodImpl(256 | 512)]
    private static <#= vt #> Sin_impl(<#= vt #> x)
    {
        // Since sin() is periodic around 2pi, this converts x into the range of [0, 2pi]
        var xt = Wrap0To2Pi(x);

        // Since sin() in [0, 2pi] is an odd function around pi, this converts the range to [0, pi], then stores whether or not the result needs to be negated in is_neg.
        var is_neg = <#= vector #>.GreaterThan(xt, <#= vector #>.Create(math.F_PI));
        xt -= is_neg & <#= vector #>.Create(math.F_PI);

        is_neg &= <#= vector #>.Create(-2.0f);
        is_neg += <#= vt #>.One;

        var is_nan = simd.Ne(x, x);
        is_nan += <#= vector #>.GreaterThan(x, <#= vector #>.Create(f32.MaxValue));
        is_nan += <#= vector #>.LessThan(x, <#= vector #>.Create(f32.MinValue));

        // Since sin() on [0, pi] is an even function around pi/2, this "folds" the range into [0, pi/2]. I.e. 3pi/5 becomes 2pi/5.
        xt = <#= vector #>.Create(math.F_Half_PI) - <#= vector #>.Abs(xt - <#= vector #>.Create(math.F_Half_PI));

        var sq = xt * xt;
        var r = simd.Fma(sq, <#= vector #>.Create(-0.0000000000007384998082865f), <#= vector #>.Create(0.000000000160490521296459f));
        r = simd.Fma(r, sq, <#= vector #>.Create(-0.00000002505191090496049f));
        r = simd.Fma(r, sq, <#= vector #>.Create(0.00000275573170815073144f));
        r = simd.Fma(r, sq, <#= vector #>.Create(-0.00019841269828860068271f));
        r = simd.Fma(r, sq, <#= vector #>.Create(0.008333333333299304989001f));
        r = simd.Fma(r, sq, <#= vector #>.Create(-0.166666666666663509013977f));
        r = simd.Fma(r, sq, <#= vt #>.One);

        r *= xt;

        r = simd.Fma(r, is_neg, is_nan);

        return r;
    }

    #endregion

<#
    }
#>
    #endregion

    #region Tan

<#
    foreach (var size in sizes)
    {
        var vector = $"Vector{size}";
        var vt = $"{vector}<{type}>";
#>
    #region <#= vt #>

    /// <summary>
    /// Computes sines in [0,pi/4]
    /// </summary>
    [MethodImpl(512)]
    public static <#= vt #> SinIn0P4(<#= vt #> x) => SinIn0P4_impl(x);

    /// <summary>
    /// Computes sines in [0,pi/4]
    /// </summary>
    [MethodImpl(256 | 512)]
    public static <#= vt #> SinIn0P4_impl(<#= vt #> x)
    {
        var sq = x * x;

        // This is an odd-only Taylor series approximation of sin() on [0, pi/4]. 
        var r = simd.Fma(sq, <#= vector #>.Create(0.0000000001590238118466f), <#= vector #>.Create(-0.0000000250508528135474f));
        r = simd.Fma(r, sq, <#= vector #>.Create(0.0000027557314284120030f));
        r = simd.Fma(r, sq, <#= vector #>.Create(-0.00019841269831470328245f));
        r = simd.Fma(r, sq, <#= vector #>.Create(0.008333333333324419158220f));
        r = simd.Fma(r, sq, <#= vector #>.Create(-0.1666666666666663969165095f));
        r = simd.Fma(r, sq, <#= vt #>.One);
        r *= x;

        return r;
    }

    [MethodImpl(512)]
    public static <#= vt #> Tan(<#= vt #> x)
    {
        // Since tan() is periodic around pi, this converts x into the range of [0, pi]
        var xt = Wrap0ToPi(x);

        // Since tan() in [0, pi] is an odd function around pi/2, this converts the range to [0, pi/2], then stores whether or not the result needs to be negated in is_neg.
        var is_neg = <#= vector #>.GreaterThan(xt, <#= vector #>.Create(math.F_Half_PI));
        xt += is_neg & ((xt - <#= vector #>.Create(math.F_Half_PI)) * -2);

        is_neg &= <#= vector #>.Create(-2.0f);
        is_neg += <#= vt #>.One;

        var is_nan = simd.Ne(x, x);
        is_nan += <#= vector #>.GreaterThan(x, <#= vector #>.Create(float.MaxValue));
        is_nan += <#= vector #>.LessThan(x, <#= vector #>.Create(float.MinValue));

        // Since tan() on [0, pi/2] is an inversed function around pi/4, this "folds" the range into [0, pi/4]. I.e. 3pi/10 becomes 2pi/10.
        var do_inv_mask = <#= vector #>.GreaterThan(xt, <#= vector #>.Create(math.F_Quarter_PI));
        var no_inv_mask = <#= vector #>.LessThanOrEqual(xt, <#= vector #>.Create(math.F_Quarter_PI));
        xt = <#= vector #>.Create(math.F_Quarter_PI) - <#= vector #>.Abs(xt - <#= vector #>.Create(math.F_Quarter_PI));

        var xx = SinIn0P4_impl(xt);

        xt = <#= vector #>.Sqrt(<#= vt #>.One - xx * xx);

        xx = (do_inv_mask & (xt / xx)) + (no_inv_mask & (xx / xt));

        xx = simd.Fma(xx, is_neg, is_nan);
        return xx;
    }

    #endregion

<#
    }
#>
    #endregion

    #region Sinh Cosh Tanh

<#
    foreach (var size in sizes)
    {
        var vector = $"Vector{size}";
        var vt = $"{vector}<{type}>";
#>
    #region <#= vt #>

    [MethodImpl(512)]
    public static <#= vt #> Sinh(<#= vt #> x)
    {
        var r = Exp(x);
        var rr = <#= vt #>.One / r;
        return (r - rr) * 0.5f;
    }

    [MethodImpl(512)]
    public static <#= vt #> Cosh(<#= vt #> x)
    {
        var r = Exp(x);
        var rr = <#= vt #>.One / r;
        return (r + rr) * 0.5f;
    }

    [MethodImpl(512)]
    public static <#= vt #> Tanh(<#= vt #> x)
    {
        var r = Exp(x);
        var rr = <#= vt #>.One / r;
        return (r - rr) / (r + rr);
    }

    #endregion

<#
    }
#>
    #region SinhCosh

    [MethodImpl(512)]
    public static <#= vt128 #> SinhCosh(<#= vt128 #> x)
    {
        var r = Exp(x);
        var rr = <#= vt128 #>.One / r;
        var rrr = simd.Fma(rr, <#= v128 #>.Create(1.0f, 1.0f, -1.0f, -1.0f), r);
        return rrr * 0.5f;
    }

    [MethodImpl(512)]
    public static <#= vt256 #> SinhCosh(<#= vt256 #> x)
    {
        var r = Exp(x);
        var rr = <#= vt256 #>.One / r;
        var rrr = simd.Fma(rr, <#= v256 #>.Create(1.0f, 1.0f, 1.0f, 1.0f, -1.0f, -1.0f, -1.0f, -1.0f), r);
        return rrr * 0.5f;
    }

    [MethodImpl(512)]
    public static <#= vt512 #> SinhCosh(<#= vt512 #> x)
    {
        var r = Exp(x);
        var rr = <#= vt512 #>.One / r;
        var rrr = simd.Fma(rr, <#= v512 #>.Create(
            1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
            -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f
        ), r);
        return rrr * 0.5f;
    }

    [MethodImpl(512)]
    public static <#= vt128 #> SinhCoshF64To128(<#= vt64 #> x)
    {
        var r = Exp(x);
        var r128 = <#= v128 #>.Create(r, r);
        var rr = <#= vt128 #>.One / r128;
        var rrr = simd.Fma(rr, <#= v128 #>.Create(1.0f, 1.0f, -1.0f, -1.0f), r128);
        return rrr * 0.5f;
    }

    [MethodImpl(512)]
    public static <#= vt256 #> SinhCoshF128To256(<#= vt128 #> x)
    {
        var r = Exp(x);
        var r256 = <#= v256 #>.Create(r, r);
        var rr = <#= vt256 #>.One / r256;
        var rrr = simd.Fma(rr, <#= v256 #>.Create(1.0f, 1.0f, 1.0f, 1.0f, -1.0f, -1.0f, -1.0f, -1.0f), r256);
        return rrr * 0.5f;
    }

    [MethodImpl(512)]
    public static <#= vt512 #> SinhCoshF256To512(<#= vt256 #> x)
    {
        var r = Exp(x);
        var r512 = <#= v512 #>.Create(r, r);
        var rr = <#= vt512 #>.One / r512;
        var rrr = simd.Fma(rr, <#= v512 #>.Create(
            1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
            -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f
        ), r512);
        return rrr * 0.5f;
    }

    #endregion

    #endregion

    #region Asinh Acosh Atanh

<#
    foreach (var size in sizes)
    {
        var vector = $"Vector{size}";
        var vt = $"{vector}<{type}>";
#>
    #region <#= vt #>

    [MethodImpl(512)]
    public static <#= vt #> Asinh(<#= vt #> x)
    {
        var r = simd.Fma(x, x, <#= vt #>.One);
        r = <#= vector #>.Sqrt(r);
        r += x;
        r = Log(r);
        return r;
    }

    [MethodImpl(512)]
    public static <#= vt #> Acosh(<#= vt #> x)
    {
        var r = simd.Fma(x, x, -<#= vt #>.One);
        r = <#= vector #>.Sqrt(r);
        r += x;
        r = Log(r);
        return r;
    }

    [MethodImpl(512)]
    public static <#= vt #> Atanh(<#= vt #> x)
    {
        var r = (<#= vt #>.One + x) / (<#= vt #>.One - x);
        r = Log(r) * 0.5f;
        return r;
    }

    #endregion

<#
    }
#>
    #region AsinhAcosh

    [MethodImpl(512)]
    public static <#= vt128 #> AsinhAcosh(<#= vt128 #> x)
    {
        var r = simd.Fma(x, x, <#= v128 #>.Create(1.0f, 1.0f, -1.0f, -1.0f));
        r = <#= v128 #>.Sqrt(r);
        r += x;
        r = Log(r);
        return r;
    }

    [MethodImpl(512)]
    public static <#= vt256 #> AsinhAcosh(<#= vt256 #> x)
    {
        var r = simd.Fma(x, x, <#= v256 #>.Create(1.0f, 1.0f, 1.0f, 1.0f, -1.0f, -1.0f, -1.0f, -1.0f));
        r = <#= v256 #>.Sqrt(r);
        r += x;
        r = Log(r);
        return r;
    }

    [MethodImpl(512)]
    public static <#= vt512 #> AsinhAcosh(<#= vt512 #> x)
    {
        var r = simd.Fma(x, x, <#= v512 #>.Create(
            1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 
            -1.0f, -1.0f, -1.0f, -1.0f,  -1.0f, -1.0f, -1.0f, -1.0f
        ));
        r = <#= v512 #>.Sqrt(r);
        r += x;
        r = Log(r);
        return r;
    }

    #endregion

    #endregion

    #region Asin

<#
    foreach (var size in sizes)
    {
        var vector = $"Vector{size}";
        var vt = $"{vector}<{type}>";
#>
    #region <#= vt #>

    [MethodImpl(512)]
    public static <#= vt #> Asin(<#= vt #> d)
    {
        var abs = <#= vector #>.Abs(d);
        var o = <#= vector #>.LessThan(abs, <#= vector #>.Create(0.5f));
        var x2 = <#= vector #>.ConditionalSelect(o, d * d, (<#= vt #>.One - abs) * <#= vector #>.Create(0.5f));
        var x = <#= vector #>.ConditionalSelect(o, abs, <#= vector #>.Sqrt(x2));

        var u = <#= vector #>.Create(0.4197454825e-1f);
        u = simd.Fma(u, x2, <#= vector #>.Create(0.2424046025e-1f));
        u = simd.Fma(u, x2, <#= vector #>.Create(0.4547423869e-1f));
        u = simd.Fma(u, x2, <#= vector #>.Create(0.7495029271e-1f));
        u = simd.Fma(u, x2, <#= vector #>.Create(0.1666677296e+0f));
        u = simd.Fma(u, x * x2, x);

        var r = simd.Fnma(u, <#= vector #>.Create(2f), <#= vector #>.Create(math.F_Half_PI));
        r = <#= vector #>.ConditionalSelect(o, u, r);

        r ^= d & -<#= vt #>.Zero;
        return r;
    }

    #endregion

<#
    }
#>
    #endregion

    #region Acos

<#
    foreach (var size in sizes)
    {
        var vector = $"Vector{size}";
        var vt = $"{vector}<{type}>";
#>
    #region <#= vt #>

    [MethodImpl(512)]
    public static <#= vt #> Acos(<#= vt #> d)
    {
        var abs = <#= vector #>.Abs(d);
        var o = <#= vector #>.LessThan(abs, <#= vector #>.Create(0.5f));
        var x2 = <#= vector #>.ConditionalSelect(o, d * d, (<#= vt #>.One - abs) * <#= vector #>.Create(0.5f));
        var x = <#= vector #>.ConditionalSelect(o, abs, <#= vector #>.Sqrt(x2));
        x &= simd.Ne(<#= vt #>.One, abs);

        var u = <#= vector #>.Create(0.4197454825e-1f);
        u = simd.Fma(u, x2, <#= vector #>.Create(0.2424046025e-1f));
        u = simd.Fma(u, x2, <#= vector #>.Create(0.4547423869e-1f));
        u = simd.Fma(u, x2, <#= vector #>.Create(0.7495029271e-1f));
        u = simd.Fma(u, x2, <#= vector #>.Create(0.1666677296e+0f));
        u *= x * x2;

        var sign = d & -<#= vt #>.Zero;

        var y = <#= vector #>.Create(math.F_Half_PI) - ((x ^ sign) + (u ^ sign));
        x += u;
        var r = <#= vector #>.ConditionalSelect(o, y, x * 2);
        var c = <#= vector #>.LessThan(d, <#= vt #>.Zero) & ~o;
        r = <#= vector #>.ConditionalSelect(c, <#= vector #>.Create(math.F_PI) - r, r);
        return r;
    }

    #endregion

<#
    }
#>
    #endregion

    #region Atan

<#
    foreach (var size in sizes)
    {
        var vector = $"Vector{size}";
        var vt = $"{vector}<{type}>";
#>
    #region <#= vt #>

    [MethodImpl(512)]
    public static <#= vt #> Atan(<#= vt #> s)
    {
        var sign = s & -<#= vt #>.Zero;
        s = <#= vector #>.Abs(s);
        var is_gt_1 = <#= vector #>.GreaterThan(s, <#= vt #>.One);
        s = <#= vector #>.ConditionalSelect(is_gt_1, <#= vt #>.One / s, s);

        var t = s * s;
        var t2 = t * t;
        var t4 = t2 * t2;
        var u = simd.Fma(t4,
            simd.Fma(t2,
                simd.Fma(t, <#= vector #>.Create(0.00282363896258175373077393f), <#= vector #>.Create(-0.0159569028764963150024414f)),
                simd.Fma(t, <#= vector #>.Create(0.0425049886107444763183594f), <#= vector #>.Create(-0.0748900920152664184570312f))
            ),
            simd.Fma(t2,
                simd.Fma(t, <#= vector #>.Create(0.106347933411598205566406f), <#= vector #>.Create(-0.142027363181114196777344f)),
                simd.Fma(t, <#= vector #>.Create(0.199926957488059997558594f), <#= vector #>.Create(-0.333331018686294555664062f))
            )
        );
        t = simd.Fma(s, t * u, s);

        t = <#= vector #>.ConditionalSelect(
            is_gt_1,
            <#= vector #>.Create(math.F_Half_PI) - t,
            t
        );
        t ^= sign;

        return t;
    }

    #endregion

<#
    }
#>
    #endregion

    #region Atan

<#
    foreach (var size in sizes)
    {
        var vector = $"Vector{size}";
        var vt = $"{vector}<{type}>";
#>
    #region <#= vt #>

    [MethodImpl(512)]
    public static <#= vt #> Atan2(<#= vt #> y, <#= vt #> x)
    {
        var x_is_inf = simd.IsInfinity(x).AsSingle();
        var y_is_inf = simd.IsInfinity(y).AsSingle();
        var x_iz = <#= vector #>.Equals(x, default);
        var y_iz = <#= vector #>.Equals(y, default);
        var y_sign = y & -<#= vt #>.Zero;
        var x_sign = x & -<#= vt #>.Zero;
        var y_is_nan = simd.Ne(y, y);
        var x_is_nan = simd.Ne(x, x);

        y = <#= vector #>.Abs(y);
        var x_lz = <#= vector #>.LessThan(x, default);
        x = <#= vector #>.Abs(x);
        var q = x_lz & <#= vector #>.Create(-2f);
        var y_gt_x = <#= vector #>.GreaterThan(y, x);
        q += y_gt_x & <#= vt #>.One;
        var b = <#= vector #>.Min(x, y);
        b = <#= vector #>.ConditionalSelect(y_gt_x, -b, b);
        var a = <#= vector #>.Max(x, y);

        var s = b / a;
        var t = s * s;
        var t2 = t * t;
        var t4 = t2 * t2;
        var u = simd.Fma(t4,
            simd.Fma(t2,
                simd.Fma(t, <#= vector #>.Create(0.00282363896258175373077393f), <#= vector #>.Create(-0.0159569028764963150024414f)),
                simd.Fma(t, <#= vector #>.Create(0.0425049886107444763183594f), <#= vector #>.Create(-0.0748900920152664184570312f))
            ),
            simd.Fma(t2,
                simd.Fma(t, <#= vector #>.Create(0.106347933411598205566406f), <#= vector #>.Create(-0.142027363181114196777344f)),
                simd.Fma(t, <#= vector #>.Create(0.199926957488059997558594f), <#= vector #>.Create(-0.333331018686294555664062f))
            )
        );

        var r = simd.Fma(u, t * s, s);
        r = simd.Fma(q, <#= vector #>.Create(math.F_Half_PI), r);
        r ^= x_sign;
        r = <#= vector #>.ConditionalSelect(x_is_inf | x_iz,
            <#= vector #>.Create(math.F_Half_PI) - (x_is_inf & (<#= vector #>.Create(math.F_Half_PI) ^ x_sign)),
            r
        );
        r = <#= vector #>.ConditionalSelect(y_is_inf,
            <#= vector #>.Create(math.F_Half_PI) - (x_is_inf & (<#= vector #>.Create(math.F_Quarter_PI) ^ x_sign)),
            r);
        r = <#= vector #>.ConditionalSelect(y_iz,
            <#= vector #>.Equals(x_sign.AsInt32(), (-<#= vt #>.Zero).AsInt32()).AsSingle() & <#= vector #>.Create(math.F_PI),
            r);
        r = <#= vector #>.ConditionalSelect(y_is_nan | x_is_nan,
            <#= vector #>.Create(f32.NaN),
            r ^ y_sign
        );
        return r;
    }

    #endregion

<#
    }
#>
    #endregion
}
