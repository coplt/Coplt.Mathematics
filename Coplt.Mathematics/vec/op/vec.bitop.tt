<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        if (!typ.bitop) continue;

        for (var i = 2; i <= 4; i++)
        {
            var typeName = $"{typ.name}{i}";

            var byteSize = typ.size * (i is 3 ? 4 : i);
            var bitSize = 8 * byteSize;

            var uintName = $"{(typ.size == 8 ? "ulong" : "uint")}{i}";
            var support_shift = bitSize is 128 or 256 && typ.size is 4 or 8;
            var as_shift_right_type = typ is { f: false, sig: true } ? typ.size == 4 ? "AsInt32" : "AsInt64" : typ.size == 4 ? "AsUInt32" : "AsUInt64";
            var as_shift_left_type = typ.size == 4 ? "AsUInt32" : "AsUInt64";
            var shift_3d = i is 3 ? ", true" : "";

            var bType = $"b{typ.size * 8}v";
            var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
            var bTypeName = $"{bType}{i}";
#>

#region <#= typeName #>

public partial struct <#= typeName #> : IVectorBitops
    , IBitwiseOperators<<#= typeName #>, <#= typeName #>, <#= typeName #>>
<#
            if (typ.shift)
            {
#>
    , IShiftOperators<<#= typeName #>, int, <#= typeName #>>
<#
            }
#>
{
    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator ~(<#= typeName #> a)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return new(~a.vector<#
                if (i == 3)
                {
#> & Vector<#= bitSize #>.Create(-1, -1, -1, 0).As<#= typ.Type #>()<#
                }
#>);
<#
            }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.BitNot()")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator |(<#= typeName #> a, <#= typeName #> b)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return new(a.vector | b.vector);
<#
            }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.BitOr(b.{Typ.xyzw[n]})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator &(<#= typeName #> a, <#= typeName #> b)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return new(a.vector & b.vector);
<#
            }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.BitAnd(b.{Typ.xyzw[n]})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator ^(<#= typeName #> a, <#= typeName #> b)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return new(a.vector ^ b.vector);
<#
            }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.BitXor(b.{Typ.xyzw[n]})")) #>);
    }
<#
            if (typ.shift)
            {
#>

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator <<(<#= typeName #> a, int b)
    {
<#
                if (typ.simd)
                {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return new(a.vector << b);
<#
                }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.BitShiftLeft(b)")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator >>(<#= typeName #> a, int b)
    {
<#
                if (typ.simd)
                {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return new(a.vector >> b);
<#
                }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.BitShiftRight(b)")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator >>>(<#= typeName #> a, int b)
    {
<#
                if (typ.simd)
                {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return new(a.vector >>> b);
<#
                }
#>
        return new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.BitShiftRightUnsigned(b)")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator <<(<#= typeName #> a, <#= uintName #> b)
    {
<#
                if (typ.simd && support_shift)
                {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return new(simd.ShiftLeft(a.vector.<#= as_shift_left_type #>(), b.vector<#= shift_3d #>).As<#= typ.Type #>());
<#
                }
#>
        return new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.BitShiftLeft((int)b.{Typ.xyzw[n]})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator >>(<#= typeName #> a, <#= uintName #> b)
    {
<#
                if (typ.simd && support_shift)
                {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return new(simd.ShiftRight(a.vector.<#= as_shift_right_type #>(), b.vector<#= shift_3d #>).As<#= typ.Type #>());
<#
                }
#>
        return new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.BitShiftRight((int)b.{Typ.xyzw[n]})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator >>>(<#= typeName #> a, <#= uintName #> b)
    {
<#
                if (typ.simd && support_shift)
                {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return new(simd.ShiftRight(a.vector.<#= as_shift_left_type #>(), b.vector<#= shift_3d #>).As<#= typ.Type #>());
<#
                }
#>
        return new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.BitShiftRightUnsigned((int)b.{Typ.xyzw[n]})")) #>);
    }
<#
            }
#>
}

public static partial class math
{
    [MethodImpl(256 | 512)]
    public static <#= typeName #> andnot(this <#= typeName #> a, <#= typeName #> b)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return new(Vector<#= bitSize #>.AndNot(a.vector, b.vector)<#
                if (i == 3)
                {
#> & Vector<#= bitSize #>.Create(-1, -1, -1, 0).As<#= typ.Type #>()<#
                }
#>);
<#
            }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.andnot(b.{Typ.xyzw[n]})")) #>);
    }
<#
            if (typ.size == 2)
            {
#>

    [MethodImpl(256 | 512)]
    public static short<#= i #> popcnt(this <#= typeName #> a)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.asu().popcnt()")) #>);
    }

    [MethodImpl(256 | 512)]
    public static short<#= i #> lzcnt(this <#= typeName #> a)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.asu().lzcnt()")) #>);
    }

    [MethodImpl(256 | 512)]
    public static short<#= i #> tzcnt(this <#= typeName #> a)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.asu().tzcnt()")) #>);
    }
<#
            }
            else if (typ.size == 4)
            {
#>

    [MethodImpl(256 | 512)]
    public static int<#= i #> popcnt(this <#= typeName #> a)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.asu().popcnt()")) #>);
    }

    [MethodImpl(256 | 512)]
    public static int<#= i #> lzcnt(this <#= typeName #> a)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.asu().lzcnt()")) #>);
    }

    [MethodImpl(256 | 512)]
    public static int<#= i #> tzcnt(this <#= typeName #> a)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.asu().tzcnt()")) #>);
    }
<#
            }
            else if (typ.size == 8)
            {
#>

    [MethodImpl(256 | 512)]
    public static long<#= i #> popcnt(this <#= typeName #> a)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.asu().popcnt()")) #>);
    }

    [MethodImpl(256 | 512)]
    public static long<#= i #> lzcnt(this <#= typeName #> a)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.asu().lzcnt()")) #>);
    }

    [MethodImpl(256 | 512)]
    public static long<#= i #> tzcnt(this <#= typeName #> a)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}.asu().tzcnt()")) #>);
    }
<#
            }
#>
}

#endregion // <#= typeName #>
<#
        }
    }
#>

