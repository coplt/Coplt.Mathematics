<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        for (var i = 2; i <= 4; i++)
        {
            var typeName = $"{typ.name}{i}";

            var byteSize = typ.size * (i is 3 ? 4 : i);
            var bitSize = 8 * byteSize;

            var bType = $"b{typ.size * 8}v";
            var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
            var bTypeName = $"{bType}{i}";
#>

#region <#= typeName #>

public partial struct <#= typeName #> : IEquatable<<#= typeName #>>
    , IEqualityOperators<<#= typeName #>, <#= typeName #>, bool>
<#
            if (bTyp.name != null)
            {
#>
    , IEqualityOperators<<#= typeName #>, <#= typeName #>, <#= bTypeName #>>
<#
            }
#>
{
    #region Equals

    [MethodImpl(256 | 512)]
    public readonly bool Equals(<#= typeName #> other) => EqualsAll(other);
    [MethodImpl(256 | 512)]
    public readonly override bool Equals(object? obj) => obj is <#= typeName #> other && Equals(other);
    [MethodImpl(256 | 512)]
    public readonly override int GetHashCode() 
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return vector.GetHashCode();
<#
            }
#>
        return HashCode.Combine(<#
            {
                var first = true;
                for (var n = 0; n < i; n++)
                {
                    if (first) first = false;
                    else Write(", ");
                    var comp = Typ.xyzw[n];
                    Write(comp);
                }
            }
#>);
    }

    [MethodImpl(256 | 512)]
    public readonly bool EqualsAll(<#= typeName #> other)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
<#
                if (i == 3 && typ.f)
                {
#>
            return xyzx.EqualsAll(other.xyzx);
<#
                }
                else
                {
#>
            return Vector<#= bitSize #>.EqualsAll(vector, other.vector);
<#
                }
            }
#>
        return <#
            {
                var first = true;
                for (var n = 0; n < i; n++)
                {
                    if (first) first = false;
                    else Write(" && ");
                    var comp = Typ.xyzw[n];
#><#= comp #> == other.<#= comp #><#
                }
            }
#>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool EqualsAny(<#= typeName #> other)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
<#
                if (i == 3)
                {
#>
            return xyzx.EqualsAny(other.xyzx);
<#
                }
                else
                {
#>
            return Vector<#= bitSize #>.EqualsAny(vector, other.vector);
<#
                }
            }
#>
        return <#
            {
                var first = true;
                for (var n = 0; n < i; n++)
                {
                    if (first) first = false;
                    else Write(" || ");
                    var comp = Typ.xyzw[n];
#><#= comp #> == other.<#= comp #><#
                }
            }
#>;
    }
<#
            if (bTyp.name != null)
            {
#>

    [MethodImpl(256 | 512)]
    public readonly <#= bTypeName #> EqualsVector(<#= typeName #> other)
    {
<#
                if (typ.simd)
                {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return new(Vector<#= bitSize #>.Equals(vector, other.vector).As<#= bTyp.Type #>()<#
                    if (i == 3)
                    {
#> & Vector<#= bitSize #>.Create(-1, -1, -1, 0).As<#= bTyp.Type #>()<#
                    }
#>);
<#
                }
#>
        return new(<#
                {
                    var first = true;
                    for (var n = 0; n < i; n++)
                    {
                        if (first) first = false;
                        else Write(", ");
                        var comp = Typ.xyzw[n];
#><#= comp #> == other.<#= comp #><#
                    }
                }
#>);
    }

    [MethodImpl(256 | 512)]
    public readonly <#= bTypeName #> EqualsVectorNot(<#= typeName #> other)
    {
<#
                if (typ.simd)
                {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
<#
                    if (typ.f && typ.bin)
                    {
#>
            return new(simd.Ne(vector, other.vector).As<#= bTyp.Type #>()<#
                        if (i == 3)
                        {
#> & Vector<#= bitSize #>.Create(-1, -1, -1, 0).As<#= bTyp.Type #>()<#
                        }
#>);
<#
                    }
                    else
                    {
#>
            return new(~Vector<#= bitSize #>.Equals(vector, other.vector).As<#= bTyp.Type #>()<#
                        if (i == 3)
                        {
#> & Vector<#= bitSize #>.Create(-1, -1, -1, 0).As<#= bTyp.Type #>()<#
                        }
#>);
<#
                    }
#>
<#
                }
#>
        return new(<#
                {
                    var first = true;
                    for (var n = 0; n < i; n++)
                    {
                        if (first) first = false;
                        else Write(", ");
                        var comp = Typ.xyzw[n];
#><#= comp #> != other.<#= comp #><#
                    }
                }
#>);
    }
<#
            }
#>

    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<<#= typeName #>, <#= typeName #>, bool>.operator ==(<#= typeName #> left, <#= typeName #> right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<<#= typeName #>, <#= typeName #>, bool>.operator !=(<#= typeName #> left, <#= typeName #> right) => !left.Equals(right);

<#
            if (bTyp.name != null)
            {
#>

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator ==(<#= typeName #> left, <#= typeName #> right) => left.EqualsVector(right);
    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator !=(<#= typeName #> left, <#= typeName #> right) => left.EqualsVectorNot(right);
<#
            }
#>

    #endregion
}

#endregion // <#= typeName #>
<#
        }
    }
#>
