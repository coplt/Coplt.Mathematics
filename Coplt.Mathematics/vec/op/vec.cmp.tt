<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics;
<#
    foreach (var typ in Typ.Typs)
    {
        if (typ.size * 8 >= 128) continue;

        for (var i = 2; i <= 4; i++)
        {
            var typeName = $"{typ.name}{i}";

            var byteSize = typ.size * (i is 3 ? 4 : i);
            var bitSize = 8 * byteSize;

            var bType = $"b{typ.size * 8}v";
            var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
            var bTypeName = $"{bType}{i}";
#>

#region <#= typeName #>

public partial struct <#= typeName #> : IComparable<<#= typeName #>>, IComparable
    , IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>
<#
            if (bTyp.name != null)
            {
#>
    , IComparisonOperators<<#= typeName #>, <#= typeName #>, <#= bTypeName #>>
<#
            }
#>
{

    [MethodImpl(256 | 512)]
    public readonly int CompareTo(object? obj)
    {
        if (ReferenceEquals(null, obj)) return 1;
        return obj is <#= typeName #> other ? CompareTo(other) : throw new ArgumentException($"Object must be of type {nameof(<#= typeName #>)}");
    }

    static bool IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>.operator <(<#= typeName #> left, <#= typeName #> right) => 
        left.LessThanAll(right);
    [MethodImpl(256 | 512)]
    static bool IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>.operator >(<#= typeName #> left, <#= typeName #> right) => 
        left.GreaterThanAll(right);
    [MethodImpl(256 | 512)]
    static bool IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>.operator <=(<#= typeName #> left, <#= typeName #> right) => 
        left.LessThanOrEqualAll(right);
    [MethodImpl(256 | 512)]
    static bool IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>.operator >=(<#= typeName #> left, <#= typeName #> right) => 
        left.GreaterThanOrEqualAll(right);

    [MethodImpl(256 | 512)]
    public readonly int CompareTo(<#= typeName #> other)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
        {
            if (Vector<#= bitSize #>.LessThanAny(vector, other.vector)) return -1;
            if (Vector<#= bitSize #>.GreaterThanAny(vector, other.vector)) return 1;
            return 0;
        }
<#
            }
#>
        if (<#= string.Join(" || ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]} < other.{Typ.xyzw[n]}")) #>) return -1;
        if (<#= string.Join(" || ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]} > other.{Typ.xyzw[n]}")) #>) return 1;
        return 0;
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator <(<#= typeName #> left, <#= typeName #> right)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return new(Vector<#= bitSize #>.LessThan(left.vector, right.vector).As<#= bTyp.Type #>()<#
                if (i == 3)
                {
#> & Vector<#= bitSize #>.Create(-1, -1, -1, 0).As<#= bTyp.Type #>()<#
                }
#>);
<#
            }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left.{Typ.xyzw[n]} < right.{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator >(<#= typeName #> left, <#= typeName #> right)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return new(Vector<#= bitSize #>.GreaterThan(left.vector, right.vector).As<#= bTyp.Type #>()<#
                if (i == 3)
                {
#> & Vector<#= bitSize #>.Create(-1, -1, -1, 0).As<#= bTyp.Type #>()<#
                }
#>);
<#
            }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left.{Typ.xyzw[n]} > right.{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator <=(<#= typeName #> left, <#= typeName #> right)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return new(Vector<#= bitSize #>.LessThanOrEqual(left.vector, right.vector).As<#= bTyp.Type #>()<#
                if (i == 3)
                {
#> & Vector<#= bitSize #>.Create(-1, -1, -1, 0).As<#= bTyp.Type #>()<#
                }
#>);
<#
            }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left.{Typ.xyzw[n]} <= right.{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator >=(<#= typeName #> left, <#= typeName #> right)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return new(Vector<#= bitSize #>.GreaterThanOrEqual(left.vector, right.vector).As<#= bTyp.Type #>()<#
                if (i == 3)
                {
#> & Vector<#= bitSize #>.Create(-1, -1, -1, 0).As<#= bTyp.Type #>()<#
                }
#>);
<#
            }
#>
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left.{Typ.xyzw[n]} >= right.{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public readonly bool LessThanAll(<#= typeName #> other)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return Vector<#= bitSize #>.LessThanAll(vector, other.vector);
<#
            }
#>
        return <#= string.Join(" && ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]} < other.{Typ.xyzw[n]}")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool GreaterThanAll(<#= typeName #> other)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return Vector<#= bitSize #>.GreaterThanAll(vector, other.vector);
<#
            }
#>
        return <#= string.Join(" && ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]} > other.{Typ.xyzw[n]}")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool LessThanOrEqualAll(<#= typeName #> other)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return Vector<#= bitSize #>.LessThanOrEqualAll(vector, other.vector);
<#
            }
#>
        return <#= string.Join(" && ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]} <= other.{Typ.xyzw[n]}")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool GreaterThanOrEqualAll(<#= typeName #> other)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return Vector<#= bitSize #>.GreaterThanOrEqualAll(vector, other.vector);
<#
            }
#>
        return <#= string.Join(" && ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]} >= other.{Typ.xyzw[n]}")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool LessThanAny(<#= typeName #> other)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return Vector<#= bitSize #>.LessThanAny(vector, other.vector);
<#
            }
#>
        return <#= string.Join(" || ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]} < other.{Typ.xyzw[n]}")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool GreaterThanAny(<#= typeName #> other)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return Vector<#= bitSize #>.GreaterThanAny(vector, other.vector);
<#
            }
#>
        return <#= string.Join(" || ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]} > other.{Typ.xyzw[n]}")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool LessThanOrEqualAny(<#= typeName #> other)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return Vector<#= bitSize #>.LessThanOrEqualAny(vector, other.vector);
<#
            }
#>
        return <#= string.Join(" || ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]} <= other.{Typ.xyzw[n]}")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool GreaterThanOrEqualAny(<#= typeName #> other)
    {
<#
            if (typ.simd)
            {
#>
        if (Vector<#= bitSize #>.IsHardwareAccelerated)
            return Vector<#= bitSize #>.GreaterThanOrEqualAny(vector, other.vector);
<#
            }
#>
        return <#= string.Join(" || ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]} >= other.{Typ.xyzw[n]}")) #>;
    }

}

#endregion // <#= typeName #>
<#
        }
    }
#>
