<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.SIMT;

<#
    var sizes = new[] { 4, 8, 16, 32 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.f) continue;
        if (!typ.bin) continue;
        if (!typ.arith) continue;
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        foreach (var size in sizes)
        {
            var byteSize = typ.size * size;
            var bitSize = 8 * byteSize;
            var num_vectors = Math.Max(1, bitSize / 512);
            bitSize = Math.Min(512, bitSize);

            var typeName = $"{typ.compType}_mt{size}";

            var bSize = typ.size * 8;
            var bTypeName = $"b{bSize}_mt{size}";

            IEnumerable<string> ForVectors(string name)
            {
                if (num_vectors == 1) yield return name;
                else
                {
                    for (var i = 0; i < num_vectors; i++)
                    {
                        yield return $"{name}{i}";
                    }
                }
            }

            var vectors = ForVectors("vector").ToList();
#>
#region <#= typeName #>

public partial struct <#= typeName #>
{
    #region Constants

    /// <summary>
    /// <code>e</code>
    /// </summary>
    public static <#= typeName #> E
    { 
        [MethodImpl(256 | 512)] 
        get => new(2.7182818284590452353602874713526624977572470936999595749669676277<#= typ.suffix #>); 
    }
    /// <summary>
    /// <code>log(2)</code>
    /// </summary>
    public static <#= typeName #> Log2
    { 
        [MethodImpl(256 | 512)] 
        get => new(0.6931471805599453094172321214581765680755001343602552541206800094<#= typ.suffix #>); 
    }
    /// <summary>
    /// <code>log(10)</code>
    /// </summary>
    public static <#= typeName #> Log10
    { 
        [MethodImpl(256 | 512)] 
        get => new(2.3025850929940456840179914546843642076011014886287729760333279009<#= typ.suffix #>);
    }
    /// <summary>
    /// <code>π</code>
    /// </summary>
    public static <#= typeName #> PI
    { 
        [MethodImpl(256 | 512)] 
        get => new(3.1415926535897932384626433832795028841971693993751058209749445923<#= typ.suffix #>);
    }
    /// <summary>
    /// <code>τ = 2 * π</code>
    /// </summary>
    public static <#= typeName #> Tau
    { 
        [MethodImpl(256 | 512)] 
        get => new(6.2831853071795864769252867665590057683943387987502116419498891846<#= typ.suffix #>);
    }
    /// <summary>
    /// <code>360 / τ</code>
    /// </summary>
    public static <#= typeName #> RadToDeg
    { 
        [MethodImpl(256 | 512)] 
        get => new(57.295779513082320876798154814105170332405472466564321549160243861<#= typ.suffix #>);
    }
    /// <summary>
    /// <code>τ / 360</code>
    /// </summary>
    public static <#= typeName #> DegToRad
    { 
        [MethodImpl(256 | 512)] 
        get => new(0.0174532925199432957692369076848861271344287188854172545609719144<#= typ.suffix #>);
    }

    #endregion
}

[Ex]
public static partial class math_mt
{
    #pragma warning disable CS1718
    // ReSharper disable once EqualExpressionComparison
    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isNaN([This] <#= typeName #> a) => a != a;
    #pragma warning restore CS1718

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isFinite([This] <#= typeName #> a) => abs(a) < <#= typ.simdComp #>.PositiveInfinity;

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isInf([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.IsInfinity(a.{v}).AsUInt{bSize}()")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isPosInf([This] <#= typeName #> a) => a == <#= typ.simdComp #>.PositiveInfinity;

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isNegInf([This] <#= typeName #> a) => a == <#= typ.simdComp #>.NegativeInfinity;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> ceil([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"Vector{bitSize}.Ceiling(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> floor([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"Vector{bitSize}.Floor(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> round([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Round(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> trunc([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.RoundToZero(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> mod([This] <#= typeName #> a, <#= typeName #> b)
    {
        var x = a;
        var y = b;
        var div = x / y;
        var flr = floor(div);
        return fnma(flr, y, x);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> mod([This] <#= typeName #> a, <#= typ.compType #> b)
    {
        var x = a;
        var y = b;
        var div = x / y;
        var flr = floor(div);
        return fnma(flr, y, x);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> rem([This] <#= typeName #> a, <#= typeName #> b)
    {
        var x = a;
        var y = b;
        var div = x / y;
        var flr = trunc(div);
        return fnma(flr, y, x);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> rem([This] <#= typeName #> a, <#= typ.compType #> b)
    {
        var x = a;
        var y = b;
        var div = x / y;
        var flr = trunc(div);
        return fnma(flr, y, x);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> frac([This] <#= typeName #> a) => a - floor(a);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> modf([This] <#= typeName #> d, out <#= typeName #> i)
    {
        i = trunc(d);
        return d - i;
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> rcp([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Rcp(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> saturate([This] <#= typeName #> a) => a.clamp(default, <#= typeName #>.One);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> smoothstep(<#= typeName #> min, <#= typeName #> max, [This] <#= typeName #> a)
    {
        var t = saturate((a - min) / (max - min));
        return t * t * fnma(2.0<#= typ.suffix #>, t, 3.0<#= typ.suffix #>); // (3.0<#= typ.suffix #> - (2.0<#= typ.suffix #> * t))
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> radians([This] <#= typeName #> a) => a * 0.0174532925199432957692369076848861271344287188854172545609719144<#= typ.suffix #>;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> degrees([This] <#= typeName #> a) => a * 57.295779513082320876798154814105170332405472466564321549160243861<#= typ.suffix #>;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> wrap([This] <#= typeName #> x, <#= typeName #> min, <#= typeName #> max)
    {
        var add = select(x >= <#= typeName #>.Zero, min, max);
        var off = x % (max - min);
        return add + off;
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> wrap([This] <#= typeName #> x, <#= typ.compType #> min, <#= typ.compType #> max)
    {
        var add = select(x >= 0<#= typ.suffix #>, min, max);
        var off = x % (max - min);
        return add + off;
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Log(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log2([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Log2(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log([This] <#= typeName #> a, <#= typeName #> b) => log(a) / log(b);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> log10([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Log10(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> exp([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Exp(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> exp2([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Exp2(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> exp10([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Exp10(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> pow([This] <#= typeName #> a, <#= typeName #> b)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Pow(a.{v}, b.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> pow([This] <#= typeName #> a, <#= typ.compType #> b)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Pow(a.{v}, b)")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> sqrt([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"Vector{bitSize}.Sqrt(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> rsqrt([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.RSqrt(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> step(<#= typeName #> threshold, [This] <#= typeName #> a) =>
        select(a >= threshold, <#= typeName #>.One, default);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> sin([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Sin(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> cos([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Cos(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static (<#= typeName #> sin, <#= typeName #> cos) sincos([This] <#= typeName #> a)
    {
<#
            foreach (var v in vectors)
            {
#>
        var (sin_<#= v #>, cos_<#= v #>) = simd.SinCos(a.<#= v #>);
<#
            }
#>
        return (
            new(<#= string.Join(", ", vectors.Select(v => $"sin_{v}")) #>),
            new(<#= string.Join(", ", vectors.Select(v => $"cos_{v}")) #>)
        );
    }

    [MethodImpl(256 | 512)]
    public static void sincos([This] <#= typeName #> a, out <#= typeName #> sin, out <#= typeName #> cos)
    {
<#
            foreach (var v in vectors)
            {
#>
        var (sin_<#= v #>, cos_<#= v #>) = simd.SinCos(a.<#= v #>);
<#
            }
#>
        sin = new(<#= string.Join(", ", vectors.Select(v => $"sin_{v}")) #>);
        cos = new(<#= string.Join(", ", vectors.Select(v => $"cos_{v}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> tan([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Tan(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> asin([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Asin(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> acos([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Acos(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> atan([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Atan(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> atan2([This] <#= typeName #> a, <#= typeName #> b)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Atan2(a.{v}, b.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> sinh([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Sinh(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> cosh([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Cosh(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> tanh([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Tanh(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> asinh([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Asinh(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> acosh([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Acosh(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> atanh([This] <#= typeName #> a)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Atanh(a.{v})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> chgsign([This] <#= typeName #> a, <#= typeName #> b)
    {
        var sig = Unsafe.BitCast<<#= typ.maskType #>, <#= typ.compType #>>(<#=
                    typ.name switch { "half" => "0x8000", "float" => "0x8000_0000", "double" => "0x8000_0000_0000_0000", _ => "" } #>);
        return (b & sig) ^ a;
    }
}

#endregion // <#= typeName #>
<#
        }
    }
#>
