<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

<#
    var sizes = new[] { 4, 8, 16, 32 };
    var TypMap = Typ.Typs.ToDictionary(a => a.name);

    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        if (!Typ.ExplicitConverts.TryGetValue(typ.name, out var exp)) exp = [];
        if (!Typ.ImplicitConverts.TryGetValue(typ.name, out var imp)) imp = [];

        if (exp.Length + imp.Length == 0) continue;

        var convs = exp.AsParallel().AsOrdered().Select(a => (c:"explicit", t:TypMap.TryGetValue(a, out var b) ? b : default))
            .Concat(imp.AsParallel().AsOrdered().Select(a => (c:"implicit", t:TypMap.TryGetValue(a, out var b) ? b : default)))
            .Where(a => a.t.name != null).ToArray();

        foreach (var size in sizes)
        {
            var byteSize = typ.size * size;
            var bitSize = 8 * byteSize;
            var num_vectors = Math.Max(1, bitSize / 512);
            bitSize = Math.Min(512, bitSize);

            var typeName = $"{typ.compType}_mt{size}";

            IEnumerable<string> ForVectors(string name)
            {
                if (num_vectors == 1) yield return name;
                else
                {
                    for (var i = 0; i < num_vectors; i++)
                    {
                        yield return $"{name}{i}";
                    }
                }
            }

            var vectors = ForVectors("vector").ToList();
#>

#region <#= typeName #>

public partial struct <#= typeName #> 
{
<#
            foreach (var (ck, tar) in convs)
            {
                if (!tar.simd) continue;
                if (tar.size < 4) continue;
                var tarName = $"{tar.compType}_mt{size}";

                var cast = $"({tar.compType})";

                var tarByteSize = tar.size * size;
                var tarBitSize = 8 * tarByteSize;
                var tar_num_vectors = Math.Max(1, tarBitSize / 512);
                tarBitSize = Math.Min(512, tarBitSize);

                IEnumerable<string> TarForVectors(string name)
                {
                    if (tar_num_vectors == 1) yield return name;
                    else
                    {
                        for (var i = 0; i < tar_num_vectors; i++)
                        {
                            yield return $"{name}{i}";
                        }
                    }
                }

                var tar_vectors = TarForVectors("vector").ToList();
#>
    [MethodImpl(256 | 512)]
    public static <#= ck #> operator <#= tarName #>(<#= typeName #> self)
    {
<#
                if (typ.size == tar.size)
                {
                    if (typ.f || tar.f)
                    {
#>
        return new(<#= string.Join(", ", vectors.Select(v => $"Vector{bitSize}.ConvertTo{tar.Type}(self.{v})")) #>);
<#
                    }
                    else
                    {
#>
        return self.BitCast<<#= typeName #>, <#= tarName #>>();
<#
                    }
                }
                else if (typ.size < tar.size)
                {
                    foreach (var v in vectors)
                    {
#>
        var (a_<#= v #>, b_<#= v #>) = Vector<#= bitSize #>.Widen(self.<#= v #>);
<#
                    }
                    if (typ.f && tar.f)
                    {
                        if (bitSize != 512)
                        {
#>
        return new(<#= string.Join(", ", vectors.Select(v => $"Vector{tarBitSize}.Create(a_{v}, b_{v})")) #>);
<#
                        }
                        else
                        {
#>
        return new(<#= string.Join(", ", vectors.Select(v => $"a_{v}, b_{v}")) #>);
<#
                        }
                    }
                    else if (typ.f || tar.f)
                    {
                        if (bitSize != 512)
                        {
#>
        return new(<#=
                                string.Join(", ", vectors.Select(v => $"Vector{tarBitSize}.ConvertTo{tar.Type}(Vector{tarBitSize}.Create(a_{v}, b_{v}))")) #>);
<#
                        }
                        else
                        {
#>
        return new(<#=
                                string.Join(", ", vectors.Select(v => $"Vector{tarBitSize}.ConvertTo{tar.Type}(a_{v}), Vector{tarBitSize}.ConvertTo{tar.Type}(b_{v})")) #>);
<#
                        }
                    }
                    else
                    {
                        if (bitSize != 512)
                        {
#>
        return new(<#=
                                string.Join(", ", vectors.Select(v => $"Vector{tarBitSize}.Create(a_{v}, b_{v}).As{tar.Type}()")) #>);
<#
                        }
                        else
                        {
#>
        return new(<#=
                                string.Join(", ", vectors.Select(v => $"a_{v}.As{tar.Type}(), b_{v}.As{tar.Type}()")) #>);
<#
                        }
                    }
                }
                else
                {
                    if (bitSize != 512)
                    {
                        foreach (var (v, n) in vectors.Select((a, b) => (a, b)))
                        {
#>
        var <#= v #> = Vector<#= tarBitSize #>.Narrow(self.<#= v #>.GetLower(), self.<#= v #>.GetUpper());
<#
                        }
                    }
                    else
                    {
                        if (num_vectors == 1)
                        {
#>
        var vector = Vector<#= tarBitSize #>.Narrow(self.vector.GetLower(), self.vector.GetUpper());
<#
                        }
                        else
                        {
                            for (var n = 0; n < tar_num_vectors; n++)
                            {
                                var o = n * 2;
#>
        var vector<#= tar_num_vectors == 1 ? "" : n #> = Vector<#= tarBitSize #>.Narrow(self.<#= vectors[o] #>, self.<#= vectors[o + 1] #>);
<#
                            }
                        }
                    }
                    if (typ.f && tar.f)
                    {
#>
        return new(<#= string.Join(", ", tar_vectors) #>);
<#
                    }
                    else if (typ.f || tar.f)
                    {
#>
        return new(<#=
                            string.Join(", ", tar_vectors.Select(v => $"Vector{tarBitSize}.ConvertTo{tar.Type}({v})")) #>);
<#
                    }
                    else
                    {
#>
        return new(<#=
                            string.Join(", ", tar_vectors.Select(v => $"{v}.As{tar.Type}()")) #>);
<#
                    }
                }
#>
    }
<#
            }
#>
}

#endregion // <#= typeName #>
<#
        }
    }
#>
