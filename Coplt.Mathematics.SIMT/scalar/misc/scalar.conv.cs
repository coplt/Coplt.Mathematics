// generated by template, do not modify manually

namespace Coplt.Mathematics.SIMT;


#region float_mt4

public partial struct float_mt4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt4(float_mt4 self)
    {
        return new(Vector128.ConvertToUInt32(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt4(float_mt4 self)
    {
        return new(Vector128.ConvertToInt32(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt4(float_mt4 self)
    {
        var (a_vector, b_vector) = Vector128.Widen(self.vector);
        return new(Vector256.ConvertToUInt64(Vector256.Create(a_vector, b_vector)));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt4(float_mt4 self)
    {
        var (a_vector, b_vector) = Vector128.Widen(self.vector);
        return new(Vector256.ConvertToInt64(Vector256.Create(a_vector, b_vector)));
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt4(float_mt4 self)
    {
        var (a_vector, b_vector) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a_vector, b_vector));
    }
}

#endregion // float_mt4

#region float_mt8

public partial struct float_mt8 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt8(float_mt8 self)
    {
        return new(Vector256.ConvertToUInt32(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt8(float_mt8 self)
    {
        return new(Vector256.ConvertToInt32(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt8(float_mt8 self)
    {
        var (a_vector, b_vector) = Vector256.Widen(self.vector);
        return new(Vector512.ConvertToUInt64(Vector512.Create(a_vector, b_vector)));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt8(float_mt8 self)
    {
        var (a_vector, b_vector) = Vector256.Widen(self.vector);
        return new(Vector512.ConvertToInt64(Vector512.Create(a_vector, b_vector)));
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt8(float_mt8 self)
    {
        var (a_vector, b_vector) = Vector256.Widen(self.vector);
        return new(Vector512.Create(a_vector, b_vector));
    }
}

#endregion // float_mt8

#region float_mt16

public partial struct float_mt16 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt16(float_mt16 self)
    {
        return new(Vector512.ConvertToUInt32(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt16(float_mt16 self)
    {
        return new(Vector512.ConvertToInt32(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt16(float_mt16 self)
    {
        var (a_vector, b_vector) = Vector512.Widen(self.vector);
        return new(Vector512.ConvertToUInt64(a_vector), Vector512.ConvertToUInt64(b_vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt16(float_mt16 self)
    {
        var (a_vector, b_vector) = Vector512.Widen(self.vector);
        return new(Vector512.ConvertToInt64(a_vector), Vector512.ConvertToInt64(b_vector));
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt16(float_mt16 self)
    {
        var (a_vector, b_vector) = Vector512.Widen(self.vector);
        return new(a_vector, b_vector);
    }
}

#endregion // float_mt16

#region float_mt32

public partial struct float_mt32 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt32(float_mt32 self)
    {
        return new(Vector512.ConvertToUInt32(self.vector0), Vector512.ConvertToUInt32(self.vector1));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt32(float_mt32 self)
    {
        return new(Vector512.ConvertToInt32(self.vector0), Vector512.ConvertToInt32(self.vector1));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt32(float_mt32 self)
    {
        var (a_vector0, b_vector0) = Vector512.Widen(self.vector0);
        var (a_vector1, b_vector1) = Vector512.Widen(self.vector1);
        return new(Vector512.ConvertToUInt64(a_vector0), Vector512.ConvertToUInt64(b_vector0), Vector512.ConvertToUInt64(a_vector1), Vector512.ConvertToUInt64(b_vector1));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt32(float_mt32 self)
    {
        var (a_vector0, b_vector0) = Vector512.Widen(self.vector0);
        var (a_vector1, b_vector1) = Vector512.Widen(self.vector1);
        return new(Vector512.ConvertToInt64(a_vector0), Vector512.ConvertToInt64(b_vector0), Vector512.ConvertToInt64(a_vector1), Vector512.ConvertToInt64(b_vector1));
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt32(float_mt32 self)
    {
        var (a_vector0, b_vector0) = Vector512.Widen(self.vector0);
        var (a_vector1, b_vector1) = Vector512.Widen(self.vector1);
        return new(a_vector0, b_vector0, a_vector1, b_vector1);
    }
}

#endregion // float_mt32

#region double_mt4

public partial struct double_mt4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt4(double_mt4 self)
    {
        var vector = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(Vector128.ConvertToUInt32(vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt4(double_mt4 self)
    {
        var vector = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(Vector128.ConvertToInt32(vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt4(double_mt4 self)
    {
        return new(Vector256.ConvertToUInt64(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt4(double_mt4 self)
    {
        return new(Vector256.ConvertToInt64(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float_mt4(double_mt4 self)
    {
        var vector = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(vector);
    }
}

#endregion // double_mt4

#region double_mt8

public partial struct double_mt8 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt8(double_mt8 self)
    {
        var vector = Vector256.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(Vector256.ConvertToUInt32(vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt8(double_mt8 self)
    {
        var vector = Vector256.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(Vector256.ConvertToInt32(vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt8(double_mt8 self)
    {
        return new(Vector512.ConvertToUInt64(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt8(double_mt8 self)
    {
        return new(Vector512.ConvertToInt64(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float_mt8(double_mt8 self)
    {
        var vector = Vector256.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(vector);
    }
}

#endregion // double_mt8

#region double_mt16

public partial struct double_mt16 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt16(double_mt16 self)
    {
        var vector = Vector512.Narrow(self.vector0, self.vector1);
        return new(Vector512.ConvertToUInt32(vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt16(double_mt16 self)
    {
        var vector = Vector512.Narrow(self.vector0, self.vector1);
        return new(Vector512.ConvertToInt32(vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt16(double_mt16 self)
    {
        return new(Vector512.ConvertToUInt64(self.vector0), Vector512.ConvertToUInt64(self.vector1));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt16(double_mt16 self)
    {
        return new(Vector512.ConvertToInt64(self.vector0), Vector512.ConvertToInt64(self.vector1));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float_mt16(double_mt16 self)
    {
        var vector = Vector512.Narrow(self.vector0, self.vector1);
        return new(vector);
    }
}

#endregion // double_mt16

#region double_mt32

public partial struct double_mt32 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt32(double_mt32 self)
    {
        var vector0 = Vector512.Narrow(self.vector0, self.vector1);
        var vector1 = Vector512.Narrow(self.vector2, self.vector3);
        return new(Vector512.ConvertToUInt32(vector0), Vector512.ConvertToUInt32(vector1));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt32(double_mt32 self)
    {
        var vector0 = Vector512.Narrow(self.vector0, self.vector1);
        var vector1 = Vector512.Narrow(self.vector2, self.vector3);
        return new(Vector512.ConvertToInt32(vector0), Vector512.ConvertToInt32(vector1));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt32(double_mt32 self)
    {
        return new(Vector512.ConvertToUInt64(self.vector0), Vector512.ConvertToUInt64(self.vector1), Vector512.ConvertToUInt64(self.vector2), Vector512.ConvertToUInt64(self.vector3));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt32(double_mt32 self)
    {
        return new(Vector512.ConvertToInt64(self.vector0), Vector512.ConvertToInt64(self.vector1), Vector512.ConvertToInt64(self.vector2), Vector512.ConvertToInt64(self.vector3));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float_mt32(double_mt32 self)
    {
        var vector0 = Vector512.Narrow(self.vector0, self.vector1);
        var vector1 = Vector512.Narrow(self.vector2, self.vector3);
        return new(vector0, vector1);
    }
}

#endregion // double_mt32

#region int_mt4

public partial struct int_mt4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt4(int_mt4 self)
    {
        return self.BitCast<int_mt4, uint_mt4>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt4(int_mt4 self)
    {
        var (a_vector, b_vector) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a_vector, b_vector).AsUInt64());
    }
    [MethodImpl(256 | 512)]
    public static implicit operator long_mt4(int_mt4 self)
    {
        var (a_vector, b_vector) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a_vector, b_vector).AsInt64());
    }
    [MethodImpl(256 | 512)]
    public static implicit operator float_mt4(int_mt4 self)
    {
        return new(Vector128.ConvertToSingle(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt4(int_mt4 self)
    {
        var (a_vector, b_vector) = Vector128.Widen(self.vector);
        return new(Vector256.ConvertToDouble(Vector256.Create(a_vector, b_vector)));
    }
}

#endregion // int_mt4

#region int_mt8

public partial struct int_mt8 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt8(int_mt8 self)
    {
        return self.BitCast<int_mt8, uint_mt8>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt8(int_mt8 self)
    {
        var (a_vector, b_vector) = Vector256.Widen(self.vector);
        return new(Vector512.Create(a_vector, b_vector).AsUInt64());
    }
    [MethodImpl(256 | 512)]
    public static implicit operator long_mt8(int_mt8 self)
    {
        var (a_vector, b_vector) = Vector256.Widen(self.vector);
        return new(Vector512.Create(a_vector, b_vector).AsInt64());
    }
    [MethodImpl(256 | 512)]
    public static implicit operator float_mt8(int_mt8 self)
    {
        return new(Vector256.ConvertToSingle(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt8(int_mt8 self)
    {
        var (a_vector, b_vector) = Vector256.Widen(self.vector);
        return new(Vector512.ConvertToDouble(Vector512.Create(a_vector, b_vector)));
    }
}

#endregion // int_mt8

#region int_mt16

public partial struct int_mt16 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt16(int_mt16 self)
    {
        return self.BitCast<int_mt16, uint_mt16>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt16(int_mt16 self)
    {
        var (a_vector, b_vector) = Vector512.Widen(self.vector);
        return new(a_vector.AsUInt64(), b_vector.AsUInt64());
    }
    [MethodImpl(256 | 512)]
    public static implicit operator long_mt16(int_mt16 self)
    {
        var (a_vector, b_vector) = Vector512.Widen(self.vector);
        return new(a_vector.AsInt64(), b_vector.AsInt64());
    }
    [MethodImpl(256 | 512)]
    public static implicit operator float_mt16(int_mt16 self)
    {
        return new(Vector512.ConvertToSingle(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt16(int_mt16 self)
    {
        var (a_vector, b_vector) = Vector512.Widen(self.vector);
        return new(Vector512.ConvertToDouble(a_vector), Vector512.ConvertToDouble(b_vector));
    }
}

#endregion // int_mt16

#region int_mt32

public partial struct int_mt32 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt32(int_mt32 self)
    {
        return self.BitCast<int_mt32, uint_mt32>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt32(int_mt32 self)
    {
        var (a_vector0, b_vector0) = Vector512.Widen(self.vector0);
        var (a_vector1, b_vector1) = Vector512.Widen(self.vector1);
        return new(a_vector0.AsUInt64(), b_vector0.AsUInt64(), a_vector1.AsUInt64(), b_vector1.AsUInt64());
    }
    [MethodImpl(256 | 512)]
    public static implicit operator long_mt32(int_mt32 self)
    {
        var (a_vector0, b_vector0) = Vector512.Widen(self.vector0);
        var (a_vector1, b_vector1) = Vector512.Widen(self.vector1);
        return new(a_vector0.AsInt64(), b_vector0.AsInt64(), a_vector1.AsInt64(), b_vector1.AsInt64());
    }
    [MethodImpl(256 | 512)]
    public static implicit operator float_mt32(int_mt32 self)
    {
        return new(Vector512.ConvertToSingle(self.vector0), Vector512.ConvertToSingle(self.vector1));
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt32(int_mt32 self)
    {
        var (a_vector0, b_vector0) = Vector512.Widen(self.vector0);
        var (a_vector1, b_vector1) = Vector512.Widen(self.vector1);
        return new(Vector512.ConvertToDouble(a_vector0), Vector512.ConvertToDouble(b_vector0), Vector512.ConvertToDouble(a_vector1), Vector512.ConvertToDouble(b_vector1));
    }
}

#endregion // int_mt32

#region uint_mt4

public partial struct uint_mt4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt4(uint_mt4 self)
    {
        return self.BitCast<uint_mt4, int_mt4>();
    }
    [MethodImpl(256 | 512)]
    public static implicit operator long_mt4(uint_mt4 self)
    {
        var (a_vector, b_vector) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a_vector, b_vector).AsInt64());
    }
    [MethodImpl(256 | 512)]
    public static implicit operator ulong_mt4(uint_mt4 self)
    {
        var (a_vector, b_vector) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a_vector, b_vector).AsUInt64());
    }
    [MethodImpl(256 | 512)]
    public static implicit operator float_mt4(uint_mt4 self)
    {
        return new(Vector128.ConvertToSingle(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt4(uint_mt4 self)
    {
        var (a_vector, b_vector) = Vector128.Widen(self.vector);
        return new(Vector256.ConvertToDouble(Vector256.Create(a_vector, b_vector)));
    }
}

#endregion // uint_mt4

#region uint_mt8

public partial struct uint_mt8 
{
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt8(uint_mt8 self)
    {
        return self.BitCast<uint_mt8, int_mt8>();
    }
    [MethodImpl(256 | 512)]
    public static implicit operator long_mt8(uint_mt8 self)
    {
        var (a_vector, b_vector) = Vector256.Widen(self.vector);
        return new(Vector512.Create(a_vector, b_vector).AsInt64());
    }
    [MethodImpl(256 | 512)]
    public static implicit operator ulong_mt8(uint_mt8 self)
    {
        var (a_vector, b_vector) = Vector256.Widen(self.vector);
        return new(Vector512.Create(a_vector, b_vector).AsUInt64());
    }
    [MethodImpl(256 | 512)]
    public static implicit operator float_mt8(uint_mt8 self)
    {
        return new(Vector256.ConvertToSingle(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt8(uint_mt8 self)
    {
        var (a_vector, b_vector) = Vector256.Widen(self.vector);
        return new(Vector512.ConvertToDouble(Vector512.Create(a_vector, b_vector)));
    }
}

#endregion // uint_mt8

#region uint_mt16

public partial struct uint_mt16 
{
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt16(uint_mt16 self)
    {
        return self.BitCast<uint_mt16, int_mt16>();
    }
    [MethodImpl(256 | 512)]
    public static implicit operator long_mt16(uint_mt16 self)
    {
        var (a_vector, b_vector) = Vector512.Widen(self.vector);
        return new(a_vector.AsInt64(), b_vector.AsInt64());
    }
    [MethodImpl(256 | 512)]
    public static implicit operator ulong_mt16(uint_mt16 self)
    {
        var (a_vector, b_vector) = Vector512.Widen(self.vector);
        return new(a_vector.AsUInt64(), b_vector.AsUInt64());
    }
    [MethodImpl(256 | 512)]
    public static implicit operator float_mt16(uint_mt16 self)
    {
        return new(Vector512.ConvertToSingle(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt16(uint_mt16 self)
    {
        var (a_vector, b_vector) = Vector512.Widen(self.vector);
        return new(Vector512.ConvertToDouble(a_vector), Vector512.ConvertToDouble(b_vector));
    }
}

#endregion // uint_mt16

#region uint_mt32

public partial struct uint_mt32 
{
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt32(uint_mt32 self)
    {
        return self.BitCast<uint_mt32, int_mt32>();
    }
    [MethodImpl(256 | 512)]
    public static implicit operator long_mt32(uint_mt32 self)
    {
        var (a_vector0, b_vector0) = Vector512.Widen(self.vector0);
        var (a_vector1, b_vector1) = Vector512.Widen(self.vector1);
        return new(a_vector0.AsInt64(), b_vector0.AsInt64(), a_vector1.AsInt64(), b_vector1.AsInt64());
    }
    [MethodImpl(256 | 512)]
    public static implicit operator ulong_mt32(uint_mt32 self)
    {
        var (a_vector0, b_vector0) = Vector512.Widen(self.vector0);
        var (a_vector1, b_vector1) = Vector512.Widen(self.vector1);
        return new(a_vector0.AsUInt64(), b_vector0.AsUInt64(), a_vector1.AsUInt64(), b_vector1.AsUInt64());
    }
    [MethodImpl(256 | 512)]
    public static implicit operator float_mt32(uint_mt32 self)
    {
        return new(Vector512.ConvertToSingle(self.vector0), Vector512.ConvertToSingle(self.vector1));
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt32(uint_mt32 self)
    {
        var (a_vector0, b_vector0) = Vector512.Widen(self.vector0);
        var (a_vector1, b_vector1) = Vector512.Widen(self.vector1);
        return new(Vector512.ConvertToDouble(a_vector0), Vector512.ConvertToDouble(b_vector0), Vector512.ConvertToDouble(a_vector1), Vector512.ConvertToDouble(b_vector1));
    }
}

#endregion // uint_mt32

#region long_mt4

public partial struct long_mt4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt4(long_mt4 self)
    {
        var vector = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(vector.AsUInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt4(long_mt4 self)
    {
        var vector = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(vector.AsInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt4(long_mt4 self)
    {
        return self.BitCast<long_mt4, ulong_mt4>();
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt4(long_mt4 self)
    {
        return new(Vector256.ConvertToDouble(self.vector));
    }
}

#endregion // long_mt4

#region long_mt8

public partial struct long_mt8 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt8(long_mt8 self)
    {
        var vector = Vector256.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(vector.AsUInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt8(long_mt8 self)
    {
        var vector = Vector256.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(vector.AsInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt8(long_mt8 self)
    {
        return self.BitCast<long_mt8, ulong_mt8>();
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt8(long_mt8 self)
    {
        return new(Vector512.ConvertToDouble(self.vector));
    }
}

#endregion // long_mt8

#region long_mt16

public partial struct long_mt16 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt16(long_mt16 self)
    {
        var vector = Vector512.Narrow(self.vector0, self.vector1);
        return new(vector.AsUInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt16(long_mt16 self)
    {
        var vector = Vector512.Narrow(self.vector0, self.vector1);
        return new(vector.AsInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt16(long_mt16 self)
    {
        return self.BitCast<long_mt16, ulong_mt16>();
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt16(long_mt16 self)
    {
        return new(Vector512.ConvertToDouble(self.vector0), Vector512.ConvertToDouble(self.vector1));
    }
}

#endregion // long_mt16

#region long_mt32

public partial struct long_mt32 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt32(long_mt32 self)
    {
        var vector0 = Vector512.Narrow(self.vector0, self.vector1);
        var vector1 = Vector512.Narrow(self.vector2, self.vector3);
        return new(vector0.AsUInt32(), vector1.AsUInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt32(long_mt32 self)
    {
        var vector0 = Vector512.Narrow(self.vector0, self.vector1);
        var vector1 = Vector512.Narrow(self.vector2, self.vector3);
        return new(vector0.AsInt32(), vector1.AsInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt32(long_mt32 self)
    {
        return self.BitCast<long_mt32, ulong_mt32>();
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt32(long_mt32 self)
    {
        return new(Vector512.ConvertToDouble(self.vector0), Vector512.ConvertToDouble(self.vector1), Vector512.ConvertToDouble(self.vector2), Vector512.ConvertToDouble(self.vector3));
    }
}

#endregion // long_mt32

#region ulong_mt4

public partial struct ulong_mt4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt4(ulong_mt4 self)
    {
        var vector = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(vector.AsUInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt4(ulong_mt4 self)
    {
        var vector = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(vector.AsInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt4(ulong_mt4 self)
    {
        return self.BitCast<ulong_mt4, long_mt4>();
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt4(ulong_mt4 self)
    {
        return new(Vector256.ConvertToDouble(self.vector));
    }
}

#endregion // ulong_mt4

#region ulong_mt8

public partial struct ulong_mt8 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt8(ulong_mt8 self)
    {
        var vector = Vector256.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(vector.AsUInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt8(ulong_mt8 self)
    {
        var vector = Vector256.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(vector.AsInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt8(ulong_mt8 self)
    {
        return self.BitCast<ulong_mt8, long_mt8>();
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt8(ulong_mt8 self)
    {
        return new(Vector512.ConvertToDouble(self.vector));
    }
}

#endregion // ulong_mt8

#region ulong_mt16

public partial struct ulong_mt16 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt16(ulong_mt16 self)
    {
        var vector = Vector512.Narrow(self.vector0, self.vector1);
        return new(vector.AsUInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt16(ulong_mt16 self)
    {
        var vector = Vector512.Narrow(self.vector0, self.vector1);
        return new(vector.AsInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt16(ulong_mt16 self)
    {
        return self.BitCast<ulong_mt16, long_mt16>();
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt16(ulong_mt16 self)
    {
        return new(Vector512.ConvertToDouble(self.vector0), Vector512.ConvertToDouble(self.vector1));
    }
}

#endregion // ulong_mt16

#region ulong_mt32

public partial struct ulong_mt32 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt32(ulong_mt32 self)
    {
        var vector0 = Vector512.Narrow(self.vector0, self.vector1);
        var vector1 = Vector512.Narrow(self.vector2, self.vector3);
        return new(vector0.AsUInt32(), vector1.AsUInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt32(ulong_mt32 self)
    {
        var vector0 = Vector512.Narrow(self.vector0, self.vector1);
        var vector1 = Vector512.Narrow(self.vector2, self.vector3);
        return new(vector0.AsInt32(), vector1.AsInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt32(ulong_mt32 self)
    {
        return self.BitCast<ulong_mt32, long_mt32>();
    }
    [MethodImpl(256 | 512)]
    public static implicit operator double_mt32(ulong_mt32 self)
    {
        return new(Vector512.ConvertToDouble(self.vector0), Vector512.ConvertToDouble(self.vector1), Vector512.ConvertToDouble(self.vector2), Vector512.ConvertToDouble(self.vector3));
    }
}

#endregion // ulong_mt32

#region b32_mt4

public partial struct b32_mt4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt4(b32_mt4 self)
    {
        return self.BitCast<b32_mt4, uint_mt4>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt4(b32_mt4 self)
    {
        return self.BitCast<b32_mt4, int_mt4>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt4(b32_mt4 self)
    {
        var (a_vector, b_vector) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a_vector, b_vector).AsUInt64());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt4(b32_mt4 self)
    {
        var (a_vector, b_vector) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a_vector, b_vector).AsInt64());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float_mt4(b32_mt4 self)
    {
        return new(Vector128.ConvertToSingle(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double_mt4(b32_mt4 self)
    {
        var (a_vector, b_vector) = Vector128.Widen(self.vector);
        return new(Vector256.ConvertToDouble(Vector256.Create(a_vector, b_vector)));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b64_mt4(b32_mt4 self)
    {
        var (a_vector, b_vector) = Vector128.Widen(self.vector);
        return new(Vector256.Create(a_vector, b_vector).AsUInt64());
    }
}

#endregion // b32_mt4

#region b32_mt8

public partial struct b32_mt8 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt8(b32_mt8 self)
    {
        return self.BitCast<b32_mt8, uint_mt8>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt8(b32_mt8 self)
    {
        return self.BitCast<b32_mt8, int_mt8>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt8(b32_mt8 self)
    {
        var (a_vector, b_vector) = Vector256.Widen(self.vector);
        return new(Vector512.Create(a_vector, b_vector).AsUInt64());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt8(b32_mt8 self)
    {
        var (a_vector, b_vector) = Vector256.Widen(self.vector);
        return new(Vector512.Create(a_vector, b_vector).AsInt64());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float_mt8(b32_mt8 self)
    {
        return new(Vector256.ConvertToSingle(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double_mt8(b32_mt8 self)
    {
        var (a_vector, b_vector) = Vector256.Widen(self.vector);
        return new(Vector512.ConvertToDouble(Vector512.Create(a_vector, b_vector)));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b64_mt8(b32_mt8 self)
    {
        var (a_vector, b_vector) = Vector256.Widen(self.vector);
        return new(Vector512.Create(a_vector, b_vector).AsUInt64());
    }
}

#endregion // b32_mt8

#region b32_mt16

public partial struct b32_mt16 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt16(b32_mt16 self)
    {
        return self.BitCast<b32_mt16, uint_mt16>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt16(b32_mt16 self)
    {
        return self.BitCast<b32_mt16, int_mt16>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt16(b32_mt16 self)
    {
        var (a_vector, b_vector) = Vector512.Widen(self.vector);
        return new(a_vector.AsUInt64(), b_vector.AsUInt64());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt16(b32_mt16 self)
    {
        var (a_vector, b_vector) = Vector512.Widen(self.vector);
        return new(a_vector.AsInt64(), b_vector.AsInt64());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float_mt16(b32_mt16 self)
    {
        return new(Vector512.ConvertToSingle(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double_mt16(b32_mt16 self)
    {
        var (a_vector, b_vector) = Vector512.Widen(self.vector);
        return new(Vector512.ConvertToDouble(a_vector), Vector512.ConvertToDouble(b_vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b64_mt16(b32_mt16 self)
    {
        var (a_vector, b_vector) = Vector512.Widen(self.vector);
        return new(a_vector.AsUInt64(), b_vector.AsUInt64());
    }
}

#endregion // b32_mt16

#region b32_mt32

public partial struct b32_mt32 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt32(b32_mt32 self)
    {
        return self.BitCast<b32_mt32, uint_mt32>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt32(b32_mt32 self)
    {
        return self.BitCast<b32_mt32, int_mt32>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt32(b32_mt32 self)
    {
        var (a_vector0, b_vector0) = Vector512.Widen(self.vector0);
        var (a_vector1, b_vector1) = Vector512.Widen(self.vector1);
        return new(a_vector0.AsUInt64(), b_vector0.AsUInt64(), a_vector1.AsUInt64(), b_vector1.AsUInt64());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt32(b32_mt32 self)
    {
        var (a_vector0, b_vector0) = Vector512.Widen(self.vector0);
        var (a_vector1, b_vector1) = Vector512.Widen(self.vector1);
        return new(a_vector0.AsInt64(), b_vector0.AsInt64(), a_vector1.AsInt64(), b_vector1.AsInt64());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float_mt32(b32_mt32 self)
    {
        return new(Vector512.ConvertToSingle(self.vector0), Vector512.ConvertToSingle(self.vector1));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double_mt32(b32_mt32 self)
    {
        var (a_vector0, b_vector0) = Vector512.Widen(self.vector0);
        var (a_vector1, b_vector1) = Vector512.Widen(self.vector1);
        return new(Vector512.ConvertToDouble(a_vector0), Vector512.ConvertToDouble(b_vector0), Vector512.ConvertToDouble(a_vector1), Vector512.ConvertToDouble(b_vector1));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b64_mt32(b32_mt32 self)
    {
        var (a_vector0, b_vector0) = Vector512.Widen(self.vector0);
        var (a_vector1, b_vector1) = Vector512.Widen(self.vector1);
        return new(a_vector0.AsUInt64(), b_vector0.AsUInt64(), a_vector1.AsUInt64(), b_vector1.AsUInt64());
    }
}

#endregion // b32_mt32

#region b64_mt4

public partial struct b64_mt4 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt4(b64_mt4 self)
    {
        var vector = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(vector.AsUInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt4(b64_mt4 self)
    {
        var vector = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(vector.AsInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt4(b64_mt4 self)
    {
        return self.BitCast<b64_mt4, ulong_mt4>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt4(b64_mt4 self)
    {
        return self.BitCast<b64_mt4, long_mt4>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float_mt4(b64_mt4 self)
    {
        var vector = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(Vector128.ConvertToSingle(vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double_mt4(b64_mt4 self)
    {
        return new(Vector256.ConvertToDouble(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b32_mt4(b64_mt4 self)
    {
        var vector = Vector128.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(vector.AsUInt32());
    }
}

#endregion // b64_mt4

#region b64_mt8

public partial struct b64_mt8 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt8(b64_mt8 self)
    {
        var vector = Vector256.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(vector.AsUInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt8(b64_mt8 self)
    {
        var vector = Vector256.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(vector.AsInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt8(b64_mt8 self)
    {
        return self.BitCast<b64_mt8, ulong_mt8>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt8(b64_mt8 self)
    {
        return self.BitCast<b64_mt8, long_mt8>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float_mt8(b64_mt8 self)
    {
        var vector = Vector256.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(Vector256.ConvertToSingle(vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double_mt8(b64_mt8 self)
    {
        return new(Vector512.ConvertToDouble(self.vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b32_mt8(b64_mt8 self)
    {
        var vector = Vector256.Narrow(self.vector.GetLower(), self.vector.GetUpper());
        return new(vector.AsUInt32());
    }
}

#endregion // b64_mt8

#region b64_mt16

public partial struct b64_mt16 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt16(b64_mt16 self)
    {
        var vector = Vector512.Narrow(self.vector0, self.vector1);
        return new(vector.AsUInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt16(b64_mt16 self)
    {
        var vector = Vector512.Narrow(self.vector0, self.vector1);
        return new(vector.AsInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt16(b64_mt16 self)
    {
        return self.BitCast<b64_mt16, ulong_mt16>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt16(b64_mt16 self)
    {
        return self.BitCast<b64_mt16, long_mt16>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float_mt16(b64_mt16 self)
    {
        var vector = Vector512.Narrow(self.vector0, self.vector1);
        return new(Vector512.ConvertToSingle(vector));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double_mt16(b64_mt16 self)
    {
        return new(Vector512.ConvertToDouble(self.vector0), Vector512.ConvertToDouble(self.vector1));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b32_mt16(b64_mt16 self)
    {
        var vector = Vector512.Narrow(self.vector0, self.vector1);
        return new(vector.AsUInt32());
    }
}

#endregion // b64_mt16

#region b64_mt32

public partial struct b64_mt32 
{
    [MethodImpl(256 | 512)]
    public static explicit operator uint_mt32(b64_mt32 self)
    {
        var vector0 = Vector512.Narrow(self.vector0, self.vector1);
        var vector1 = Vector512.Narrow(self.vector2, self.vector3);
        return new(vector0.AsUInt32(), vector1.AsUInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator int_mt32(b64_mt32 self)
    {
        var vector0 = Vector512.Narrow(self.vector0, self.vector1);
        var vector1 = Vector512.Narrow(self.vector2, self.vector3);
        return new(vector0.AsInt32(), vector1.AsInt32());
    }
    [MethodImpl(256 | 512)]
    public static explicit operator ulong_mt32(b64_mt32 self)
    {
        return self.BitCast<b64_mt32, ulong_mt32>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator long_mt32(b64_mt32 self)
    {
        return self.BitCast<b64_mt32, long_mt32>();
    }
    [MethodImpl(256 | 512)]
    public static explicit operator float_mt32(b64_mt32 self)
    {
        var vector0 = Vector512.Narrow(self.vector0, self.vector1);
        var vector1 = Vector512.Narrow(self.vector2, self.vector3);
        return new(Vector512.ConvertToSingle(vector0), Vector512.ConvertToSingle(vector1));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator double_mt32(b64_mt32 self)
    {
        return new(Vector512.ConvertToDouble(self.vector0), Vector512.ConvertToDouble(self.vector1), Vector512.ConvertToDouble(self.vector2), Vector512.ConvertToDouble(self.vector3));
    }
    [MethodImpl(256 | 512)]
    public static explicit operator b32_mt32(b64_mt32 self)
    {
        var vector0 = Vector512.Narrow(self.vector0, self.vector1);
        var vector1 = Vector512.Narrow(self.vector2, self.vector3);
        return new(vector0.AsUInt32(), vector1.AsUInt32());
    }
}

#endregion // b64_mt32
