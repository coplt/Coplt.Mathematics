<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.SIMT;

<#
    var sizes = new[] { 4, 8, 16, 32 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.arith) continue;
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        foreach (var size in sizes)
        {
            var byteSize = typ.size * size;
            var bitSize = 8 * byteSize;
            var num_vectors = Math.Max(1, bitSize / 512);
            bitSize = Math.Min(512, bitSize);

            var typeName = $"{typ.compType}_mt{size}";
            var bTypeV = $"b{typ.size * 8}v";
            var bType = $"b{typ.size * 8}";
            var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bTypeV);
            var bTypeName = $"{bType}_mt{size}";

            IEnumerable<string> ForVectors(string name)
            {
                if (num_vectors == 1) yield return name;
                else
                {
                    for (var i = 0; i < num_vectors; i++)
                    {
                        yield return $"{name}{i}";
                    }
                }
            }

            var vectors = ForVectors("vector").ToList();
#>
#region <#= typeName #>

public partial struct <#= typeName #>
    : IEqualityOperators<<#= typeName #>, <#= typeName #>, bool>
<#
            if (bTyp.name != null)
            {
#>
    , IEqualityOperators<<#= typeName #>, <#= typeName #>, <#= bTypeName #>>
<#
            }
#>
{
    [MethodImpl(256 | 512)]
    public readonly override int GetHashCode()
    {
<#
            if (num_vectors == 1)
            {
#>
        return vector.GetHashCode();
<#
            }
            else
            {
#>
        return HashCode.Combine(<#= string.Join(", ", vectors.Select(v => $"{v}")) #>);
<#
            }
#>
    }

    [MethodImpl(256 | 512)]
    public readonly override bool Equals(object? obj) => obj is <#= typeName #> other && Equals(other);

    [MethodImpl(256 | 512)]
    public readonly bool Equals(<#= typeName #> other)
    {
        return <#= string.Join(" && ", vectors.Select(v => $"{v}.Equals(other.{v})")) #>;
    }

    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<<#= typeName #>, <#= typeName #>, bool>.operator ==(<#= typeName #> left, <#= typeName #> right) => left.Equals(right);
    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<<#= typeName #>, <#= typeName #>, bool>.operator !=(<#= typeName #> left, <#= typeName #> right) => !left.Equals(right);

    [MethodImpl(256 | 512)]
    public readonly <#= bTypeName #> LaneEquals(<#= typeName #> other)
    {
        return new(<#= string.Join(", ", vectors.Select(v => $"Vector{bitSize}.Equals({v}, other.{v}).As{bTyp.Type}()")) #>);
    }

    [MethodImpl(256 | 512)]
    public readonly <#= bTypeName #> LaneNotEquals(<#= typeName #> other)
    {
<#
            if (typ.f)
            {
#>
        return new(<#= string.Join(", ", vectors.Select(v => $"simd.Ne({v}, other.{v}).As{bTyp.Type}()")) #>);
<#
            }
            else
            {
#>
        return new(<#=
                        string.Join(", ", vectors.Select(v => $"~Vector{bitSize}.Equals({v}, other.{v}).As{bTyp.Type}()")) #>);
<#
            }
#>
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator ==(<#= typeName #> left, <#= typeName #> right) => left.LaneEquals(right);

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator !=(<#= typeName #> left, <#= typeName #> right) => left.LaneNotEquals(right);
}

#endregion // <#= typeName #>
<#
        }
    }
#>
