<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.SIMT;

<#
    var sizes = new[] { 4, 8, 16, 32 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        foreach (var size in sizes)
        {
            var byteSize = typ.size * size;
            var bitSize = 8 * byteSize;
            var num_vectors = Math.Max(1, bitSize / 512);
            bitSize = Math.Min(512, bitSize);

            var typeName = $"{typ.compType}_mt{size}";

            IEnumerable<string> ForVectors(string name)
            {
                if (num_vectors == 1) yield return name;
                else
                {
                    for (var i = 0; i < num_vectors; i++)
                    {
                        yield return $"{name}{i}";
                    }
                }
            }

            var vectors = ForVectors("vector").ToList();
#>
#region <#= typeName #>

[CpuOnly]
public partial struct <#= typeName #>
{
    #region Constants

    public static int LineCount
    {
        [MethodImpl(256 | 512)]
        get => <#= size #>;
    }

    #endregion
<#
            if (size != 0)
            {
#>

    #region Fields

<#
                for (var nv = 0; nv < num_vectors; nv++)
                {
#>
    public Vector<#= bitSize #><<#= typ.simdComp #>> vector<#= num_vectors == 1 ? "" : $"{nv}" #>;
<#
                }
#>

    #endregion // Fields
<#
            }
#>

    #region Properties
<#
            if (size != 0)
            {
#>

    [MethodImpl(256 | 512), UnscopedRef]
    public readonly ref readonly Vector<#= bitSize #><<#= typ.simdComp #>> VectorAtRo(int index)
    {
        switch(index)
        {
<#
                if (num_vectors == 1)
                {
#>
            case 0: return ref vector;
<#
                }
                else
                {
                    for (var nv = 0; nv < num_vectors; nv++)
                    {
#>
            case <#= nv #>: return ref vector<#= nv #>;
<#
                    }
                }
#>
            default: throw new IndexOutOfRangeException("Index out of range for vector access");
        }
    }

    [MethodImpl(256 | 512), UnscopedRef]
    public ref Vector<#= bitSize #><<#= typ.simdComp #>> VectorAt(int index)
    {
        switch(index)
        {
<#
                if (num_vectors == 1)
                {
#>
            case 0: return ref vector;
<#
                }
                else
                {
                    for (var nv = 0; nv < num_vectors; nv++)
                    {
#>
            case <#= nv #>: return ref vector<#= nv #>;
<#
                    }
                }
#>
            default: throw new IndexOutOfRangeException("Index out of range for vector access");
        }
    }
<#
            }
#>

    public <#= typ.compType #> this[int index]
    {
        [MethodImpl(256 | 512)]
        readonly get
        {
<#
            if (num_vectors == 1)
            {
#>
            return vector[index];
<#
            }
            else
            {
#>
            var (q, r) = Math.DivRem(index, Vector<#= bitSize #><<#= typ.simdComp #>>.Count);
            return VectorAtRo(q)[r];
<#
            }
#>
        }
        [MethodImpl(256 | 512)]
        set
        {
<#
            if (num_vectors == 1)
            {
#>
            vector = vector.WithElement(index, value);
<#
            }
            else
            {
#>
            var (q, r) = Math.DivRem(index, Vector<#= bitSize #><<#= typ.simdComp #>>.Count);
            ref var vector = ref VectorAt(q);
            vector = vector.WithElement(r, value);
<#
            }
#>
        }
    }

    #endregion // Properties

    #region Ctor
<#
            if (size != 0)
            {
#>

    [MethodImpl(256 | 512)]
    public <#= typeName #>(<#= string.Join(", ", vectors.Select(v => $"Vector{bitSize}<{typ.simdComp}> {v}")) #>)
    {
<#
                foreach (var v in vectors)
                {
#>
        this.<#= v #> = <#= v #>;
<#
                }
#>
    }

    [MethodImpl(256 | 512)]
    private <#= typeName #>(ref readonly <#= typ.compType #> values)
    {
        ref var vs = ref Unsafe.AsRef(in values);
<#
                var offset_inc = 0;
                foreach (var v in vectors)
                {
                    var offset = offset_inc;
                    offset_inc += size;
                    var off = offset == 0 ? "vs" : $"Unsafe.Add(ref vs, {offset})";
                    if (typ.compType == typ.simdComp)
                    {
#>
        <#= v #> = Vector<#= bitSize #>.LoadUnsafe(in <#= off #>);
<#
                    }
                    else
                    {
#>
        <#= v #> = Vector<#= bitSize #>.LoadUnsafe(in Unsafe.As<<#= typ.compType #>, <#= typ.simdComp #>>(ref <#= off #>));
<#
                    }
                }
#>
    }
<#
            }
#>

    [MethodImpl(256 | 512)]
    public static <#= typeName #> LoadUnsafe(ref readonly <#= typ.compType #> values) => new(in values);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> LoadUnsafe(params ReadOnlySpan<<#= typ.compType #>> values) => new(in values.GetPinnableReference());

    [MethodImpl(256 | 512)]
    public <#= typeName #>(<#= typ.compType #> value)
    {
<#
            foreach (var v in vectors)
            {
                if (typ.compType == typ.simdComp)
                {
#>
        <#= v #> = Vector<#= bitSize #>.Create(value);
<#
                }
                else
                {
#>
        <#= v #> = Vector<#= bitSize #>.Create((<#= typ.simdComp #>)value);
<#
                }
            }
#>
    }

    #endregion // Ctor

    #region Operators

    [MethodImpl(256 | 512)]
    public static implicit operator <#= typeName #>(<#= typ.compType #> value) => new(value);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator~(<#= typeName #> a) => <#=
                $"new({string.Join(", ", vectors.Select(v => $"~a.{v}"))})" #>;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator|(<#= typeName #> a, <#= typeName #> b) => <#=
                $"new({string.Join(", ", vectors.Select(v => $"a.{v} | b.{v}"))})" #>;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator&(<#= typeName #> a, <#= typeName #> b) => <#=
                $"new({string.Join(", ", vectors.Select(v => $"a.{v} & b.{v}"))})" #>;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator^(<#= typeName #> a, <#= typeName #> b) => <#=
                $"new({string.Join(", ", vectors.Select(v => $"a.{v} ^ b.{v}"))})" #>;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator<<(<#= typeName #> a, int b) => <#=
                $"new({string.Join(", ", vectors.Select(v => $"a.{v} << b"))})" #>;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator>>(<#= typeName #> a, int b) => <#=
                $"new({string.Join(", ", vectors.Select(v => $"a.{v} >> b"))})" #>;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator>>>(<#= typeName #> a, int b) => <#=
                $"new({string.Join(", ", vectors.Select(v => $"a.{v} >>> b"))})" #>;

    #endregion  // Operators

    #region ToString

    public readonly override string ToString() => $"<#= typeName #> {{ <#=
                string.Join(", ", Enumerable.Range(0, size).Select(l => $"t{l} = {{this[{l}]}}")) #> }}";

    #endregion  // ToString
}

#endregion // <#= typeName #>
<#
        }
    }
#>
