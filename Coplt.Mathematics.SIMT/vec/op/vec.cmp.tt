<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.SIMT;

<#
    var sizes = new[] { 4, 8, 16, 32 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.arith) continue;
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        for (var i = 2; i <= 4; i++)
        {
            foreach (var size in sizes)
            {
                var byteSize = typ.size * size;
                var bitSize = 8 * byteSize;
                var num_vectors = Math.Max(1, bitSize / 512);
                bitSize = Math.Min(512, bitSize);

                var typeName = $"{typ.name}{i}_mt{size}";
                var scalarName = $"{typ.compType}_mt{size}";
                var simd_typeName = $"{typ.name}{i}";
                
                var bType = $"b{typ.size * 8}v";
                var scalar_bType = $"b{typ.size * 8}";
                var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
                var bTypeName = $"{bType}{i}_mt{size}";
                var scalar_bTypeName = $"{scalar_bType}_mt{size}";
#>
#region <#= typeName #>

public partial struct <#= typeName #> : IComparable<<#= typeName #>>, IComparable
    , IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>
<#
            if (bTyp.name != null)
            {
#>
    , IComparisonOperators<<#= typeName #>, <#= typeName #>, <#= bTypeName #>>
<#
            }
#>
{
    [MethodImpl(256 | 512)]
    public readonly bool LaneLessThanAll(<#= typeName #> other)
    {
        return <#= string.Join(" && ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]}.LessThanAll(other.{Typ.xyzw[n]})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool LaneGreaterThanAll(<#= typeName #> other)
    {
        return <#= string.Join(" && ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]}.GreaterThanAll(other.{Typ.xyzw[n]})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool LaneLessThanOrEqualAll(<#= typeName #> other)
    {
        return <#= string.Join(" && ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]}.LessThanOrEqualAll(other.{Typ.xyzw[n]})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool LaneGreaterThanOrEqualAll(<#= typeName #> other)
    {
        return <#= string.Join(" && ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]}.GreaterThanOrEqualAll(other.{Typ.xyzw[n]})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool LaneLessThanAny(<#= typeName #> other)
    {
        return <#= string.Join(" || ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]}.LessThanAny(other.{Typ.xyzw[n]})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool LaneGreaterThanAny(<#= typeName #> other)
    {
        return <#= string.Join(" || ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]}.GreaterThanAny(other.{Typ.xyzw[n]})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool LaneLessThanOrEqualAny(<#= typeName #> other)
    {
        return <#= string.Join(" || ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]}.LessThanOrEqualAny(other.{Typ.xyzw[n]})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly bool LaneGreaterThanOrEqualAny(<#= typeName #> other)
    {
        return <#= string.Join(" || ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]}.GreaterThanOrEqualAny(other.{Typ.xyzw[n]})")) #>;
    }

    static bool IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>.operator <(<#= typeName #> left, <#= typeName #> right) => 
        left.LaneLessThanAll(right);
    [MethodImpl(256 | 512)]
    static bool IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>.operator >(<#= typeName #> left, <#= typeName #> right) => 
        left.LaneGreaterThanAll(right);
    [MethodImpl(256 | 512)]
    static bool IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>.operator <=(<#= typeName #> left, <#= typeName #> right) => 
        left.LaneLessThanOrEqualAll(right);
    [MethodImpl(256 | 512)]
    static bool IComparisonOperators<<#= typeName #>, <#= typeName #>, bool>.operator >=(<#= typeName #> left, <#= typeName #> right) => 
        left.LaneGreaterThanOrEqualAll(right);

    [MethodImpl(256 | 512)]
    public readonly int CompareTo(<#= typeName #> other)
    {
        if (LaneLessThanAny(other)) return -1;
        if (LaneGreaterThanAny(other)) return 1;
        return 0;
    }

    [MethodImpl(256 | 512)]
    public readonly int CompareTo(object? obj)
    {
        if (ReferenceEquals(null, obj)) return 1;
        return obj is <#= typeName #> other ? CompareTo(other) : throw new ArgumentException($"Object must be of type {nameof(<#= typeName #>)}");
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator <(<#= typeName #> left, <#= typeName #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left.{Typ.xyzw[n]} < right.{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator >(<#= typeName #> left, <#= typeName #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left.{Typ.xyzw[n]} > right.{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator <=(<#= typeName #> left, <#= typeName #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left.{Typ.xyzw[n]} <= right.{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator >=(<#= typeName #> left, <#= typeName #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left.{Typ.xyzw[n]} >= right.{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator <(<#= typeName #> left, <#= scalarName #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left.{Typ.xyzw[n]} < right")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator >(<#= typeName #> left, <#= scalarName #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left.{Typ.xyzw[n]} > right")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator <=(<#= typeName #> left, <#= scalarName #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left.{Typ.xyzw[n]} <= right")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator >=(<#= typeName #> left, <#= scalarName #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left.{Typ.xyzw[n]} >= right")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator <(<#= scalarName #> left, <#= typeName #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left < right.{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator >(<#= scalarName #> left, <#= typeName #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left > right.{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator <=(<#= scalarName #> left, <#= typeName #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left <= right.{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator >=(<#= scalarName #> left, <#= typeName #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left >= right.{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator <(<#= typeName #> left, <#= typ.compType #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left.{Typ.xyzw[n]} < right")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator >(<#= typeName #> left, <#= typ.compType #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left.{Typ.xyzw[n]} > right")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator <=(<#= typeName #> left, <#= typ.compType #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left.{Typ.xyzw[n]} <= right")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator >=(<#= typeName #> left, <#= typ.compType #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left.{Typ.xyzw[n]} >= right")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator <(<#= typ.compType #> left, <#= typeName #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left < right.{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator >(<#= typ.compType #> left, <#= typeName #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left > right.{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator <=(<#= typ.compType #> left, <#= typeName #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left <= right.{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator >=(<#= typ.compType #> left, <#= typeName #> right)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"left >= right.{Typ.xyzw[n]}")) #>);
    }

    [MethodImpl(256 | 512)]
    public readonly <#= scalar_bTypeName #> LessThanAll(<#= typeName #> other)
    {
        return <#= string.Join(" & ", Enumerable.Range(0, i).Select(n => $"({Typ.xyzw[n]} < other.{Typ.xyzw[n]})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly <#= scalar_bTypeName #> GreaterThanAll(<#= typeName #> other)
    {
        return <#= string.Join(" & ", Enumerable.Range(0, i).Select(n => $"({Typ.xyzw[n]} > other.{Typ.xyzw[n]})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly <#= scalar_bTypeName #> LessThanOrEqualAll(<#= typeName #> other)
    {
        return <#= string.Join(" & ", Enumerable.Range(0, i).Select(n => $"({Typ.xyzw[n]} <= other.{Typ.xyzw[n]})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly <#= scalar_bTypeName #> GreaterThanOrEqualAll(<#= typeName #> other)
    {
        return <#= string.Join(" & ", Enumerable.Range(0, i).Select(n => $"({Typ.xyzw[n]} >= other.{Typ.xyzw[n]})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly <#= scalar_bTypeName #> LessThanAny(<#= typeName #> other)
    {
        return <#= string.Join(" | ", Enumerable.Range(0, i).Select(n => $"({Typ.xyzw[n]} < other.{Typ.xyzw[n]})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly <#= scalar_bTypeName #> GreaterThanAny(<#= typeName #> other)
    {
        return <#= string.Join(" | ", Enumerable.Range(0, i).Select(n => $"({Typ.xyzw[n]} > other.{Typ.xyzw[n]})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly <#= scalar_bTypeName #> LessThanOrEqualAny(<#= typeName #> other)
    {
        return <#= string.Join(" | ", Enumerable.Range(0, i).Select(n => $"({Typ.xyzw[n]} <= other.{Typ.xyzw[n]})")) #>;
    }

    [MethodImpl(256 | 512)]
    public readonly <#= scalar_bTypeName #> GreaterThanOrEqualAny(<#= typeName #> other)
    {
        return <#= string.Join(" | ", Enumerable.Range(0, i).Select(n => $"({Typ.xyzw[n]} >= other.{Typ.xyzw[n]})")) #>;
    }

}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
