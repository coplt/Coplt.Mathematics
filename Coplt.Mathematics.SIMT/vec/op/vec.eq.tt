<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.SIMT;

<#
    var sizes = new[] { 4, 8, 16, 32 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.arith) continue;
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        for (var i = 2; i <= 4; i++)
        {
            foreach (var size in sizes)
            {
                var byteSize = typ.size * size;
                var bitSize = 8 * byteSize;
                var num_vectors = Math.Max(1, bitSize / 512);
                bitSize = Math.Min(512, bitSize);

                var typeName = $"{typ.name}{i}_mt{size}";
                var scalarName = $"{typ.compType}_mt{size}";
                var simd_typeName = $"{typ.name}{i}";
                
                var bType = $"b{typ.size * 8}v";
                var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
                var bTypeName = $"{bType}{i}_mt{size}";
#>
#region <#= typeName #>

public partial struct <#= typeName #>
    : IEqualityOperators<<#= typeName #>, <#= typeName #>, bool>
<#
            if (bTyp.name != null)
            {
#>
    , IEqualityOperators<<#= typeName #>, <#= typeName #>, <#= bTypeName #>>
<#
            }
#>
{
    [MethodImpl(256 | 512)]
    public readonly override int GetHashCode() => HashCode.Combine(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public readonly override bool Equals(object? obj) => obj is <#= typeName #> other && Equals(other);

    [MethodImpl(256 | 512)]
    public readonly bool Equals(<#= typeName #> other) => <#=
                    string.Join(" && ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]}.Equals(other.{Typ.xyzw[n]})")) #>;

    [MethodImpl(256 | 512)]
    public readonly bool NotEquals(<#= typeName #> other) => <#=
                    string.Join(" || ", Enumerable.Range(0, i).Select(n => $"!{Typ.xyzw[n]}.Equals(other.{Typ.xyzw[n]})")) #>;

    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<<#= typeName #>, <#= typeName #>, bool>.operator ==(<#= typeName #> left, <#= typeName #> right) => left.Equals(right);

    [MethodImpl(256 | 512)]
    static bool IEqualityOperators<<#= typeName #>, <#= typeName #>, bool>.operator !=(<#= typeName #> left, <#= typeName #> right) => left.NotEquals(right);

    [MethodImpl(256 | 512)]
    public readonly <#= bTypeName #> VectorEquals(<#= typeName #> other)
    {
        return new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]}.LaneEquals(other.{Typ.xyzw[n]})")) #>);
    }

    [MethodImpl(256 | 512)]
    public readonly <#= bTypeName #> VectorNotEquals(<#= typeName #> other)
    {
        return new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"{Typ.xyzw[n]}.LaneNotEquals(other.{Typ.xyzw[n]})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator ==(<#= typeName #> left, <#= typeName #> right) => left.VectorEquals(right);

    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> operator !=(<#= typeName #> left, <#= typeName #> right) => left.VectorNotEquals(right);
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
