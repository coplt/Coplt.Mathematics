<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.SIMT;

<#
    var sizes = new[] { 4, 8, 16, 32 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.i) continue;
        if (!typ.arith) continue;
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        for (var i = 2; i <= 4; i++)
        {
            foreach (var size in sizes)
            {
                var byteSize = typ.size * size;
                var bitSize = 8 * byteSize;
                var num_vectors = Math.Max(1, bitSize / 512);
                bitSize = Math.Min(512, bitSize);

                var typeName = $"{typ.name}{i}_mt{size}";
                var scalarName = $"{typ.compType}_mt{size}";
                var simd_typeName = $"{typ.name}{i}";

                var bSize = typ.size * 8;
                var bTypeName = $"b{bSize}v{i}_mt{size}";
#>
#region <#= typeName #>

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static <#= bTypeName #> isPow2([This] <#= typeName #> a)
    {
<#
            if (typ.sig)
            {
#>
        return ((a & (a - <#= typeName #>.One)) == <#= typeName #>.Zero) & (a > <#= typeName #>.Zero);
<#
            }
            else
            {
#>
        return ((a & (a - <#= typeName #>.One)) == <#= typeName #>.Zero) & (a != <#= typeName #>.Zero);
<#
            }
#>
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> up2pow2([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"up2pow2(a.{Typ.xyzw[n]})")) #>);
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
