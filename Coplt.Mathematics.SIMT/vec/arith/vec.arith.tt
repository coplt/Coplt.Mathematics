<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.SIMT;

<#
    var sizes = new[] { 4, 8, 16, 32 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.arith) continue;
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        for (var i = 2; i <= 4; i++)
        {
            foreach (var size in sizes)
            {
                var byteSize = typ.size * size;
                var bitSize = 8 * byteSize;
                var num_vectors = Math.Max(1, bitSize / 512);
                bitSize = Math.Min(512, bitSize);

                var typeName = $"{typ.name}{i}_mt{size}";
                var scalarName = $"{typ.compType}_mt{size}";
                var simd_typeName = $"{typ.name}{i}";
#>
#region <#= typeName #>

public partial struct <#= typeName #>
{
    #region Constants

    public static <#= typeName #> Zero
    {
        [MethodImpl(256 | 512)]
        get => default;
    }

    public static <#= typeName #> One
    {
        [MethodImpl(256 | 512)]
        get => new(<#= typ.one #>);
    }

    public static <#= typeName #> Two
    {
        [MethodImpl(256 | 512)]
        get => new(<#= typ.two #>);
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator-(<#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"-a.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator+(<#= typeName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} + b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator+(<#= typeName #> a, <#= scalarName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} + b")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator+(<#= scalarName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a + b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator-(<#= typeName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} - b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator-(<#= typeName #> a, <#= scalarName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} - b")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator-(<#= scalarName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a - b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator*(<#= typeName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} * b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator*(<#= typeName #> a, <#= scalarName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} * b")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator*(<#= scalarName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a * b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator*(<#= typeName #> a, <#= typ.compType #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} * b")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator*(<#= typ.compType #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a * b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator/(<#= typeName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} / b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator/(<#= scalarName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a / b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator/(<#= typeName #> a, <#= scalarName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} / b")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator/(<#= typ.compType #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a / b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator/(<#= typeName #> a, <#= typ.compType #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} / b")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator%(<#= typeName #> a, <#= typeName #> b) => <#
            if (typ.i)
            {
#>a - (a / b) * b<#
            }
            else
            {
#>math_mt.rem(a, b)<#
            }
#>;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator%(<#= scalarName #> a, <#= typeName #> b) => <#
            if (typ.i)
            {
#>a - (a / b) * b<#
            }
            else
            {
#>math_mt.rem(a, b)<#
            }
#>;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator%(<#= typeName #> a, <#= scalarName #> b) => <#
            if (typ.i)
            {
#>a - (a / b) * b<#
            }
            else
            {
#>math_mt.rem(a, b)<#
            }
#>;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator%(<#= typ.compType #> a, <#= typeName #> b) => <#
            if (typ.i)
            {
#>a - (a / b) * b<#
            }
            else
            {
#>math_mt.rem(a, b)<#
            }
#>;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator%(<#= typeName #> a, <#= typ.compType #> b) => <#
            if (typ.i)
            {
#>a - (a / b) * b<#
            }
            else
            {
#>math_mt.rem(a, b)<#
            }
#>;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator++(<#= typeName #> a) => a + <#= scalarName #>.One;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator--(<#= typeName #> a) => a - <#= scalarName #>.One;

    #endregion // Operators
}

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static <#= typeName #> abs([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"abs(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> sign([This] <#= typeName #> a) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"sign(a.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> min([This] <#= typeName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"min(a.{Typ.xyzw[n]}, b.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> max([This] <#= typeName #> a, <#= typeName #> b) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"max(a.{Typ.xyzw[n]}, b.{Typ.xyzw[n]})")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> clamp([This] <#= typeName #> v, <#= typeName #> min, <#= typeName #> max) => math_mt.max(min, math_mt.min(max, v));

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> fma([This] <#= typeName #> a, <#= typeName #> b, <#= typeName #> c) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"fma(a.{Typ.xyzw[n]}, b.{Typ.xyzw[n]}, c.{Typ.xyzw[n]})")) #>);

    /// <summary>
    /// Fusion Subtraction and Multiplication
    /// <code>(a * b) - c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Subtrahend c</param>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> fms([This] <#= typeName #> a, <#= typeName #> b, <#= typeName #> c) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"fms(a.{Typ.xyzw[n]}, b.{Typ.xyzw[n]}, c.{Typ.xyzw[n]})")) #>);

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code> or <code>-(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> fnma([This] <#= typeName #> a, <#= typeName #> b, <#= typeName #> c) => new(<#=
                    string.Join(", ", Enumerable.Range(0, i).Select(n => $"fnma(a.{Typ.xyzw[n]}, b.{Typ.xyzw[n]}, c.{Typ.xyzw[n]})")) #>);

    /// <summary>
    /// Fusion Multiplication and Subtraction
    /// <code>c - (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Minuend c</param>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> fsm([This] <#= typeName #> c, <#= typeName #> a, <#= typeName #> b) => fnma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>c + (a * b)</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> fam([This] <#= typeName #> c, <#= typeName #> a, <#= typeName #> b) => fma(a, b, c);

    /// <summary>
    /// Fusion Addition and Multiplication
    /// <code>(a * b) + c</code>
    /// </summary>
    /// <param name="a">Multiplier a</param>
    /// <param name="b">Multiplier b</param>
    /// <param name="c">Addend c</param>
    [MethodImpl(256 | 512)]
    public static <#= typeName #> mad([This] <#= typeName #> a, <#= typeName #> b, <#= typeName #> c) => fma(a, b, c);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> lerp(<#= typeName #> start, <#= typeName #> end, [This] <#= typeName #> t)
    {
        return fma(t, end - start, start);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> lerp(<#= typeName #> start, <#= typeName #> end, [This] <#= typ.simdComp #> t)
    {
        return fma(t, end - start, start);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> lerp(<#= typ.compType #> start, <#= typ.compType #> end, [This] <#= typeName #> t)
    {
        return fma(t, end - start, start);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> unlerp([This] <#= typeName #> a, <#= typeName #> start, <#= typeName #> end) => (a - start) / (end - start);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> unlerp([This] <#= typ.simdComp #> a, <#= typeName #> start, <#= typeName #> end) => (a - start) / (end - start);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> unlerp([This] <#= typeName #> a, <#= typ.simdComp #> start, <#= typ.simdComp #> end) => (a - start) / <#= typ.arithCast #>(end - start);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> remap([This] <#= typeName #> a, <#= typeName #> srcStart, <#= typeName #> srcEnd, <#= typeName #> dstStart, <#= typeName #> dstEnd) => 
        a.unlerp(srcStart, srcEnd).lerp(dstStart, dstEnd);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> remap([This] <#= typeName #> a, <#= typ.simdComp #> srcStart, <#= typ.simdComp #> srcEnd, <#= typ.simdComp #> dstStart, <#= typ.simdComp #> dstEnd) => 
        a.unlerp(srcStart, srcEnd).lerp(dstStart, dstEnd);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> square([This] <#= typeName #> a) => a * a;

    [MethodImpl(256 | 512)]
    public static <#= scalarName #> dot([This] <#= typeName #> a, <#= typeName #> b)
    {
        // <#= string.Join(" + ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} * b.{Typ.xyzw[n]}")) #>
<#
                if (i == 2)
                {
#>
        return fma(a.y, b.y, a.x * b.x);
<#
                }
                else if (i == 3)
                {
#>
        return fma(a.z, b.z, fma(a.y, b.y, a.x * b.x));
<#
                }
                else if (i == 4)
                {
#>
        return fma(a.w, b.w, fma(a.z, b.z, fma(a.y, b.y, a.x * b.x)));
<#
                }
#>
    }
<#
                if (i == 3)
                {
#>

    [MethodImpl(256 | 512)]
    public static <#= typeName #> cross([This] <#= typeName #> a, <#= typeName #> b)
    {
        // (a * b.yzx - a.yzx * b).yzx;
        return fnma(a.yzx, b, a * b.yzx).yzx;
    }
<#
                }
#>

    [MethodImpl(256 | 512)]
    public static <#= scalarName #> lengthsq([This] <#= typeName #> a) => dot(a, a);

    [MethodImpl(256 | 512)]
    public static <#= scalarName #> distancesq([This] <#= typeName #> a, <#= typeName #> b) => lengthsq(b - a);

    [MethodImpl(256 | 512)]
    public static <#= scalarName #> csum([This] <#= typeName #> a) => <#=
                        string.Join(" + ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]}")) #>;

    [MethodImpl(256 | 512)]
    public static <#= scalarName #> cmin([This] <#= typeName #> a) => a.x<#=
                string.Join("", Enumerable.Range(1, i - 1).Select(n => $".min(a.{Typ.xyzw[n]})")) #>;

    [MethodImpl(256 | 512)]
    public static <#= scalarName #> cmax([This] <#= typeName #> a) => a.x<#=
                string.Join("", Enumerable.Range(1, i - 1).Select(n => $".max(a.{Typ.xyzw[n]})")) #>;

}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
