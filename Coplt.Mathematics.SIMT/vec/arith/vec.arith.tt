<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.SIMT;

<#
    var sizes = new[] { 4, 8, 16, 32 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.arith) continue;
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        for (var i = 2; i <= 4; i++)
        {
            foreach (var size in sizes)
            {
                var byteSize = typ.size * size;
                var bitSize = 8 * byteSize;
                var num_vectors = Math.Max(1, bitSize / 512);
                bitSize = Math.Min(512, bitSize);

                var typeName = $"{typ.name}{i}_mt{size}";
                var scalarName = $"{typ.compType}_mt{size}";
                var simd_typeName = $"{typ.name}{i}";
#>
#region <#= typeName #>

public partial struct <#= typeName #>
{
    #region Constants

    public static <#= typeName #> Zero
    {
        [MethodImpl(256 | 512)]
        get => default;
    }

    public static <#= typeName #> One
    {
        [MethodImpl(256 | 512)]
        get => new(<#= typ.one #>);
    }

    public static <#= typeName #> Two
    {
        [MethodImpl(256 | 512)]
        get => new(<#= typ.two #>);
    }

    #endregion

    #region Operators

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator-(<#= typeName #> a) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Select(n => $"-a.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator+(<#= typeName #> a, <#= typeName #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} + b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator+(<#= typeName #> a, <#= scalarName #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} + b")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator+(<#= scalarName #> a, <#= typeName #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Select(n => $"a + b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator-(<#= typeName #> a, <#= typeName #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} - b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator-(<#= typeName #> a, <#= scalarName #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} - b")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator-(<#= scalarName #> a, <#= typeName #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Select(n => $"a - b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator*(<#= typeName #> a, <#= typeName #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} * b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator*(<#= typeName #> a, <#= scalarName #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} * b")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator*(<#= scalarName #> a, <#= typeName #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Select(n => $"a * b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator*(<#= typeName #> a, <#= typ.compType #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Select(n => $"a.{Typ.xyzw[n]} * b")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator*(<#= typ.compType #> a, <#= typeName #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Select(n => $"a * b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator/(<#= typeName #> a, <#= typeName #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Reverse().Select(n => $"a.{Typ.xyzw[n]} / b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator/(<#= scalarName #> a, <#= typeName #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Reverse().Select(n => $"a / b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator/(<#= typeName #> a, <#= scalarName #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Reverse().Select(n => $"a.{Typ.xyzw[n]} / b")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator/(<#= typeName #> a, <#= typ.compType #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Reverse().Select(n => $"a.{Typ.xyzw[n]} / b")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator%(<#= typeName #> a, <#= typeName #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Reverse().Select(n => $"a.{Typ.xyzw[n]} % b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator%(<#= scalarName #> a, <#= typeName #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Reverse().Select(n => $"a % b.{Typ.xyzw[n]}")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator%(<#= typeName #> a, <#= scalarName #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Reverse().Select(n => $"a.{Typ.xyzw[n]} % b")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator%(<#= typeName #> a, <#= typ.compType #> b) => new(<#=
                        string.Join(", ", Enumerable.Range(0, i).Reverse().Select(n => $"a.{Typ.xyzw[n]} % b")) #>);

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator++(<#= typeName #> a) => a + <#= scalarName #>.One;

    [MethodImpl(256 | 512)]
    public static <#= typeName #> operator--(<#= typeName #> a) => a - <#= scalarName #>.One;

    #endregion // Operators
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
