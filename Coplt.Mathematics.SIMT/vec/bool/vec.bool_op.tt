<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.SIMT;

<#
    var sizes = new[] { 4, 8, 16, 32 };
    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        for (int i = 2; i <= 4; i++)
        {
            foreach (var size in sizes)
            {
                var byteSize = typ.size * size;
                var bitSize = 8 * byteSize;
                var num_vectors = Math.Max(1, bitSize / 512);
                bitSize = Math.Min(512, bitSize);

                var scalar_typeName = $"{typ.compType}_mt{size}";
                var typeName = $"{typ.name}{i}_mt{size}";
                var bType = $"b{typ.size * 8}v";
                var scalar_bType = $"b{typ.size * 8}";
                var bTyp = Typ.Typs.FirstOrDefault(a => a.name == bType);
                var bTypeName = $"{bType}{i}_mt{size}";
                var scalar_bTypeName = $"{scalar_bType}_mt{size}";

                IEnumerable<string> ForVectors(string name)
                {
                    if (num_vectors == 1) yield return name;
                    else
                    {
                        for (var i = 0; i < num_vectors; i++)
                        {
                            yield return $"{name}{i}";
                        }
                    }
                }

                var vectors = ForVectors("vector").ToList();
#>
#region <#= typeName #>

[Ex]
public static partial class math_mt
{
    [MethodImpl(256 | 512)]
    public static <#= typeName #> select([This] <#= bTypeName #> c, <#= typeName #> t, <#= typeName #> f)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"select(c.{Typ.xyzw[n]}, t.{Typ.xyzw[n]}, f.{Typ.xyzw[n]})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> select([This] <#= scalar_bTypeName #> c, <#= typeName #> t, <#= typeName #> f)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"select(c, t.{Typ.xyzw[n]}, f.{Typ.xyzw[n]})")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> select([This] <#= bTypeName #> c, <#= scalar_typeName #> t, <#= scalar_typeName #> f)
    {
        return new(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => $"select(c.{Typ.xyzw[n]}, t, f)")) #>);
    }

    [MethodImpl(256 | 512)]
    public static <#= typeName #> select([This] bool c, <#= typeName #> t, <#= typeName #> f) => c ? t : f;
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
