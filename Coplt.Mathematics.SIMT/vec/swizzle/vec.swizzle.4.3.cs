// generated by template, do not modify manually

namespace Coplt.Mathematics.SIMT;

#region float4_mt4

public partial struct float4_mt4 
{
    public readonly float3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt4 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt4 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt4 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly float3_mt4 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly float3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly float3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public float3_mt4 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public float3_mt4 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public float3_mt4 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public float3_mt4 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly float3_mt4 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly float3_mt4 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public float3_mt4 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public float3_mt4 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly float3_mt4 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly float3_mt4 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public float3_mt4 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public float3_mt4 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly float3_mt4 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly float3_mt4 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public float3_mt4 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public float3_mt4 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public float3_mt4 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public float3_mt4 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly float3_mt4 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly float3_mt4 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly float3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly float3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public float3_mt4 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public float3_mt4 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public float3_mt4 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public float3_mt4 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly float3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt4 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly float3_mt4 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly float3_mt4 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly float3_mt4 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public float3_mt4 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public float3_mt4 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly float3_mt4 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt4 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt4 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly float3_mt4 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public float3_mt4 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public float3_mt4 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public float3_mt4 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public float3_mt4 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly float3_mt4 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly float3_mt4 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public float3_mt4 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public float3_mt4 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly float3_mt4 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly float3_mt4 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly float3_mt4 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly float3_mt4 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public float3_mt4 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public float3_mt4 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly float3_mt4 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly float3_mt4 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public float3_mt4 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public float3_mt4 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public float3_mt4 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public float3_mt4 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly float3_mt4 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt4 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt4 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly float3_mt4 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public float3_mt4 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public float3_mt4 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly float3_mt4 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt4 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt4 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt4 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt4 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly float3_mt4 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly float3_mt4 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly float3_mt4 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public float3_mt4 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public float3_mt4 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public float3_mt4 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public float3_mt4 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly float3_mt4 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly float3_mt4 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly float3_mt4 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly float3_mt4 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly float3_mt4 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly float3_mt4 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public float3_mt4 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public float3_mt4 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public float3_mt4 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public float3_mt4 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly float3_mt4 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly float3_mt4 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public float3_mt4 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public float3_mt4 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly float3_mt4 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly float3_mt4 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public float3_mt4 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public float3_mt4 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly float3_mt4 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly float3_mt4 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public float3_mt4 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public float3_mt4 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public float3_mt4 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public float3_mt4 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly float3_mt4 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly float3_mt4 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly float3_mt4 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly float3_mt4 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly float3_mt4 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly float3_mt4 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly float3_mt4 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly float3_mt4 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly float3_mt4 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly float3_mt4 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly float3_mt4 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly float3_mt4 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // float4_mt4

#region float4_mt8

public partial struct float4_mt8 
{
    public readonly float3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt8 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt8 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt8 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly float3_mt8 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly float3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly float3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public float3_mt8 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public float3_mt8 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public float3_mt8 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public float3_mt8 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly float3_mt8 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly float3_mt8 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public float3_mt8 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public float3_mt8 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly float3_mt8 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly float3_mt8 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public float3_mt8 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public float3_mt8 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly float3_mt8 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly float3_mt8 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public float3_mt8 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public float3_mt8 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public float3_mt8 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public float3_mt8 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly float3_mt8 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly float3_mt8 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly float3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly float3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public float3_mt8 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public float3_mt8 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public float3_mt8 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public float3_mt8 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly float3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt8 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly float3_mt8 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly float3_mt8 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly float3_mt8 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public float3_mt8 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public float3_mt8 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly float3_mt8 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt8 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt8 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly float3_mt8 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public float3_mt8 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public float3_mt8 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public float3_mt8 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public float3_mt8 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly float3_mt8 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly float3_mt8 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public float3_mt8 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public float3_mt8 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly float3_mt8 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly float3_mt8 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly float3_mt8 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly float3_mt8 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public float3_mt8 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public float3_mt8 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly float3_mt8 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly float3_mt8 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public float3_mt8 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public float3_mt8 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public float3_mt8 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public float3_mt8 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly float3_mt8 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt8 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt8 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly float3_mt8 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public float3_mt8 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public float3_mt8 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly float3_mt8 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt8 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt8 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt8 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt8 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly float3_mt8 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly float3_mt8 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly float3_mt8 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public float3_mt8 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public float3_mt8 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public float3_mt8 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public float3_mt8 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly float3_mt8 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly float3_mt8 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly float3_mt8 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly float3_mt8 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly float3_mt8 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly float3_mt8 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public float3_mt8 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public float3_mt8 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public float3_mt8 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public float3_mt8 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly float3_mt8 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly float3_mt8 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public float3_mt8 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public float3_mt8 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly float3_mt8 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly float3_mt8 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public float3_mt8 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public float3_mt8 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly float3_mt8 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly float3_mt8 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public float3_mt8 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public float3_mt8 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public float3_mt8 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public float3_mt8 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly float3_mt8 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly float3_mt8 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly float3_mt8 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly float3_mt8 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly float3_mt8 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly float3_mt8 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly float3_mt8 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly float3_mt8 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly float3_mt8 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly float3_mt8 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly float3_mt8 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly float3_mt8 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // float4_mt8

#region float4_mt16

public partial struct float4_mt16 
{
    public readonly float3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt16 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt16 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt16 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly float3_mt16 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly float3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly float3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public float3_mt16 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public float3_mt16 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public float3_mt16 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public float3_mt16 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly float3_mt16 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly float3_mt16 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public float3_mt16 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public float3_mt16 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly float3_mt16 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly float3_mt16 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public float3_mt16 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public float3_mt16 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly float3_mt16 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly float3_mt16 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public float3_mt16 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public float3_mt16 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public float3_mt16 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public float3_mt16 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly float3_mt16 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly float3_mt16 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly float3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly float3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public float3_mt16 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public float3_mt16 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public float3_mt16 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public float3_mt16 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly float3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt16 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly float3_mt16 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly float3_mt16 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly float3_mt16 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public float3_mt16 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public float3_mt16 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly float3_mt16 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt16 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt16 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly float3_mt16 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public float3_mt16 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public float3_mt16 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public float3_mt16 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public float3_mt16 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly float3_mt16 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly float3_mt16 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public float3_mt16 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public float3_mt16 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly float3_mt16 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly float3_mt16 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly float3_mt16 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly float3_mt16 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public float3_mt16 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public float3_mt16 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly float3_mt16 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly float3_mt16 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public float3_mt16 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public float3_mt16 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public float3_mt16 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public float3_mt16 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly float3_mt16 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt16 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt16 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly float3_mt16 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public float3_mt16 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public float3_mt16 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly float3_mt16 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt16 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt16 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt16 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt16 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly float3_mt16 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly float3_mt16 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly float3_mt16 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public float3_mt16 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public float3_mt16 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public float3_mt16 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public float3_mt16 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly float3_mt16 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly float3_mt16 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly float3_mt16 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly float3_mt16 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly float3_mt16 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly float3_mt16 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public float3_mt16 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public float3_mt16 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public float3_mt16 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public float3_mt16 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly float3_mt16 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly float3_mt16 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public float3_mt16 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public float3_mt16 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly float3_mt16 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly float3_mt16 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public float3_mt16 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public float3_mt16 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly float3_mt16 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly float3_mt16 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public float3_mt16 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public float3_mt16 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public float3_mt16 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public float3_mt16 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly float3_mt16 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly float3_mt16 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly float3_mt16 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly float3_mt16 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly float3_mt16 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly float3_mt16 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly float3_mt16 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly float3_mt16 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly float3_mt16 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly float3_mt16 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly float3_mt16 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly float3_mt16 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // float4_mt16

#region float4_mt32

public partial struct float4_mt32 
{
    public readonly float3_mt32 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt32 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt32 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt32 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt32 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt32 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt32 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly float3_mt32 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly float3_mt32 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt32 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt32 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly float3_mt32 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public float3_mt32 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public float3_mt32 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public float3_mt32 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public float3_mt32 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly float3_mt32 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly float3_mt32 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public float3_mt32 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public float3_mt32 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly float3_mt32 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly float3_mt32 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public float3_mt32 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public float3_mt32 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly float3_mt32 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly float3_mt32 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public float3_mt32 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public float3_mt32 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public float3_mt32 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public float3_mt32 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly float3_mt32 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly float3_mt32 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly float3_mt32 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt32 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt32 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly float3_mt32 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public float3_mt32 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public float3_mt32 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public float3_mt32 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public float3_mt32 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly float3_mt32 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt32 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt32 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt32 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt32 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly float3_mt32 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly float3_mt32 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly float3_mt32 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public float3_mt32 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public float3_mt32 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly float3_mt32 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt32 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt32 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly float3_mt32 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public float3_mt32 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public float3_mt32 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public float3_mt32 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public float3_mt32 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly float3_mt32 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly float3_mt32 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public float3_mt32 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public float3_mt32 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly float3_mt32 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly float3_mt32 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly float3_mt32 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly float3_mt32 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public float3_mt32 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public float3_mt32 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly float3_mt32 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly float3_mt32 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public float3_mt32 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public float3_mt32 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public float3_mt32 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public float3_mt32 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly float3_mt32 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt32 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt32 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly float3_mt32 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public float3_mt32 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public float3_mt32 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly float3_mt32 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt32 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt32 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt32 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt32 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly float3_mt32 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly float3_mt32 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly float3_mt32 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public float3_mt32 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public float3_mt32 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public float3_mt32 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public float3_mt32 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly float3_mt32 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly float3_mt32 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly float3_mt32 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly float3_mt32 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly float3_mt32 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly float3_mt32 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public float3_mt32 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public float3_mt32 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public float3_mt32 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public float3_mt32 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly float3_mt32 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly float3_mt32 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public float3_mt32 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public float3_mt32 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly float3_mt32 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly float3_mt32 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public float3_mt32 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public float3_mt32 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly float3_mt32 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly float3_mt32 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public float3_mt32 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public float3_mt32 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public float3_mt32 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public float3_mt32 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly float3_mt32 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly float3_mt32 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly float3_mt32 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly float3_mt32 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly float3_mt32 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly float3_mt32 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly float3_mt32 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly float3_mt32 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly float3_mt32 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly float3_mt32 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly float3_mt32 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly float3_mt32 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // float4_mt32

#region double4_mt4

public partial struct double4_mt4 
{
    public readonly double3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt4 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt4 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt4 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly double3_mt4 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly double3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly double3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public double3_mt4 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public double3_mt4 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public double3_mt4 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public double3_mt4 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly double3_mt4 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly double3_mt4 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public double3_mt4 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public double3_mt4 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly double3_mt4 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly double3_mt4 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public double3_mt4 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public double3_mt4 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly double3_mt4 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly double3_mt4 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public double3_mt4 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public double3_mt4 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public double3_mt4 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public double3_mt4 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly double3_mt4 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly double3_mt4 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly double3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly double3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public double3_mt4 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public double3_mt4 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public double3_mt4 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public double3_mt4 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly double3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt4 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly double3_mt4 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly double3_mt4 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly double3_mt4 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public double3_mt4 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public double3_mt4 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly double3_mt4 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt4 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt4 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly double3_mt4 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public double3_mt4 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public double3_mt4 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public double3_mt4 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public double3_mt4 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly double3_mt4 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly double3_mt4 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public double3_mt4 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public double3_mt4 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly double3_mt4 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly double3_mt4 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly double3_mt4 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly double3_mt4 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public double3_mt4 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public double3_mt4 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly double3_mt4 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly double3_mt4 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public double3_mt4 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public double3_mt4 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public double3_mt4 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public double3_mt4 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly double3_mt4 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt4 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt4 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly double3_mt4 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public double3_mt4 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public double3_mt4 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly double3_mt4 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt4 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt4 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt4 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt4 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly double3_mt4 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly double3_mt4 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly double3_mt4 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public double3_mt4 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public double3_mt4 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public double3_mt4 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public double3_mt4 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly double3_mt4 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly double3_mt4 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly double3_mt4 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly double3_mt4 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly double3_mt4 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly double3_mt4 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public double3_mt4 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public double3_mt4 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public double3_mt4 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public double3_mt4 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly double3_mt4 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly double3_mt4 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public double3_mt4 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public double3_mt4 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly double3_mt4 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly double3_mt4 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public double3_mt4 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public double3_mt4 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly double3_mt4 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly double3_mt4 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public double3_mt4 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public double3_mt4 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public double3_mt4 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public double3_mt4 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly double3_mt4 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly double3_mt4 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly double3_mt4 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly double3_mt4 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly double3_mt4 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly double3_mt4 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly double3_mt4 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly double3_mt4 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly double3_mt4 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly double3_mt4 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly double3_mt4 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly double3_mt4 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // double4_mt4

#region double4_mt8

public partial struct double4_mt8 
{
    public readonly double3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt8 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt8 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt8 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly double3_mt8 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly double3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly double3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public double3_mt8 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public double3_mt8 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public double3_mt8 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public double3_mt8 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly double3_mt8 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly double3_mt8 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public double3_mt8 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public double3_mt8 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly double3_mt8 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly double3_mt8 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public double3_mt8 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public double3_mt8 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly double3_mt8 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly double3_mt8 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public double3_mt8 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public double3_mt8 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public double3_mt8 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public double3_mt8 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly double3_mt8 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly double3_mt8 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly double3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly double3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public double3_mt8 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public double3_mt8 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public double3_mt8 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public double3_mt8 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly double3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt8 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly double3_mt8 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly double3_mt8 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly double3_mt8 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public double3_mt8 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public double3_mt8 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly double3_mt8 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt8 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt8 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly double3_mt8 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public double3_mt8 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public double3_mt8 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public double3_mt8 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public double3_mt8 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly double3_mt8 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly double3_mt8 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public double3_mt8 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public double3_mt8 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly double3_mt8 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly double3_mt8 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly double3_mt8 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly double3_mt8 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public double3_mt8 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public double3_mt8 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly double3_mt8 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly double3_mt8 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public double3_mt8 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public double3_mt8 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public double3_mt8 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public double3_mt8 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly double3_mt8 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt8 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt8 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly double3_mt8 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public double3_mt8 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public double3_mt8 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly double3_mt8 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt8 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt8 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt8 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt8 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly double3_mt8 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly double3_mt8 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly double3_mt8 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public double3_mt8 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public double3_mt8 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public double3_mt8 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public double3_mt8 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly double3_mt8 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly double3_mt8 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly double3_mt8 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly double3_mt8 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly double3_mt8 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly double3_mt8 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public double3_mt8 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public double3_mt8 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public double3_mt8 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public double3_mt8 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly double3_mt8 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly double3_mt8 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public double3_mt8 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public double3_mt8 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly double3_mt8 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly double3_mt8 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public double3_mt8 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public double3_mt8 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly double3_mt8 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly double3_mt8 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public double3_mt8 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public double3_mt8 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public double3_mt8 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public double3_mt8 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly double3_mt8 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly double3_mt8 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly double3_mt8 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly double3_mt8 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly double3_mt8 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly double3_mt8 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly double3_mt8 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly double3_mt8 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly double3_mt8 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly double3_mt8 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly double3_mt8 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly double3_mt8 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // double4_mt8

#region double4_mt16

public partial struct double4_mt16 
{
    public readonly double3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt16 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt16 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt16 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly double3_mt16 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly double3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly double3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public double3_mt16 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public double3_mt16 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public double3_mt16 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public double3_mt16 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly double3_mt16 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly double3_mt16 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public double3_mt16 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public double3_mt16 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly double3_mt16 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly double3_mt16 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public double3_mt16 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public double3_mt16 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly double3_mt16 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly double3_mt16 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public double3_mt16 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public double3_mt16 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public double3_mt16 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public double3_mt16 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly double3_mt16 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly double3_mt16 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly double3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly double3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public double3_mt16 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public double3_mt16 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public double3_mt16 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public double3_mt16 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly double3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt16 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly double3_mt16 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly double3_mt16 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly double3_mt16 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public double3_mt16 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public double3_mt16 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly double3_mt16 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt16 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt16 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly double3_mt16 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public double3_mt16 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public double3_mt16 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public double3_mt16 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public double3_mt16 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly double3_mt16 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly double3_mt16 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public double3_mt16 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public double3_mt16 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly double3_mt16 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly double3_mt16 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly double3_mt16 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly double3_mt16 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public double3_mt16 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public double3_mt16 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly double3_mt16 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly double3_mt16 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public double3_mt16 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public double3_mt16 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public double3_mt16 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public double3_mt16 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly double3_mt16 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt16 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt16 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly double3_mt16 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public double3_mt16 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public double3_mt16 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly double3_mt16 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt16 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt16 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt16 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt16 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly double3_mt16 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly double3_mt16 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly double3_mt16 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public double3_mt16 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public double3_mt16 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public double3_mt16 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public double3_mt16 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly double3_mt16 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly double3_mt16 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly double3_mt16 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly double3_mt16 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly double3_mt16 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly double3_mt16 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public double3_mt16 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public double3_mt16 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public double3_mt16 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public double3_mt16 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly double3_mt16 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly double3_mt16 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public double3_mt16 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public double3_mt16 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly double3_mt16 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly double3_mt16 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public double3_mt16 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public double3_mt16 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly double3_mt16 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly double3_mt16 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public double3_mt16 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public double3_mt16 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public double3_mt16 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public double3_mt16 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly double3_mt16 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly double3_mt16 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly double3_mt16 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly double3_mt16 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly double3_mt16 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly double3_mt16 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly double3_mt16 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly double3_mt16 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly double3_mt16 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly double3_mt16 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly double3_mt16 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly double3_mt16 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // double4_mt16

#region double4_mt32

public partial struct double4_mt32 
{
    public readonly double3_mt32 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt32 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt32 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt32 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt32 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt32 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt32 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly double3_mt32 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly double3_mt32 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt32 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt32 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly double3_mt32 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public double3_mt32 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public double3_mt32 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public double3_mt32 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public double3_mt32 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly double3_mt32 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly double3_mt32 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public double3_mt32 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public double3_mt32 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly double3_mt32 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly double3_mt32 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public double3_mt32 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public double3_mt32 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly double3_mt32 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly double3_mt32 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public double3_mt32 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public double3_mt32 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public double3_mt32 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public double3_mt32 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly double3_mt32 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly double3_mt32 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly double3_mt32 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt32 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt32 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly double3_mt32 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public double3_mt32 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public double3_mt32 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public double3_mt32 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public double3_mt32 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly double3_mt32 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt32 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt32 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt32 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt32 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly double3_mt32 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly double3_mt32 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly double3_mt32 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public double3_mt32 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public double3_mt32 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly double3_mt32 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt32 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt32 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly double3_mt32 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public double3_mt32 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public double3_mt32 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public double3_mt32 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public double3_mt32 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly double3_mt32 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly double3_mt32 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public double3_mt32 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public double3_mt32 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly double3_mt32 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly double3_mt32 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly double3_mt32 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly double3_mt32 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public double3_mt32 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public double3_mt32 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly double3_mt32 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly double3_mt32 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public double3_mt32 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public double3_mt32 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public double3_mt32 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public double3_mt32 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly double3_mt32 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt32 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt32 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly double3_mt32 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public double3_mt32 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public double3_mt32 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly double3_mt32 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt32 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt32 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt32 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt32 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly double3_mt32 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly double3_mt32 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly double3_mt32 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public double3_mt32 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public double3_mt32 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public double3_mt32 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public double3_mt32 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly double3_mt32 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly double3_mt32 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly double3_mt32 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly double3_mt32 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly double3_mt32 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly double3_mt32 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public double3_mt32 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public double3_mt32 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public double3_mt32 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public double3_mt32 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly double3_mt32 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly double3_mt32 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public double3_mt32 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public double3_mt32 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly double3_mt32 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly double3_mt32 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public double3_mt32 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public double3_mt32 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly double3_mt32 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly double3_mt32 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public double3_mt32 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public double3_mt32 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public double3_mt32 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public double3_mt32 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly double3_mt32 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly double3_mt32 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly double3_mt32 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly double3_mt32 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly double3_mt32 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly double3_mt32 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly double3_mt32 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly double3_mt32 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly double3_mt32 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly double3_mt32 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly double3_mt32 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly double3_mt32 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // double4_mt32

#region int4_mt4

public partial struct int4_mt4 
{
    public readonly int3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt4 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt4 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt4 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly int3_mt4 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly int3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly int3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public int3_mt4 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public int3_mt4 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public int3_mt4 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public int3_mt4 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly int3_mt4 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly int3_mt4 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public int3_mt4 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public int3_mt4 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly int3_mt4 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly int3_mt4 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public int3_mt4 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public int3_mt4 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly int3_mt4 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly int3_mt4 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public int3_mt4 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public int3_mt4 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public int3_mt4 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public int3_mt4 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly int3_mt4 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly int3_mt4 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly int3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly int3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public int3_mt4 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public int3_mt4 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public int3_mt4 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public int3_mt4 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly int3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt4 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly int3_mt4 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly int3_mt4 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly int3_mt4 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public int3_mt4 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public int3_mt4 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly int3_mt4 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt4 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt4 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly int3_mt4 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public int3_mt4 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public int3_mt4 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public int3_mt4 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public int3_mt4 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly int3_mt4 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly int3_mt4 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public int3_mt4 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public int3_mt4 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly int3_mt4 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly int3_mt4 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly int3_mt4 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly int3_mt4 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public int3_mt4 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public int3_mt4 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly int3_mt4 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly int3_mt4 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public int3_mt4 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public int3_mt4 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public int3_mt4 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public int3_mt4 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly int3_mt4 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt4 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt4 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly int3_mt4 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public int3_mt4 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public int3_mt4 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly int3_mt4 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt4 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt4 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt4 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt4 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly int3_mt4 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly int3_mt4 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly int3_mt4 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public int3_mt4 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public int3_mt4 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public int3_mt4 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public int3_mt4 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly int3_mt4 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly int3_mt4 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly int3_mt4 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly int3_mt4 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly int3_mt4 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly int3_mt4 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public int3_mt4 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public int3_mt4 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public int3_mt4 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public int3_mt4 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly int3_mt4 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly int3_mt4 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public int3_mt4 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public int3_mt4 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly int3_mt4 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly int3_mt4 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public int3_mt4 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public int3_mt4 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly int3_mt4 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly int3_mt4 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public int3_mt4 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public int3_mt4 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public int3_mt4 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public int3_mt4 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly int3_mt4 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly int3_mt4 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly int3_mt4 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly int3_mt4 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly int3_mt4 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly int3_mt4 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly int3_mt4 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly int3_mt4 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly int3_mt4 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly int3_mt4 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly int3_mt4 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly int3_mt4 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // int4_mt4

#region int4_mt8

public partial struct int4_mt8 
{
    public readonly int3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt8 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt8 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt8 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly int3_mt8 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly int3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly int3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public int3_mt8 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public int3_mt8 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public int3_mt8 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public int3_mt8 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly int3_mt8 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly int3_mt8 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public int3_mt8 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public int3_mt8 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly int3_mt8 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly int3_mt8 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public int3_mt8 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public int3_mt8 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly int3_mt8 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly int3_mt8 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public int3_mt8 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public int3_mt8 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public int3_mt8 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public int3_mt8 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly int3_mt8 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly int3_mt8 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly int3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly int3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public int3_mt8 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public int3_mt8 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public int3_mt8 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public int3_mt8 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly int3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt8 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly int3_mt8 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly int3_mt8 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly int3_mt8 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public int3_mt8 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public int3_mt8 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly int3_mt8 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt8 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt8 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly int3_mt8 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public int3_mt8 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public int3_mt8 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public int3_mt8 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public int3_mt8 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly int3_mt8 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly int3_mt8 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public int3_mt8 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public int3_mt8 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly int3_mt8 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly int3_mt8 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly int3_mt8 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly int3_mt8 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public int3_mt8 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public int3_mt8 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly int3_mt8 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly int3_mt8 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public int3_mt8 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public int3_mt8 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public int3_mt8 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public int3_mt8 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly int3_mt8 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt8 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt8 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly int3_mt8 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public int3_mt8 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public int3_mt8 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly int3_mt8 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt8 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt8 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt8 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt8 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly int3_mt8 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly int3_mt8 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly int3_mt8 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public int3_mt8 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public int3_mt8 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public int3_mt8 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public int3_mt8 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly int3_mt8 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly int3_mt8 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly int3_mt8 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly int3_mt8 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly int3_mt8 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly int3_mt8 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public int3_mt8 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public int3_mt8 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public int3_mt8 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public int3_mt8 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly int3_mt8 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly int3_mt8 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public int3_mt8 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public int3_mt8 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly int3_mt8 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly int3_mt8 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public int3_mt8 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public int3_mt8 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly int3_mt8 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly int3_mt8 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public int3_mt8 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public int3_mt8 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public int3_mt8 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public int3_mt8 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly int3_mt8 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly int3_mt8 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly int3_mt8 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly int3_mt8 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly int3_mt8 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly int3_mt8 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly int3_mt8 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly int3_mt8 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly int3_mt8 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly int3_mt8 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly int3_mt8 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly int3_mt8 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // int4_mt8

#region int4_mt16

public partial struct int4_mt16 
{
    public readonly int3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt16 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt16 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt16 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly int3_mt16 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly int3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly int3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public int3_mt16 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public int3_mt16 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public int3_mt16 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public int3_mt16 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly int3_mt16 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly int3_mt16 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public int3_mt16 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public int3_mt16 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly int3_mt16 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly int3_mt16 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public int3_mt16 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public int3_mt16 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly int3_mt16 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly int3_mt16 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public int3_mt16 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public int3_mt16 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public int3_mt16 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public int3_mt16 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly int3_mt16 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly int3_mt16 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly int3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly int3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public int3_mt16 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public int3_mt16 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public int3_mt16 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public int3_mt16 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly int3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt16 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly int3_mt16 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly int3_mt16 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly int3_mt16 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public int3_mt16 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public int3_mt16 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly int3_mt16 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt16 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt16 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly int3_mt16 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public int3_mt16 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public int3_mt16 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public int3_mt16 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public int3_mt16 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly int3_mt16 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly int3_mt16 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public int3_mt16 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public int3_mt16 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly int3_mt16 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly int3_mt16 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly int3_mt16 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly int3_mt16 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public int3_mt16 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public int3_mt16 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly int3_mt16 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly int3_mt16 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public int3_mt16 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public int3_mt16 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public int3_mt16 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public int3_mt16 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly int3_mt16 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt16 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt16 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly int3_mt16 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public int3_mt16 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public int3_mt16 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly int3_mt16 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt16 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt16 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt16 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt16 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly int3_mt16 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly int3_mt16 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly int3_mt16 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public int3_mt16 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public int3_mt16 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public int3_mt16 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public int3_mt16 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly int3_mt16 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly int3_mt16 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly int3_mt16 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly int3_mt16 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly int3_mt16 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly int3_mt16 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public int3_mt16 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public int3_mt16 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public int3_mt16 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public int3_mt16 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly int3_mt16 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly int3_mt16 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public int3_mt16 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public int3_mt16 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly int3_mt16 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly int3_mt16 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public int3_mt16 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public int3_mt16 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly int3_mt16 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly int3_mt16 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public int3_mt16 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public int3_mt16 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public int3_mt16 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public int3_mt16 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly int3_mt16 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly int3_mt16 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly int3_mt16 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly int3_mt16 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly int3_mt16 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly int3_mt16 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly int3_mt16 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly int3_mt16 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly int3_mt16 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly int3_mt16 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly int3_mt16 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly int3_mt16 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // int4_mt16

#region int4_mt32

public partial struct int4_mt32 
{
    public readonly int3_mt32 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt32 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt32 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt32 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt32 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt32 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt32 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly int3_mt32 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly int3_mt32 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt32 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt32 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly int3_mt32 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public int3_mt32 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public int3_mt32 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public int3_mt32 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public int3_mt32 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly int3_mt32 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly int3_mt32 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public int3_mt32 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public int3_mt32 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly int3_mt32 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly int3_mt32 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public int3_mt32 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public int3_mt32 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly int3_mt32 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly int3_mt32 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public int3_mt32 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public int3_mt32 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public int3_mt32 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public int3_mt32 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly int3_mt32 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly int3_mt32 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly int3_mt32 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt32 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt32 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly int3_mt32 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public int3_mt32 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public int3_mt32 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public int3_mt32 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public int3_mt32 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly int3_mt32 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt32 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt32 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt32 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt32 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly int3_mt32 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly int3_mt32 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly int3_mt32 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public int3_mt32 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public int3_mt32 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly int3_mt32 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt32 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt32 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly int3_mt32 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public int3_mt32 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public int3_mt32 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public int3_mt32 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public int3_mt32 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly int3_mt32 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly int3_mt32 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public int3_mt32 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public int3_mt32 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly int3_mt32 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly int3_mt32 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly int3_mt32 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly int3_mt32 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public int3_mt32 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public int3_mt32 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly int3_mt32 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly int3_mt32 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public int3_mt32 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public int3_mt32 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public int3_mt32 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public int3_mt32 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly int3_mt32 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt32 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt32 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly int3_mt32 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public int3_mt32 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public int3_mt32 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly int3_mt32 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt32 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt32 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt32 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt32 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly int3_mt32 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly int3_mt32 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly int3_mt32 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public int3_mt32 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public int3_mt32 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public int3_mt32 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public int3_mt32 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly int3_mt32 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly int3_mt32 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly int3_mt32 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly int3_mt32 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly int3_mt32 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly int3_mt32 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public int3_mt32 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public int3_mt32 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public int3_mt32 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public int3_mt32 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly int3_mt32 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly int3_mt32 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public int3_mt32 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public int3_mt32 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly int3_mt32 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly int3_mt32 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public int3_mt32 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public int3_mt32 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly int3_mt32 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly int3_mt32 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public int3_mt32 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public int3_mt32 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public int3_mt32 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public int3_mt32 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly int3_mt32 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly int3_mt32 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly int3_mt32 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly int3_mt32 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly int3_mt32 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly int3_mt32 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly int3_mt32 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly int3_mt32 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly int3_mt32 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly int3_mt32 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly int3_mt32 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly int3_mt32 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // int4_mt32

#region uint4_mt4

public partial struct uint4_mt4 
{
    public readonly uint3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt4 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt4 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt4 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly uint3_mt4 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly uint3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly uint3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public uint3_mt4 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public uint3_mt4 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public uint3_mt4 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public uint3_mt4 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly uint3_mt4 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly uint3_mt4 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public uint3_mt4 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public uint3_mt4 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly uint3_mt4 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly uint3_mt4 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public uint3_mt4 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public uint3_mt4 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly uint3_mt4 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly uint3_mt4 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public uint3_mt4 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public uint3_mt4 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public uint3_mt4 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public uint3_mt4 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly uint3_mt4 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly uint3_mt4 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly uint3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly uint3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public uint3_mt4 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public uint3_mt4 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public uint3_mt4 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public uint3_mt4 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly uint3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt4 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly uint3_mt4 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly uint3_mt4 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly uint3_mt4 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public uint3_mt4 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public uint3_mt4 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly uint3_mt4 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt4 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt4 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly uint3_mt4 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public uint3_mt4 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public uint3_mt4 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public uint3_mt4 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public uint3_mt4 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly uint3_mt4 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly uint3_mt4 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public uint3_mt4 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public uint3_mt4 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly uint3_mt4 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly uint3_mt4 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly uint3_mt4 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly uint3_mt4 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public uint3_mt4 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public uint3_mt4 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly uint3_mt4 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly uint3_mt4 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public uint3_mt4 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public uint3_mt4 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public uint3_mt4 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public uint3_mt4 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly uint3_mt4 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt4 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt4 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly uint3_mt4 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public uint3_mt4 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public uint3_mt4 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly uint3_mt4 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt4 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt4 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt4 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt4 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly uint3_mt4 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly uint3_mt4 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly uint3_mt4 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public uint3_mt4 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public uint3_mt4 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public uint3_mt4 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public uint3_mt4 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly uint3_mt4 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly uint3_mt4 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly uint3_mt4 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly uint3_mt4 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly uint3_mt4 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly uint3_mt4 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public uint3_mt4 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public uint3_mt4 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public uint3_mt4 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public uint3_mt4 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly uint3_mt4 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly uint3_mt4 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public uint3_mt4 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public uint3_mt4 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly uint3_mt4 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly uint3_mt4 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public uint3_mt4 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public uint3_mt4 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly uint3_mt4 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly uint3_mt4 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public uint3_mt4 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public uint3_mt4 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public uint3_mt4 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public uint3_mt4 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly uint3_mt4 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly uint3_mt4 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly uint3_mt4 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly uint3_mt4 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly uint3_mt4 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly uint3_mt4 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly uint3_mt4 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly uint3_mt4 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly uint3_mt4 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly uint3_mt4 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly uint3_mt4 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly uint3_mt4 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // uint4_mt4

#region uint4_mt8

public partial struct uint4_mt8 
{
    public readonly uint3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt8 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt8 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt8 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly uint3_mt8 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly uint3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly uint3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public uint3_mt8 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public uint3_mt8 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public uint3_mt8 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public uint3_mt8 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly uint3_mt8 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly uint3_mt8 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public uint3_mt8 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public uint3_mt8 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly uint3_mt8 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly uint3_mt8 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public uint3_mt8 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public uint3_mt8 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly uint3_mt8 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly uint3_mt8 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public uint3_mt8 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public uint3_mt8 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public uint3_mt8 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public uint3_mt8 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly uint3_mt8 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly uint3_mt8 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly uint3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly uint3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public uint3_mt8 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public uint3_mt8 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public uint3_mt8 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public uint3_mt8 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly uint3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt8 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly uint3_mt8 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly uint3_mt8 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly uint3_mt8 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public uint3_mt8 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public uint3_mt8 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly uint3_mt8 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt8 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt8 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly uint3_mt8 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public uint3_mt8 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public uint3_mt8 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public uint3_mt8 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public uint3_mt8 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly uint3_mt8 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly uint3_mt8 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public uint3_mt8 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public uint3_mt8 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly uint3_mt8 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly uint3_mt8 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly uint3_mt8 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly uint3_mt8 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public uint3_mt8 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public uint3_mt8 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly uint3_mt8 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly uint3_mt8 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public uint3_mt8 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public uint3_mt8 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public uint3_mt8 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public uint3_mt8 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly uint3_mt8 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt8 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt8 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly uint3_mt8 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public uint3_mt8 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public uint3_mt8 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly uint3_mt8 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt8 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt8 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt8 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt8 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly uint3_mt8 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly uint3_mt8 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly uint3_mt8 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public uint3_mt8 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public uint3_mt8 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public uint3_mt8 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public uint3_mt8 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly uint3_mt8 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly uint3_mt8 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly uint3_mt8 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly uint3_mt8 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly uint3_mt8 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly uint3_mt8 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public uint3_mt8 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public uint3_mt8 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public uint3_mt8 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public uint3_mt8 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly uint3_mt8 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly uint3_mt8 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public uint3_mt8 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public uint3_mt8 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly uint3_mt8 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly uint3_mt8 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public uint3_mt8 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public uint3_mt8 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly uint3_mt8 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly uint3_mt8 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public uint3_mt8 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public uint3_mt8 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public uint3_mt8 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public uint3_mt8 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly uint3_mt8 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly uint3_mt8 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly uint3_mt8 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly uint3_mt8 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly uint3_mt8 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly uint3_mt8 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly uint3_mt8 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly uint3_mt8 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly uint3_mt8 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly uint3_mt8 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly uint3_mt8 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly uint3_mt8 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // uint4_mt8

#region uint4_mt16

public partial struct uint4_mt16 
{
    public readonly uint3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt16 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt16 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt16 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly uint3_mt16 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly uint3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly uint3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public uint3_mt16 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public uint3_mt16 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public uint3_mt16 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public uint3_mt16 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly uint3_mt16 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly uint3_mt16 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public uint3_mt16 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public uint3_mt16 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly uint3_mt16 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly uint3_mt16 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public uint3_mt16 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public uint3_mt16 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly uint3_mt16 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly uint3_mt16 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public uint3_mt16 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public uint3_mt16 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public uint3_mt16 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public uint3_mt16 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly uint3_mt16 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly uint3_mt16 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly uint3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly uint3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public uint3_mt16 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public uint3_mt16 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public uint3_mt16 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public uint3_mt16 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly uint3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt16 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly uint3_mt16 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly uint3_mt16 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly uint3_mt16 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public uint3_mt16 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public uint3_mt16 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly uint3_mt16 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt16 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt16 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly uint3_mt16 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public uint3_mt16 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public uint3_mt16 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public uint3_mt16 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public uint3_mt16 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly uint3_mt16 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly uint3_mt16 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public uint3_mt16 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public uint3_mt16 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly uint3_mt16 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly uint3_mt16 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly uint3_mt16 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly uint3_mt16 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public uint3_mt16 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public uint3_mt16 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly uint3_mt16 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly uint3_mt16 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public uint3_mt16 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public uint3_mt16 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public uint3_mt16 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public uint3_mt16 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly uint3_mt16 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt16 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt16 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly uint3_mt16 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public uint3_mt16 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public uint3_mt16 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly uint3_mt16 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt16 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt16 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt16 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt16 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly uint3_mt16 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly uint3_mt16 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly uint3_mt16 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public uint3_mt16 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public uint3_mt16 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public uint3_mt16 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public uint3_mt16 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly uint3_mt16 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly uint3_mt16 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly uint3_mt16 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly uint3_mt16 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly uint3_mt16 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly uint3_mt16 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public uint3_mt16 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public uint3_mt16 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public uint3_mt16 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public uint3_mt16 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly uint3_mt16 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly uint3_mt16 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public uint3_mt16 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public uint3_mt16 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly uint3_mt16 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly uint3_mt16 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public uint3_mt16 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public uint3_mt16 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly uint3_mt16 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly uint3_mt16 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public uint3_mt16 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public uint3_mt16 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public uint3_mt16 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public uint3_mt16 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly uint3_mt16 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly uint3_mt16 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly uint3_mt16 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly uint3_mt16 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly uint3_mt16 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly uint3_mt16 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly uint3_mt16 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly uint3_mt16 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly uint3_mt16 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly uint3_mt16 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly uint3_mt16 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly uint3_mt16 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // uint4_mt16

#region uint4_mt32

public partial struct uint4_mt32 
{
    public readonly uint3_mt32 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt32 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt32 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt32 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt32 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt32 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt32 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly uint3_mt32 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly uint3_mt32 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt32 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt32 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly uint3_mt32 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public uint3_mt32 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public uint3_mt32 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public uint3_mt32 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public uint3_mt32 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly uint3_mt32 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly uint3_mt32 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public uint3_mt32 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public uint3_mt32 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly uint3_mt32 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly uint3_mt32 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public uint3_mt32 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public uint3_mt32 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly uint3_mt32 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly uint3_mt32 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public uint3_mt32 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public uint3_mt32 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public uint3_mt32 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public uint3_mt32 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly uint3_mt32 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly uint3_mt32 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly uint3_mt32 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt32 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt32 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly uint3_mt32 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public uint3_mt32 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public uint3_mt32 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public uint3_mt32 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public uint3_mt32 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly uint3_mt32 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt32 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt32 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt32 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt32 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly uint3_mt32 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly uint3_mt32 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly uint3_mt32 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public uint3_mt32 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public uint3_mt32 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly uint3_mt32 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt32 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt32 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly uint3_mt32 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public uint3_mt32 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public uint3_mt32 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public uint3_mt32 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public uint3_mt32 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly uint3_mt32 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly uint3_mt32 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public uint3_mt32 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public uint3_mt32 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly uint3_mt32 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly uint3_mt32 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly uint3_mt32 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly uint3_mt32 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public uint3_mt32 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public uint3_mt32 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly uint3_mt32 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly uint3_mt32 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public uint3_mt32 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public uint3_mt32 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public uint3_mt32 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public uint3_mt32 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly uint3_mt32 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt32 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt32 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly uint3_mt32 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public uint3_mt32 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public uint3_mt32 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly uint3_mt32 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt32 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt32 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt32 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt32 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly uint3_mt32 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly uint3_mt32 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly uint3_mt32 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public uint3_mt32 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public uint3_mt32 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public uint3_mt32 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public uint3_mt32 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly uint3_mt32 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly uint3_mt32 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly uint3_mt32 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly uint3_mt32 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly uint3_mt32 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly uint3_mt32 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public uint3_mt32 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public uint3_mt32 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public uint3_mt32 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public uint3_mt32 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly uint3_mt32 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly uint3_mt32 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public uint3_mt32 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public uint3_mt32 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly uint3_mt32 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly uint3_mt32 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public uint3_mt32 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public uint3_mt32 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly uint3_mt32 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly uint3_mt32 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public uint3_mt32 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public uint3_mt32 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public uint3_mt32 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public uint3_mt32 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly uint3_mt32 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly uint3_mt32 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly uint3_mt32 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly uint3_mt32 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly uint3_mt32 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly uint3_mt32 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly uint3_mt32 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly uint3_mt32 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly uint3_mt32 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly uint3_mt32 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly uint3_mt32 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly uint3_mt32 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // uint4_mt32

#region long4_mt4

public partial struct long4_mt4 
{
    public readonly long3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt4 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt4 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt4 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly long3_mt4 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly long3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly long3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public long3_mt4 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public long3_mt4 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public long3_mt4 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public long3_mt4 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly long3_mt4 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly long3_mt4 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public long3_mt4 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public long3_mt4 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly long3_mt4 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly long3_mt4 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public long3_mt4 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public long3_mt4 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly long3_mt4 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly long3_mt4 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public long3_mt4 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public long3_mt4 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public long3_mt4 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public long3_mt4 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly long3_mt4 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly long3_mt4 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly long3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly long3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public long3_mt4 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public long3_mt4 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public long3_mt4 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public long3_mt4 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly long3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt4 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly long3_mt4 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly long3_mt4 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly long3_mt4 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public long3_mt4 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public long3_mt4 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly long3_mt4 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt4 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt4 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly long3_mt4 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public long3_mt4 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public long3_mt4 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public long3_mt4 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public long3_mt4 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly long3_mt4 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly long3_mt4 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public long3_mt4 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public long3_mt4 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly long3_mt4 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly long3_mt4 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly long3_mt4 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly long3_mt4 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public long3_mt4 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public long3_mt4 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly long3_mt4 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly long3_mt4 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public long3_mt4 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public long3_mt4 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public long3_mt4 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public long3_mt4 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly long3_mt4 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt4 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt4 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly long3_mt4 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public long3_mt4 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public long3_mt4 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly long3_mt4 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt4 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt4 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt4 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt4 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly long3_mt4 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly long3_mt4 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly long3_mt4 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public long3_mt4 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public long3_mt4 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public long3_mt4 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public long3_mt4 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly long3_mt4 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly long3_mt4 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly long3_mt4 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly long3_mt4 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly long3_mt4 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly long3_mt4 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public long3_mt4 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public long3_mt4 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public long3_mt4 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public long3_mt4 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly long3_mt4 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly long3_mt4 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public long3_mt4 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public long3_mt4 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly long3_mt4 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly long3_mt4 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public long3_mt4 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public long3_mt4 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly long3_mt4 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly long3_mt4 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public long3_mt4 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public long3_mt4 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public long3_mt4 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public long3_mt4 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly long3_mt4 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly long3_mt4 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly long3_mt4 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly long3_mt4 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly long3_mt4 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly long3_mt4 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly long3_mt4 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly long3_mt4 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly long3_mt4 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly long3_mt4 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly long3_mt4 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly long3_mt4 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // long4_mt4

#region long4_mt8

public partial struct long4_mt8 
{
    public readonly long3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt8 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt8 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt8 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly long3_mt8 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly long3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly long3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public long3_mt8 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public long3_mt8 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public long3_mt8 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public long3_mt8 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly long3_mt8 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly long3_mt8 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public long3_mt8 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public long3_mt8 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly long3_mt8 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly long3_mt8 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public long3_mt8 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public long3_mt8 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly long3_mt8 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly long3_mt8 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public long3_mt8 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public long3_mt8 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public long3_mt8 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public long3_mt8 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly long3_mt8 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly long3_mt8 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly long3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly long3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public long3_mt8 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public long3_mt8 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public long3_mt8 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public long3_mt8 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly long3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt8 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly long3_mt8 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly long3_mt8 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly long3_mt8 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public long3_mt8 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public long3_mt8 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly long3_mt8 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt8 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt8 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly long3_mt8 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public long3_mt8 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public long3_mt8 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public long3_mt8 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public long3_mt8 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly long3_mt8 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly long3_mt8 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public long3_mt8 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public long3_mt8 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly long3_mt8 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly long3_mt8 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly long3_mt8 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly long3_mt8 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public long3_mt8 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public long3_mt8 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly long3_mt8 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly long3_mt8 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public long3_mt8 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public long3_mt8 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public long3_mt8 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public long3_mt8 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly long3_mt8 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt8 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt8 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly long3_mt8 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public long3_mt8 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public long3_mt8 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly long3_mt8 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt8 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt8 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt8 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt8 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly long3_mt8 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly long3_mt8 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly long3_mt8 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public long3_mt8 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public long3_mt8 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public long3_mt8 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public long3_mt8 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly long3_mt8 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly long3_mt8 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly long3_mt8 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly long3_mt8 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly long3_mt8 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly long3_mt8 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public long3_mt8 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public long3_mt8 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public long3_mt8 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public long3_mt8 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly long3_mt8 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly long3_mt8 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public long3_mt8 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public long3_mt8 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly long3_mt8 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly long3_mt8 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public long3_mt8 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public long3_mt8 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly long3_mt8 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly long3_mt8 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public long3_mt8 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public long3_mt8 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public long3_mt8 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public long3_mt8 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly long3_mt8 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly long3_mt8 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly long3_mt8 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly long3_mt8 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly long3_mt8 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly long3_mt8 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly long3_mt8 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly long3_mt8 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly long3_mt8 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly long3_mt8 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly long3_mt8 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly long3_mt8 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // long4_mt8

#region long4_mt16

public partial struct long4_mt16 
{
    public readonly long3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt16 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt16 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt16 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly long3_mt16 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly long3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly long3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public long3_mt16 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public long3_mt16 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public long3_mt16 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public long3_mt16 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly long3_mt16 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly long3_mt16 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public long3_mt16 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public long3_mt16 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly long3_mt16 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly long3_mt16 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public long3_mt16 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public long3_mt16 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly long3_mt16 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly long3_mt16 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public long3_mt16 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public long3_mt16 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public long3_mt16 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public long3_mt16 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly long3_mt16 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly long3_mt16 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly long3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly long3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public long3_mt16 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public long3_mt16 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public long3_mt16 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public long3_mt16 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly long3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt16 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly long3_mt16 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly long3_mt16 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly long3_mt16 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public long3_mt16 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public long3_mt16 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly long3_mt16 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt16 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt16 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly long3_mt16 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public long3_mt16 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public long3_mt16 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public long3_mt16 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public long3_mt16 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly long3_mt16 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly long3_mt16 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public long3_mt16 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public long3_mt16 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly long3_mt16 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly long3_mt16 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly long3_mt16 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly long3_mt16 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public long3_mt16 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public long3_mt16 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly long3_mt16 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly long3_mt16 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public long3_mt16 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public long3_mt16 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public long3_mt16 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public long3_mt16 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly long3_mt16 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt16 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt16 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly long3_mt16 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public long3_mt16 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public long3_mt16 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly long3_mt16 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt16 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt16 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt16 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt16 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly long3_mt16 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly long3_mt16 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly long3_mt16 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public long3_mt16 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public long3_mt16 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public long3_mt16 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public long3_mt16 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly long3_mt16 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly long3_mt16 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly long3_mt16 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly long3_mt16 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly long3_mt16 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly long3_mt16 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public long3_mt16 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public long3_mt16 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public long3_mt16 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public long3_mt16 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly long3_mt16 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly long3_mt16 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public long3_mt16 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public long3_mt16 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly long3_mt16 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly long3_mt16 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public long3_mt16 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public long3_mt16 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly long3_mt16 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly long3_mt16 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public long3_mt16 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public long3_mt16 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public long3_mt16 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public long3_mt16 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly long3_mt16 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly long3_mt16 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly long3_mt16 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly long3_mt16 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly long3_mt16 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly long3_mt16 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly long3_mt16 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly long3_mt16 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly long3_mt16 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly long3_mt16 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly long3_mt16 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly long3_mt16 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // long4_mt16

#region long4_mt32

public partial struct long4_mt32 
{
    public readonly long3_mt32 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt32 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt32 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt32 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt32 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt32 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt32 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly long3_mt32 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly long3_mt32 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt32 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt32 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly long3_mt32 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public long3_mt32 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public long3_mt32 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public long3_mt32 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public long3_mt32 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly long3_mt32 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly long3_mt32 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public long3_mt32 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public long3_mt32 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly long3_mt32 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly long3_mt32 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public long3_mt32 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public long3_mt32 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly long3_mt32 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly long3_mt32 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public long3_mt32 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public long3_mt32 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public long3_mt32 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public long3_mt32 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly long3_mt32 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly long3_mt32 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly long3_mt32 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt32 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt32 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly long3_mt32 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public long3_mt32 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public long3_mt32 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public long3_mt32 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public long3_mt32 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly long3_mt32 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt32 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt32 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt32 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt32 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly long3_mt32 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly long3_mt32 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly long3_mt32 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public long3_mt32 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public long3_mt32 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly long3_mt32 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt32 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt32 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly long3_mt32 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public long3_mt32 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public long3_mt32 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public long3_mt32 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public long3_mt32 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly long3_mt32 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly long3_mt32 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public long3_mt32 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public long3_mt32 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly long3_mt32 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly long3_mt32 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly long3_mt32 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly long3_mt32 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public long3_mt32 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public long3_mt32 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly long3_mt32 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly long3_mt32 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public long3_mt32 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public long3_mt32 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public long3_mt32 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public long3_mt32 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly long3_mt32 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt32 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt32 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly long3_mt32 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public long3_mt32 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public long3_mt32 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly long3_mt32 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt32 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt32 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt32 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt32 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly long3_mt32 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly long3_mt32 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly long3_mt32 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public long3_mt32 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public long3_mt32 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public long3_mt32 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public long3_mt32 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly long3_mt32 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly long3_mt32 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly long3_mt32 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly long3_mt32 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly long3_mt32 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly long3_mt32 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public long3_mt32 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public long3_mt32 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public long3_mt32 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public long3_mt32 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly long3_mt32 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly long3_mt32 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public long3_mt32 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public long3_mt32 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly long3_mt32 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly long3_mt32 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public long3_mt32 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public long3_mt32 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly long3_mt32 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly long3_mt32 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public long3_mt32 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public long3_mt32 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public long3_mt32 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public long3_mt32 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly long3_mt32 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly long3_mt32 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly long3_mt32 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly long3_mt32 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly long3_mt32 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly long3_mt32 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly long3_mt32 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly long3_mt32 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly long3_mt32 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly long3_mt32 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly long3_mt32 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly long3_mt32 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // long4_mt32

#region ulong4_mt4

public partial struct ulong4_mt4 
{
    public readonly ulong3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt4 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt4 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt4 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly ulong3_mt4 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly ulong3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly ulong3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public ulong3_mt4 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public ulong3_mt4 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public ulong3_mt4 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public ulong3_mt4 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly ulong3_mt4 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly ulong3_mt4 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public ulong3_mt4 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public ulong3_mt4 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly ulong3_mt4 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly ulong3_mt4 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public ulong3_mt4 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public ulong3_mt4 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly ulong3_mt4 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly ulong3_mt4 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public ulong3_mt4 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public ulong3_mt4 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public ulong3_mt4 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public ulong3_mt4 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly ulong3_mt4 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly ulong3_mt4 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly ulong3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly ulong3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public ulong3_mt4 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public ulong3_mt4 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public ulong3_mt4 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public ulong3_mt4 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly ulong3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt4 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly ulong3_mt4 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly ulong3_mt4 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly ulong3_mt4 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public ulong3_mt4 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public ulong3_mt4 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly ulong3_mt4 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt4 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt4 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly ulong3_mt4 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public ulong3_mt4 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public ulong3_mt4 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public ulong3_mt4 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public ulong3_mt4 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly ulong3_mt4 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly ulong3_mt4 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public ulong3_mt4 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public ulong3_mt4 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly ulong3_mt4 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly ulong3_mt4 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly ulong3_mt4 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly ulong3_mt4 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public ulong3_mt4 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public ulong3_mt4 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly ulong3_mt4 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly ulong3_mt4 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public ulong3_mt4 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public ulong3_mt4 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public ulong3_mt4 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public ulong3_mt4 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly ulong3_mt4 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt4 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt4 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly ulong3_mt4 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public ulong3_mt4 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public ulong3_mt4 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly ulong3_mt4 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt4 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt4 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt4 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt4 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly ulong3_mt4 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly ulong3_mt4 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly ulong3_mt4 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public ulong3_mt4 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public ulong3_mt4 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public ulong3_mt4 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public ulong3_mt4 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly ulong3_mt4 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly ulong3_mt4 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly ulong3_mt4 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly ulong3_mt4 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly ulong3_mt4 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly ulong3_mt4 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public ulong3_mt4 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public ulong3_mt4 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public ulong3_mt4 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public ulong3_mt4 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly ulong3_mt4 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly ulong3_mt4 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public ulong3_mt4 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public ulong3_mt4 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly ulong3_mt4 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly ulong3_mt4 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public ulong3_mt4 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public ulong3_mt4 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly ulong3_mt4 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly ulong3_mt4 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public ulong3_mt4 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public ulong3_mt4 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public ulong3_mt4 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public ulong3_mt4 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly ulong3_mt4 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly ulong3_mt4 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly ulong3_mt4 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly ulong3_mt4 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly ulong3_mt4 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly ulong3_mt4 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly ulong3_mt4 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly ulong3_mt4 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly ulong3_mt4 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly ulong3_mt4 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly ulong3_mt4 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly ulong3_mt4 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // ulong4_mt4

#region ulong4_mt8

public partial struct ulong4_mt8 
{
    public readonly ulong3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt8 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt8 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt8 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly ulong3_mt8 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly ulong3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly ulong3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public ulong3_mt8 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public ulong3_mt8 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public ulong3_mt8 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public ulong3_mt8 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly ulong3_mt8 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly ulong3_mt8 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public ulong3_mt8 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public ulong3_mt8 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly ulong3_mt8 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly ulong3_mt8 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public ulong3_mt8 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public ulong3_mt8 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly ulong3_mt8 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly ulong3_mt8 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public ulong3_mt8 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public ulong3_mt8 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public ulong3_mt8 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public ulong3_mt8 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly ulong3_mt8 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly ulong3_mt8 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly ulong3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly ulong3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public ulong3_mt8 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public ulong3_mt8 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public ulong3_mt8 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public ulong3_mt8 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly ulong3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt8 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly ulong3_mt8 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly ulong3_mt8 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly ulong3_mt8 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public ulong3_mt8 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public ulong3_mt8 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly ulong3_mt8 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt8 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt8 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly ulong3_mt8 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public ulong3_mt8 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public ulong3_mt8 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public ulong3_mt8 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public ulong3_mt8 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly ulong3_mt8 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly ulong3_mt8 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public ulong3_mt8 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public ulong3_mt8 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly ulong3_mt8 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly ulong3_mt8 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly ulong3_mt8 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly ulong3_mt8 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public ulong3_mt8 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public ulong3_mt8 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly ulong3_mt8 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly ulong3_mt8 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public ulong3_mt8 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public ulong3_mt8 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public ulong3_mt8 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public ulong3_mt8 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly ulong3_mt8 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt8 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt8 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly ulong3_mt8 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public ulong3_mt8 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public ulong3_mt8 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly ulong3_mt8 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt8 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt8 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt8 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt8 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly ulong3_mt8 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly ulong3_mt8 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly ulong3_mt8 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public ulong3_mt8 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public ulong3_mt8 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public ulong3_mt8 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public ulong3_mt8 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly ulong3_mt8 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly ulong3_mt8 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly ulong3_mt8 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly ulong3_mt8 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly ulong3_mt8 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly ulong3_mt8 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public ulong3_mt8 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public ulong3_mt8 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public ulong3_mt8 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public ulong3_mt8 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly ulong3_mt8 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly ulong3_mt8 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public ulong3_mt8 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public ulong3_mt8 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly ulong3_mt8 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly ulong3_mt8 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public ulong3_mt8 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public ulong3_mt8 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly ulong3_mt8 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly ulong3_mt8 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public ulong3_mt8 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public ulong3_mt8 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public ulong3_mt8 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public ulong3_mt8 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly ulong3_mt8 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly ulong3_mt8 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly ulong3_mt8 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly ulong3_mt8 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly ulong3_mt8 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly ulong3_mt8 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly ulong3_mt8 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly ulong3_mt8 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly ulong3_mt8 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly ulong3_mt8 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly ulong3_mt8 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly ulong3_mt8 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // ulong4_mt8

#region ulong4_mt16

public partial struct ulong4_mt16 
{
    public readonly ulong3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt16 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt16 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt16 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly ulong3_mt16 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly ulong3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly ulong3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public ulong3_mt16 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public ulong3_mt16 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public ulong3_mt16 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public ulong3_mt16 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly ulong3_mt16 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly ulong3_mt16 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public ulong3_mt16 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public ulong3_mt16 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly ulong3_mt16 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly ulong3_mt16 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public ulong3_mt16 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public ulong3_mt16 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly ulong3_mt16 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly ulong3_mt16 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public ulong3_mt16 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public ulong3_mt16 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public ulong3_mt16 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public ulong3_mt16 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly ulong3_mt16 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly ulong3_mt16 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly ulong3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly ulong3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public ulong3_mt16 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public ulong3_mt16 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public ulong3_mt16 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public ulong3_mt16 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly ulong3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt16 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly ulong3_mt16 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly ulong3_mt16 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly ulong3_mt16 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public ulong3_mt16 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public ulong3_mt16 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly ulong3_mt16 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt16 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt16 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly ulong3_mt16 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public ulong3_mt16 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public ulong3_mt16 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public ulong3_mt16 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public ulong3_mt16 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly ulong3_mt16 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly ulong3_mt16 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public ulong3_mt16 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public ulong3_mt16 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly ulong3_mt16 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly ulong3_mt16 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly ulong3_mt16 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly ulong3_mt16 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public ulong3_mt16 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public ulong3_mt16 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly ulong3_mt16 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly ulong3_mt16 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public ulong3_mt16 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public ulong3_mt16 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public ulong3_mt16 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public ulong3_mt16 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly ulong3_mt16 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt16 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt16 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly ulong3_mt16 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public ulong3_mt16 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public ulong3_mt16 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly ulong3_mt16 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt16 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt16 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt16 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt16 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly ulong3_mt16 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly ulong3_mt16 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly ulong3_mt16 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public ulong3_mt16 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public ulong3_mt16 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public ulong3_mt16 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public ulong3_mt16 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly ulong3_mt16 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly ulong3_mt16 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly ulong3_mt16 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly ulong3_mt16 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly ulong3_mt16 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly ulong3_mt16 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public ulong3_mt16 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public ulong3_mt16 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public ulong3_mt16 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public ulong3_mt16 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly ulong3_mt16 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly ulong3_mt16 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public ulong3_mt16 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public ulong3_mt16 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly ulong3_mt16 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly ulong3_mt16 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public ulong3_mt16 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public ulong3_mt16 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly ulong3_mt16 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly ulong3_mt16 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public ulong3_mt16 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public ulong3_mt16 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public ulong3_mt16 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public ulong3_mt16 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly ulong3_mt16 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly ulong3_mt16 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly ulong3_mt16 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly ulong3_mt16 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly ulong3_mt16 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly ulong3_mt16 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly ulong3_mt16 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly ulong3_mt16 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly ulong3_mt16 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly ulong3_mt16 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly ulong3_mt16 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly ulong3_mt16 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // ulong4_mt16

#region ulong4_mt32

public partial struct ulong4_mt32 
{
    public readonly ulong3_mt32 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt32 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt32 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt32 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt32 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt32 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt32 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly ulong3_mt32 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly ulong3_mt32 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt32 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt32 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly ulong3_mt32 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public ulong3_mt32 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public ulong3_mt32 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public ulong3_mt32 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public ulong3_mt32 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly ulong3_mt32 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly ulong3_mt32 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public ulong3_mt32 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public ulong3_mt32 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly ulong3_mt32 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly ulong3_mt32 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public ulong3_mt32 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public ulong3_mt32 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly ulong3_mt32 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly ulong3_mt32 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public ulong3_mt32 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public ulong3_mt32 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public ulong3_mt32 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public ulong3_mt32 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly ulong3_mt32 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly ulong3_mt32 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly ulong3_mt32 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt32 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt32 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly ulong3_mt32 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public ulong3_mt32 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public ulong3_mt32 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public ulong3_mt32 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public ulong3_mt32 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly ulong3_mt32 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt32 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt32 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt32 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt32 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly ulong3_mt32 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly ulong3_mt32 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly ulong3_mt32 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public ulong3_mt32 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public ulong3_mt32 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly ulong3_mt32 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt32 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt32 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly ulong3_mt32 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public ulong3_mt32 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public ulong3_mt32 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public ulong3_mt32 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public ulong3_mt32 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly ulong3_mt32 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly ulong3_mt32 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public ulong3_mt32 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public ulong3_mt32 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly ulong3_mt32 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly ulong3_mt32 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly ulong3_mt32 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly ulong3_mt32 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public ulong3_mt32 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public ulong3_mt32 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly ulong3_mt32 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly ulong3_mt32 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public ulong3_mt32 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public ulong3_mt32 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public ulong3_mt32 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public ulong3_mt32 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly ulong3_mt32 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt32 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt32 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly ulong3_mt32 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public ulong3_mt32 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public ulong3_mt32 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly ulong3_mt32 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt32 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt32 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt32 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt32 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly ulong3_mt32 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly ulong3_mt32 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly ulong3_mt32 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public ulong3_mt32 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public ulong3_mt32 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public ulong3_mt32 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public ulong3_mt32 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly ulong3_mt32 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly ulong3_mt32 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly ulong3_mt32 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly ulong3_mt32 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly ulong3_mt32 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly ulong3_mt32 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public ulong3_mt32 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public ulong3_mt32 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public ulong3_mt32 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public ulong3_mt32 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly ulong3_mt32 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly ulong3_mt32 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public ulong3_mt32 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public ulong3_mt32 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly ulong3_mt32 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly ulong3_mt32 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public ulong3_mt32 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public ulong3_mt32 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly ulong3_mt32 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly ulong3_mt32 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public ulong3_mt32 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public ulong3_mt32 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public ulong3_mt32 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public ulong3_mt32 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly ulong3_mt32 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly ulong3_mt32 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly ulong3_mt32 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly ulong3_mt32 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly ulong3_mt32 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly ulong3_mt32 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly ulong3_mt32 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly ulong3_mt32 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly ulong3_mt32 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly ulong3_mt32 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly ulong3_mt32 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly ulong3_mt32 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // ulong4_mt32

#region b32v4_mt4

public partial struct b32v4_mt4 
{
    public readonly b32v3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt4 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt4 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt4 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b32v3_mt4 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b32v3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b32v3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b32v3_mt4 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b32v3_mt4 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b32v3_mt4 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public b32v3_mt4 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly b32v3_mt4 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b32v3_mt4 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b32v3_mt4 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public b32v3_mt4 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly b32v3_mt4 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b32v3_mt4 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public b32v3_mt4 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public b32v3_mt4 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly b32v3_mt4 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly b32v3_mt4 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public b32v3_mt4 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b32v3_mt4 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b32v3_mt4 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public b32v3_mt4 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly b32v3_mt4 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b32v3_mt4 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b32v3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b32v3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b32v3_mt4 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b32v3_mt4 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b32v3_mt4 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public b32v3_mt4 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly b32v3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt4 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b32v3_mt4 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b32v3_mt4 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly b32v3_mt4 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public b32v3_mt4 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public b32v3_mt4 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly b32v3_mt4 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt4 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt4 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b32v3_mt4 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public b32v3_mt4 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b32v3_mt4 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b32v3_mt4 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public b32v3_mt4 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly b32v3_mt4 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly b32v3_mt4 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public b32v3_mt4 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public b32v3_mt4 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly b32v3_mt4 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b32v3_mt4 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b32v3_mt4 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b32v3_mt4 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b32v3_mt4 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public b32v3_mt4 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly b32v3_mt4 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b32v3_mt4 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b32v3_mt4 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b32v3_mt4 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b32v3_mt4 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public b32v3_mt4 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly b32v3_mt4 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt4 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt4 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b32v3_mt4 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public b32v3_mt4 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public b32v3_mt4 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly b32v3_mt4 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt4 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt4 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt4 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt4 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b32v3_mt4 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b32v3_mt4 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly b32v3_mt4 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public b32v3_mt4 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b32v3_mt4 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b32v3_mt4 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public b32v3_mt4 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly b32v3_mt4 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b32v3_mt4 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b32v3_mt4 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b32v3_mt4 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b32v3_mt4 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly b32v3_mt4 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public b32v3_mt4 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b32v3_mt4 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b32v3_mt4 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public b32v3_mt4 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly b32v3_mt4 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly b32v3_mt4 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public b32v3_mt4 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public b32v3_mt4 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly b32v3_mt4 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly b32v3_mt4 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public b32v3_mt4 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public b32v3_mt4 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly b32v3_mt4 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly b32v3_mt4 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public b32v3_mt4 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b32v3_mt4 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b32v3_mt4 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public b32v3_mt4 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly b32v3_mt4 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b32v3_mt4 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b32v3_mt4 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b32v3_mt4 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b32v3_mt4 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b32v3_mt4 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b32v3_mt4 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b32v3_mt4 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b32v3_mt4 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b32v3_mt4 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b32v3_mt4 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly b32v3_mt4 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // b32v4_mt4

#region b32v4_mt8

public partial struct b32v4_mt8 
{
    public readonly b32v3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt8 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt8 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt8 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b32v3_mt8 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b32v3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b32v3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b32v3_mt8 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b32v3_mt8 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b32v3_mt8 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public b32v3_mt8 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly b32v3_mt8 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b32v3_mt8 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b32v3_mt8 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public b32v3_mt8 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly b32v3_mt8 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b32v3_mt8 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public b32v3_mt8 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public b32v3_mt8 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly b32v3_mt8 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly b32v3_mt8 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public b32v3_mt8 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b32v3_mt8 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b32v3_mt8 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public b32v3_mt8 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly b32v3_mt8 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b32v3_mt8 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b32v3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b32v3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b32v3_mt8 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b32v3_mt8 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b32v3_mt8 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public b32v3_mt8 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly b32v3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt8 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b32v3_mt8 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b32v3_mt8 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly b32v3_mt8 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public b32v3_mt8 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public b32v3_mt8 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly b32v3_mt8 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt8 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt8 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b32v3_mt8 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public b32v3_mt8 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b32v3_mt8 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b32v3_mt8 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public b32v3_mt8 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly b32v3_mt8 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly b32v3_mt8 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public b32v3_mt8 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public b32v3_mt8 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly b32v3_mt8 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b32v3_mt8 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b32v3_mt8 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b32v3_mt8 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b32v3_mt8 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public b32v3_mt8 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly b32v3_mt8 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b32v3_mt8 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b32v3_mt8 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b32v3_mt8 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b32v3_mt8 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public b32v3_mt8 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly b32v3_mt8 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt8 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt8 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b32v3_mt8 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public b32v3_mt8 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public b32v3_mt8 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly b32v3_mt8 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt8 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt8 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt8 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt8 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b32v3_mt8 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b32v3_mt8 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly b32v3_mt8 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public b32v3_mt8 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b32v3_mt8 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b32v3_mt8 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public b32v3_mt8 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly b32v3_mt8 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b32v3_mt8 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b32v3_mt8 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b32v3_mt8 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b32v3_mt8 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly b32v3_mt8 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public b32v3_mt8 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b32v3_mt8 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b32v3_mt8 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public b32v3_mt8 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly b32v3_mt8 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly b32v3_mt8 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public b32v3_mt8 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public b32v3_mt8 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly b32v3_mt8 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly b32v3_mt8 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public b32v3_mt8 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public b32v3_mt8 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly b32v3_mt8 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly b32v3_mt8 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public b32v3_mt8 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b32v3_mt8 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b32v3_mt8 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public b32v3_mt8 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly b32v3_mt8 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b32v3_mt8 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b32v3_mt8 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b32v3_mt8 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b32v3_mt8 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b32v3_mt8 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b32v3_mt8 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b32v3_mt8 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b32v3_mt8 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b32v3_mt8 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b32v3_mt8 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly b32v3_mt8 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // b32v4_mt8

#region b32v4_mt16

public partial struct b32v4_mt16 
{
    public readonly b32v3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt16 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt16 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt16 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b32v3_mt16 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b32v3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b32v3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b32v3_mt16 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b32v3_mt16 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b32v3_mt16 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public b32v3_mt16 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly b32v3_mt16 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b32v3_mt16 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b32v3_mt16 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public b32v3_mt16 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly b32v3_mt16 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b32v3_mt16 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public b32v3_mt16 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public b32v3_mt16 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly b32v3_mt16 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly b32v3_mt16 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public b32v3_mt16 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b32v3_mt16 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b32v3_mt16 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public b32v3_mt16 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly b32v3_mt16 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b32v3_mt16 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b32v3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b32v3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b32v3_mt16 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b32v3_mt16 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b32v3_mt16 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public b32v3_mt16 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly b32v3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt16 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b32v3_mt16 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b32v3_mt16 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly b32v3_mt16 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public b32v3_mt16 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public b32v3_mt16 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly b32v3_mt16 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt16 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt16 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b32v3_mt16 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public b32v3_mt16 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b32v3_mt16 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b32v3_mt16 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public b32v3_mt16 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly b32v3_mt16 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly b32v3_mt16 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public b32v3_mt16 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public b32v3_mt16 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly b32v3_mt16 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b32v3_mt16 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b32v3_mt16 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b32v3_mt16 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b32v3_mt16 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public b32v3_mt16 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly b32v3_mt16 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b32v3_mt16 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b32v3_mt16 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b32v3_mt16 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b32v3_mt16 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public b32v3_mt16 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly b32v3_mt16 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt16 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt16 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b32v3_mt16 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public b32v3_mt16 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public b32v3_mt16 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly b32v3_mt16 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt16 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt16 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt16 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt16 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b32v3_mt16 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b32v3_mt16 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly b32v3_mt16 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public b32v3_mt16 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b32v3_mt16 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b32v3_mt16 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public b32v3_mt16 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly b32v3_mt16 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b32v3_mt16 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b32v3_mt16 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b32v3_mt16 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b32v3_mt16 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly b32v3_mt16 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public b32v3_mt16 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b32v3_mt16 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b32v3_mt16 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public b32v3_mt16 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly b32v3_mt16 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly b32v3_mt16 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public b32v3_mt16 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public b32v3_mt16 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly b32v3_mt16 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly b32v3_mt16 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public b32v3_mt16 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public b32v3_mt16 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly b32v3_mt16 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly b32v3_mt16 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public b32v3_mt16 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b32v3_mt16 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b32v3_mt16 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public b32v3_mt16 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly b32v3_mt16 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b32v3_mt16 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b32v3_mt16 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b32v3_mt16 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b32v3_mt16 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b32v3_mt16 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b32v3_mt16 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b32v3_mt16 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b32v3_mt16 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b32v3_mt16 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b32v3_mt16 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly b32v3_mt16 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // b32v4_mt16

#region b32v4_mt32

public partial struct b32v4_mt32 
{
    public readonly b32v3_mt32 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt32 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt32 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt32 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt32 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt32 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt32 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b32v3_mt32 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b32v3_mt32 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt32 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt32 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b32v3_mt32 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b32v3_mt32 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b32v3_mt32 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b32v3_mt32 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public b32v3_mt32 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly b32v3_mt32 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b32v3_mt32 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b32v3_mt32 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public b32v3_mt32 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly b32v3_mt32 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b32v3_mt32 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public b32v3_mt32 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public b32v3_mt32 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly b32v3_mt32 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly b32v3_mt32 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public b32v3_mt32 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b32v3_mt32 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b32v3_mt32 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public b32v3_mt32 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly b32v3_mt32 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b32v3_mt32 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b32v3_mt32 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt32 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt32 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b32v3_mt32 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b32v3_mt32 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b32v3_mt32 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b32v3_mt32 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public b32v3_mt32 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly b32v3_mt32 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt32 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt32 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt32 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt32 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b32v3_mt32 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b32v3_mt32 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly b32v3_mt32 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public b32v3_mt32 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public b32v3_mt32 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly b32v3_mt32 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt32 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt32 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b32v3_mt32 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public b32v3_mt32 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b32v3_mt32 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b32v3_mt32 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public b32v3_mt32 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly b32v3_mt32 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly b32v3_mt32 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public b32v3_mt32 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public b32v3_mt32 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly b32v3_mt32 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b32v3_mt32 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b32v3_mt32 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b32v3_mt32 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b32v3_mt32 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public b32v3_mt32 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly b32v3_mt32 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b32v3_mt32 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b32v3_mt32 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b32v3_mt32 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b32v3_mt32 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public b32v3_mt32 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly b32v3_mt32 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt32 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt32 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b32v3_mt32 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public b32v3_mt32 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public b32v3_mt32 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly b32v3_mt32 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt32 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt32 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt32 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt32 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b32v3_mt32 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b32v3_mt32 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly b32v3_mt32 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public b32v3_mt32 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b32v3_mt32 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b32v3_mt32 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public b32v3_mt32 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly b32v3_mt32 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b32v3_mt32 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b32v3_mt32 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b32v3_mt32 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b32v3_mt32 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly b32v3_mt32 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public b32v3_mt32 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b32v3_mt32 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b32v3_mt32 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public b32v3_mt32 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly b32v3_mt32 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly b32v3_mt32 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public b32v3_mt32 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public b32v3_mt32 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly b32v3_mt32 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly b32v3_mt32 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public b32v3_mt32 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public b32v3_mt32 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly b32v3_mt32 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly b32v3_mt32 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public b32v3_mt32 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b32v3_mt32 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b32v3_mt32 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public b32v3_mt32 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly b32v3_mt32 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b32v3_mt32 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b32v3_mt32 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b32v3_mt32 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b32v3_mt32 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b32v3_mt32 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b32v3_mt32 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b32v3_mt32 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b32v3_mt32 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b32v3_mt32 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b32v3_mt32 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly b32v3_mt32 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // b32v4_mt32

#region b64v4_mt4

public partial struct b64v4_mt4 
{
    public readonly b64v3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt4 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt4 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt4 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b64v3_mt4 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b64v3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b64v3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b64v3_mt4 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b64v3_mt4 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b64v3_mt4 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public b64v3_mt4 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly b64v3_mt4 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b64v3_mt4 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b64v3_mt4 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public b64v3_mt4 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly b64v3_mt4 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b64v3_mt4 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public b64v3_mt4 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public b64v3_mt4 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly b64v3_mt4 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly b64v3_mt4 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public b64v3_mt4 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b64v3_mt4 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b64v3_mt4 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public b64v3_mt4 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly b64v3_mt4 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b64v3_mt4 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b64v3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b64v3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b64v3_mt4 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b64v3_mt4 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b64v3_mt4 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public b64v3_mt4 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly b64v3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt4 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b64v3_mt4 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b64v3_mt4 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly b64v3_mt4 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public b64v3_mt4 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public b64v3_mt4 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly b64v3_mt4 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt4 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt4 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b64v3_mt4 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public b64v3_mt4 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b64v3_mt4 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b64v3_mt4 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public b64v3_mt4 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly b64v3_mt4 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly b64v3_mt4 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public b64v3_mt4 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public b64v3_mt4 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly b64v3_mt4 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b64v3_mt4 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b64v3_mt4 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b64v3_mt4 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b64v3_mt4 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public b64v3_mt4 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly b64v3_mt4 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b64v3_mt4 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b64v3_mt4 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b64v3_mt4 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b64v3_mt4 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public b64v3_mt4 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly b64v3_mt4 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt4 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt4 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b64v3_mt4 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public b64v3_mt4 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public b64v3_mt4 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly b64v3_mt4 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt4 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt4 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt4 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt4 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b64v3_mt4 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b64v3_mt4 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly b64v3_mt4 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public b64v3_mt4 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b64v3_mt4 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b64v3_mt4 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public b64v3_mt4 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly b64v3_mt4 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b64v3_mt4 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b64v3_mt4 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b64v3_mt4 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b64v3_mt4 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly b64v3_mt4 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public b64v3_mt4 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b64v3_mt4 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b64v3_mt4 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public b64v3_mt4 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly b64v3_mt4 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly b64v3_mt4 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public b64v3_mt4 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public b64v3_mt4 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly b64v3_mt4 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly b64v3_mt4 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public b64v3_mt4 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public b64v3_mt4 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly b64v3_mt4 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly b64v3_mt4 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public b64v3_mt4 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b64v3_mt4 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b64v3_mt4 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public b64v3_mt4 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly b64v3_mt4 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b64v3_mt4 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b64v3_mt4 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b64v3_mt4 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b64v3_mt4 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b64v3_mt4 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b64v3_mt4 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b64v3_mt4 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b64v3_mt4 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b64v3_mt4 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b64v3_mt4 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly b64v3_mt4 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // b64v4_mt4

#region b64v4_mt8

public partial struct b64v4_mt8 
{
    public readonly b64v3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt8 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt8 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt8 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b64v3_mt8 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b64v3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b64v3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b64v3_mt8 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b64v3_mt8 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b64v3_mt8 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public b64v3_mt8 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly b64v3_mt8 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b64v3_mt8 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b64v3_mt8 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public b64v3_mt8 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly b64v3_mt8 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b64v3_mt8 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public b64v3_mt8 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public b64v3_mt8 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly b64v3_mt8 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly b64v3_mt8 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public b64v3_mt8 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b64v3_mt8 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b64v3_mt8 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public b64v3_mt8 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly b64v3_mt8 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b64v3_mt8 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b64v3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b64v3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b64v3_mt8 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b64v3_mt8 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b64v3_mt8 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public b64v3_mt8 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly b64v3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt8 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b64v3_mt8 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b64v3_mt8 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly b64v3_mt8 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public b64v3_mt8 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public b64v3_mt8 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly b64v3_mt8 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt8 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt8 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b64v3_mt8 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public b64v3_mt8 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b64v3_mt8 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b64v3_mt8 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public b64v3_mt8 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly b64v3_mt8 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly b64v3_mt8 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public b64v3_mt8 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public b64v3_mt8 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly b64v3_mt8 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b64v3_mt8 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b64v3_mt8 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b64v3_mt8 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b64v3_mt8 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public b64v3_mt8 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly b64v3_mt8 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b64v3_mt8 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b64v3_mt8 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b64v3_mt8 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b64v3_mt8 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public b64v3_mt8 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly b64v3_mt8 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt8 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt8 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b64v3_mt8 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public b64v3_mt8 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public b64v3_mt8 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly b64v3_mt8 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt8 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt8 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt8 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt8 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b64v3_mt8 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b64v3_mt8 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly b64v3_mt8 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public b64v3_mt8 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b64v3_mt8 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b64v3_mt8 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public b64v3_mt8 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly b64v3_mt8 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b64v3_mt8 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b64v3_mt8 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b64v3_mt8 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b64v3_mt8 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly b64v3_mt8 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public b64v3_mt8 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b64v3_mt8 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b64v3_mt8 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public b64v3_mt8 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly b64v3_mt8 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly b64v3_mt8 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public b64v3_mt8 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public b64v3_mt8 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly b64v3_mt8 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly b64v3_mt8 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public b64v3_mt8 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public b64v3_mt8 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly b64v3_mt8 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly b64v3_mt8 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public b64v3_mt8 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b64v3_mt8 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b64v3_mt8 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public b64v3_mt8 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly b64v3_mt8 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b64v3_mt8 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b64v3_mt8 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b64v3_mt8 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b64v3_mt8 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b64v3_mt8 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b64v3_mt8 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b64v3_mt8 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b64v3_mt8 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b64v3_mt8 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b64v3_mt8 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly b64v3_mt8 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // b64v4_mt8

#region b64v4_mt16

public partial struct b64v4_mt16 
{
    public readonly b64v3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt16 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt16 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt16 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b64v3_mt16 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b64v3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b64v3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b64v3_mt16 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b64v3_mt16 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b64v3_mt16 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public b64v3_mt16 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly b64v3_mt16 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b64v3_mt16 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b64v3_mt16 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public b64v3_mt16 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly b64v3_mt16 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b64v3_mt16 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public b64v3_mt16 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public b64v3_mt16 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly b64v3_mt16 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly b64v3_mt16 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public b64v3_mt16 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b64v3_mt16 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b64v3_mt16 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public b64v3_mt16 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly b64v3_mt16 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b64v3_mt16 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b64v3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b64v3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b64v3_mt16 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b64v3_mt16 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b64v3_mt16 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public b64v3_mt16 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly b64v3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt16 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b64v3_mt16 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b64v3_mt16 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly b64v3_mt16 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public b64v3_mt16 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public b64v3_mt16 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly b64v3_mt16 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt16 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt16 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b64v3_mt16 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public b64v3_mt16 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b64v3_mt16 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b64v3_mt16 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public b64v3_mt16 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly b64v3_mt16 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly b64v3_mt16 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public b64v3_mt16 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public b64v3_mt16 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly b64v3_mt16 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b64v3_mt16 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b64v3_mt16 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b64v3_mt16 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b64v3_mt16 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public b64v3_mt16 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly b64v3_mt16 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b64v3_mt16 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b64v3_mt16 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b64v3_mt16 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b64v3_mt16 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public b64v3_mt16 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly b64v3_mt16 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt16 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt16 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b64v3_mt16 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public b64v3_mt16 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public b64v3_mt16 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly b64v3_mt16 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt16 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt16 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt16 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt16 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b64v3_mt16 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b64v3_mt16 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly b64v3_mt16 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public b64v3_mt16 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b64v3_mt16 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b64v3_mt16 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public b64v3_mt16 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly b64v3_mt16 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b64v3_mt16 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b64v3_mt16 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b64v3_mt16 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b64v3_mt16 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly b64v3_mt16 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public b64v3_mt16 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b64v3_mt16 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b64v3_mt16 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public b64v3_mt16 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly b64v3_mt16 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly b64v3_mt16 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public b64v3_mt16 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public b64v3_mt16 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly b64v3_mt16 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly b64v3_mt16 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public b64v3_mt16 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public b64v3_mt16 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly b64v3_mt16 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly b64v3_mt16 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public b64v3_mt16 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b64v3_mt16 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b64v3_mt16 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public b64v3_mt16 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly b64v3_mt16 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b64v3_mt16 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b64v3_mt16 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b64v3_mt16 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b64v3_mt16 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b64v3_mt16 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b64v3_mt16 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b64v3_mt16 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b64v3_mt16 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b64v3_mt16 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b64v3_mt16 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly b64v3_mt16 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // b64v4_mt16

#region b64v4_mt32

public partial struct b64v4_mt32 
{
    public readonly b64v3_mt32 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt32 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt32 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt32 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt32 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt32 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt32 xxw
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b64v3_mt32 rra
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, w);
    }
    public readonly b64v3_mt32 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt32 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt32 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b64v3_mt32 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b64v3_mt32 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b64v3_mt32 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; z = value.z; }
    }
    public b64v3_mt32 xyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public b64v3_mt32 rga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; w = value.z; }
    }
    public readonly b64v3_mt32 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b64v3_mt32 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b64v3_mt32 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public b64v3_mt32 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; y = value.z; }
    }
    public readonly b64v3_mt32 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b64v3_mt32 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public b64v3_mt32 xzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public b64v3_mt32 rba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; w = value.z; }
    }
    public readonly b64v3_mt32 xwx
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public readonly b64v3_mt32 rar
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, x);
    }
    public b64v3_mt32 xwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b64v3_mt32 rag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; y = value.z; }
    }
    public b64v3_mt32 xwz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public b64v3_mt32 rab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; z = value.z; }
    }
    public readonly b64v3_mt32 xww
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b64v3_mt32 raa
    {
        [MethodImpl(256 | 512)]
        get => new(x, w, w);
    }
    public readonly b64v3_mt32 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt32 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt32 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b64v3_mt32 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b64v3_mt32 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b64v3_mt32 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; z = value.z; }
    }
    public b64v3_mt32 yxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public b64v3_mt32 gra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; w = value.z; }
    }
    public readonly b64v3_mt32 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt32 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt32 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt32 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt32 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b64v3_mt32 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b64v3_mt32 yyw
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public readonly b64v3_mt32 gga
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, w);
    }
    public b64v3_mt32 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public b64v3_mt32 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; x = value.z; }
    }
    public readonly b64v3_mt32 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt32 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt32 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b64v3_mt32 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public b64v3_mt32 yzw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b64v3_mt32 gba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; w = value.z; }
    }
    public b64v3_mt32 ywx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public b64v3_mt32 gar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; x = value.z; }
    }
    public readonly b64v3_mt32 ywy
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public readonly b64v3_mt32 gag
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, y);
    }
    public b64v3_mt32 ywz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public b64v3_mt32 gab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; z = value.z; }
    }
    public readonly b64v3_mt32 yww
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b64v3_mt32 gaa
    {
        [MethodImpl(256 | 512)]
        get => new(y, w, w);
    }
    public readonly b64v3_mt32 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b64v3_mt32 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b64v3_mt32 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public b64v3_mt32 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; y = value.z; }
    }
    public readonly b64v3_mt32 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b64v3_mt32 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b64v3_mt32 zxw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b64v3_mt32 bra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; w = value.z; }
    }
    public b64v3_mt32 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public b64v3_mt32 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; x = value.z; }
    }
    public readonly b64v3_mt32 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt32 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt32 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b64v3_mt32 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public b64v3_mt32 zyw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public b64v3_mt32 bga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; w = value.z; }
    }
    public readonly b64v3_mt32 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt32 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt32 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt32 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt32 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b64v3_mt32 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b64v3_mt32 zzw
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public readonly b64v3_mt32 bba
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, w);
    }
    public b64v3_mt32 zwx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b64v3_mt32 bar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; x = value.z; }
    }
    public b64v3_mt32 zwy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public b64v3_mt32 bag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; y = value.z; }
    }
    public readonly b64v3_mt32 zwz
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b64v3_mt32 bab
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, z);
    }
    public readonly b64v3_mt32 zww
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b64v3_mt32 baa
    {
        [MethodImpl(256 | 512)]
        get => new(z, w, w);
    }
    public readonly b64v3_mt32 wxx
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public readonly b64v3_mt32 arr
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, x);
    }
    public b64v3_mt32 wxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b64v3_mt32 arg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; y = value.z; }
    }
    public b64v3_mt32 wxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public b64v3_mt32 arb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; z = value.z; }
    }
    public readonly b64v3_mt32 wxw
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public readonly b64v3_mt32 ara
    {
        [MethodImpl(256 | 512)]
        get => new(w, x, w);
    }
    public b64v3_mt32 wyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public b64v3_mt32 agr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; x = value.z; }
    }
    public readonly b64v3_mt32 wyy
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public readonly b64v3_mt32 agg
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, y);
    }
    public b64v3_mt32 wyz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public b64v3_mt32 agb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; z = value.z; }
    }
    public readonly b64v3_mt32 wyw
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public readonly b64v3_mt32 aga
    {
        [MethodImpl(256 | 512)]
        get => new(w, y, w);
    }
    public b64v3_mt32 wzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b64v3_mt32 abr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; x = value.z; }
    }
    public b64v3_mt32 wzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public b64v3_mt32 abg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; y = value.z; }
    }
    public readonly b64v3_mt32 wzz
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b64v3_mt32 abb
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, z);
    }
    public readonly b64v3_mt32 wzw
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b64v3_mt32 aba
    {
        [MethodImpl(256 | 512)]
        get => new(w, z, w);
    }
    public readonly b64v3_mt32 wwx
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b64v3_mt32 aar
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, x);
    }
    public readonly b64v3_mt32 wwy
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b64v3_mt32 aag
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, y);
    }
    public readonly b64v3_mt32 wwz
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b64v3_mt32 aab
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, z);
    }
    public readonly b64v3_mt32 www
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
    public readonly b64v3_mt32 aaa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w, w);
    }
}

#endregion // b64v4_mt32
