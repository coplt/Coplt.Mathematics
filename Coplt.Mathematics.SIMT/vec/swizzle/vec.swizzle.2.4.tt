<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;
<#
    var sizes = new[] { 4, 8, 16, 32 };
    int[] a01 = [0,1];
    var car_pd_2_3 = (
        from a in a01.AsParallel().AsOrdered()
        from b in a01.AsParallel().AsOrdered()
        from c in a01.AsParallel().AsOrdered()
        from d in a01.AsParallel().AsOrdered()
        select (a, b, c, d)
        ).ToList();
    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        foreach (var size in sizes)
        {
            var typeName = $"{typ.name}2_mt{size}";
            var retTypeName = $"{typ.name}4_mt{size}";
#>

#region <#= typeName #>

public partial struct <#= typeName #> 
{
<#
            foreach (var (a, b, c, d) in car_pd_2_3)
            {
                var xyzw = $"{Typ.xyzw[a]}{Typ.xyzw[b]}{Typ.xyzw[c]}{Typ.xyzw[d]}";
                var rgba = $"{Typ.rgba[a]}{Typ.rgba[b]}{Typ.rgba[c]}{Typ.rgba[d]}";
                for (var t = 0; t < 2; t++)
                {
#>
    public readonly <#= retTypeName #> <#= t == 0 ? xyzw : rgba #>
    {
        [MethodImpl(256 | 512)]
        get => new(<#= Typ.xyzw[a] #>, <#= Typ.xyzw[b] #>, <#= Typ.xyzw[c] #>, <#= Typ.xyzw[d] #>);
    }
<#
                }
            }
#>
}

#endregion // <#= typeName #>
<#
        }
    }
#>
