<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.SIMT;
<#
    var sizes = new[] { 4, 8, 16, 32 };
    int[] a012 = [0,1,2];
    var car_pd_3 = (
        from a in a012.AsParallel().AsOrdered()
        from b in a012.AsParallel().AsOrdered()
        from c in a012.AsParallel().AsOrdered()
        select (a, b, c)
        ).ToList();
    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        foreach (var size in sizes)
        {
            var typeName = $"{typ.name}3_mt{size}";
#>

#region <#= typeName #>

public partial struct <#= typeName #> 
{
<#
            foreach (var tuple in car_pd_3)
            {
                var (a, b, c) = tuple;
                int[] inv = [0,0,0];
                inv[b] = 1;
                inv[c] = 2;

                var xyzw = $"{Typ.xyzw[a]}{Typ.xyzw[b]}{Typ.xyzw[c]}";
                var rgba = $"{Typ.rgba[a]}{Typ.rgba[b]}{Typ.rgba[c]}";
                var ordered = a == 0 && b == 1 && c == 2;
                var no_overlap = a != b && b != c && c != a;
                for (var t = 0; t < 2; t++)
                {
#>
    public <#= no_overlap || ordered ? "" : "readonly " #><#= typeName #> <#= t == 0 ? xyzw : rgba #>
    {
<#
                    if (ordered)
                    {
#>
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
<#
                    }
                    else
                    {
#>
        [MethodImpl(256 | 512)]
        <#= no_overlap ? "readonly " : "" #>get => new(<#= Typ.xyzw[a] #>, <#= Typ.xyzw[b] #>, <#= Typ.xyzw[c] #>);
<#
                        if (no_overlap)
                        {
#>
        [MethodImpl(256 | 512)]
        set => this = value.<#= Typ.xyzw[inv[0]] #><#= Typ.xyzw[inv[1]] #><#= Typ.xyzw[inv[2]] #>;
<#
                        }
                    }
#>
    }
<#
                }
            }
#>
}

#endregion // <#= typeName #>
<#
        }
    }
#>
