// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region float4_mt4

public partial struct float4_mt4 
{
    public readonly float2_mt4 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly float2_mt4 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public float2_mt4 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt4 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt4 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt4 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt4 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public float2_mt4 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public float2_mt4 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public float2_mt4 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly float2_mt4 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly float2_mt4 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public float2_mt4 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt4 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt4 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public float2_mt4 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public float2_mt4 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt4 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt4 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public float2_mt4 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly float2_mt4 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly float2_mt4 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public float2_mt4 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public float2_mt4 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public float2_mt4 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public float2_mt4 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public float2_mt4 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public float2_mt4 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public float2_mt4 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public float2_mt4 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly float2_mt4 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly float2_mt4 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // float4_mt4

#region float4_mt8

public partial struct float4_mt8 
{
    public readonly float2_mt8 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly float2_mt8 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public float2_mt8 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt8 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt8 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt8 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt8 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public float2_mt8 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public float2_mt8 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public float2_mt8 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly float2_mt8 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly float2_mt8 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public float2_mt8 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt8 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt8 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public float2_mt8 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public float2_mt8 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt8 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt8 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public float2_mt8 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly float2_mt8 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly float2_mt8 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public float2_mt8 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public float2_mt8 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public float2_mt8 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public float2_mt8 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public float2_mt8 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public float2_mt8 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public float2_mt8 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public float2_mt8 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly float2_mt8 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly float2_mt8 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // float4_mt8

#region float4_mt16

public partial struct float4_mt16 
{
    public readonly float2_mt16 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly float2_mt16 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public float2_mt16 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt16 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt16 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt16 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt16 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public float2_mt16 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public float2_mt16 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public float2_mt16 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly float2_mt16 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly float2_mt16 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public float2_mt16 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt16 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt16 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public float2_mt16 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public float2_mt16 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt16 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt16 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public float2_mt16 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly float2_mt16 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly float2_mt16 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public float2_mt16 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public float2_mt16 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public float2_mt16 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public float2_mt16 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public float2_mt16 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public float2_mt16 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public float2_mt16 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public float2_mt16 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly float2_mt16 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly float2_mt16 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // float4_mt16

#region float4_mt32

public partial struct float4_mt32 
{
    public readonly float2_mt32 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly float2_mt32 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public float2_mt32 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt32 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public float2_mt32 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt32 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public float2_mt32 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public float2_mt32 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public float2_mt32 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public float2_mt32 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly float2_mt32 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly float2_mt32 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public float2_mt32 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt32 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public float2_mt32 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public float2_mt32 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public float2_mt32 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt32 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public float2_mt32 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public float2_mt32 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly float2_mt32 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly float2_mt32 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public float2_mt32 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public float2_mt32 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public float2_mt32 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public float2_mt32 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public float2_mt32 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public float2_mt32 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public float2_mt32 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public float2_mt32 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly float2_mt32 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly float2_mt32 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // float4_mt32

#region double4_mt4

public partial struct double4_mt4 
{
    public readonly double2_mt4 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly double2_mt4 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public double2_mt4 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt4 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt4 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt4 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt4 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public double2_mt4 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public double2_mt4 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public double2_mt4 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly double2_mt4 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly double2_mt4 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public double2_mt4 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt4 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt4 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public double2_mt4 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public double2_mt4 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt4 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt4 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public double2_mt4 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly double2_mt4 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly double2_mt4 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public double2_mt4 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public double2_mt4 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public double2_mt4 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public double2_mt4 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public double2_mt4 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public double2_mt4 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public double2_mt4 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public double2_mt4 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly double2_mt4 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly double2_mt4 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // double4_mt4

#region double4_mt8

public partial struct double4_mt8 
{
    public readonly double2_mt8 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly double2_mt8 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public double2_mt8 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt8 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt8 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt8 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt8 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public double2_mt8 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public double2_mt8 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public double2_mt8 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly double2_mt8 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly double2_mt8 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public double2_mt8 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt8 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt8 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public double2_mt8 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public double2_mt8 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt8 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt8 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public double2_mt8 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly double2_mt8 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly double2_mt8 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public double2_mt8 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public double2_mt8 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public double2_mt8 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public double2_mt8 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public double2_mt8 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public double2_mt8 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public double2_mt8 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public double2_mt8 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly double2_mt8 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly double2_mt8 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // double4_mt8

#region double4_mt16

public partial struct double4_mt16 
{
    public readonly double2_mt16 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly double2_mt16 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public double2_mt16 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt16 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt16 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt16 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt16 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public double2_mt16 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public double2_mt16 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public double2_mt16 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly double2_mt16 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly double2_mt16 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public double2_mt16 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt16 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt16 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public double2_mt16 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public double2_mt16 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt16 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt16 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public double2_mt16 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly double2_mt16 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly double2_mt16 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public double2_mt16 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public double2_mt16 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public double2_mt16 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public double2_mt16 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public double2_mt16 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public double2_mt16 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public double2_mt16 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public double2_mt16 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly double2_mt16 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly double2_mt16 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // double4_mt16

#region double4_mt32

public partial struct double4_mt32 
{
    public readonly double2_mt32 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly double2_mt32 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public double2_mt32 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt32 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public double2_mt32 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt32 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public double2_mt32 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public double2_mt32 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public double2_mt32 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public double2_mt32 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly double2_mt32 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly double2_mt32 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public double2_mt32 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt32 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public double2_mt32 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public double2_mt32 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public double2_mt32 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt32 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public double2_mt32 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public double2_mt32 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly double2_mt32 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly double2_mt32 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public double2_mt32 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public double2_mt32 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public double2_mt32 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public double2_mt32 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public double2_mt32 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public double2_mt32 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public double2_mt32 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public double2_mt32 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly double2_mt32 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly double2_mt32 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // double4_mt32

#region int4_mt4

public partial struct int4_mt4 
{
    public readonly int2_mt4 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly int2_mt4 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public int2_mt4 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt4 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt4 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt4 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt4 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public int2_mt4 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public int2_mt4 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public int2_mt4 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly int2_mt4 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly int2_mt4 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public int2_mt4 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt4 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt4 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public int2_mt4 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public int2_mt4 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt4 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt4 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public int2_mt4 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly int2_mt4 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly int2_mt4 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public int2_mt4 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public int2_mt4 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public int2_mt4 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public int2_mt4 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public int2_mt4 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public int2_mt4 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public int2_mt4 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public int2_mt4 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly int2_mt4 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly int2_mt4 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // int4_mt4

#region int4_mt8

public partial struct int4_mt8 
{
    public readonly int2_mt8 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly int2_mt8 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public int2_mt8 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt8 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt8 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt8 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt8 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public int2_mt8 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public int2_mt8 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public int2_mt8 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly int2_mt8 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly int2_mt8 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public int2_mt8 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt8 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt8 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public int2_mt8 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public int2_mt8 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt8 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt8 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public int2_mt8 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly int2_mt8 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly int2_mt8 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public int2_mt8 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public int2_mt8 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public int2_mt8 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public int2_mt8 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public int2_mt8 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public int2_mt8 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public int2_mt8 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public int2_mt8 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly int2_mt8 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly int2_mt8 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // int4_mt8

#region int4_mt16

public partial struct int4_mt16 
{
    public readonly int2_mt16 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly int2_mt16 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public int2_mt16 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt16 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt16 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt16 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt16 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public int2_mt16 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public int2_mt16 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public int2_mt16 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly int2_mt16 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly int2_mt16 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public int2_mt16 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt16 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt16 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public int2_mt16 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public int2_mt16 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt16 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt16 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public int2_mt16 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly int2_mt16 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly int2_mt16 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public int2_mt16 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public int2_mt16 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public int2_mt16 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public int2_mt16 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public int2_mt16 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public int2_mt16 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public int2_mt16 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public int2_mt16 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly int2_mt16 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly int2_mt16 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // int4_mt16

#region int4_mt32

public partial struct int4_mt32 
{
    public readonly int2_mt32 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly int2_mt32 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public int2_mt32 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt32 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public int2_mt32 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt32 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public int2_mt32 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public int2_mt32 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public int2_mt32 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public int2_mt32 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly int2_mt32 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly int2_mt32 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public int2_mt32 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt32 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public int2_mt32 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public int2_mt32 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public int2_mt32 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt32 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public int2_mt32 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public int2_mt32 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly int2_mt32 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly int2_mt32 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public int2_mt32 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public int2_mt32 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public int2_mt32 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public int2_mt32 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public int2_mt32 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public int2_mt32 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public int2_mt32 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public int2_mt32 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly int2_mt32 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly int2_mt32 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // int4_mt32

#region uint4_mt4

public partial struct uint4_mt4 
{
    public readonly uint2_mt4 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly uint2_mt4 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public uint2_mt4 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt4 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt4 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt4 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt4 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public uint2_mt4 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public uint2_mt4 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public uint2_mt4 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly uint2_mt4 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly uint2_mt4 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public uint2_mt4 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt4 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt4 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public uint2_mt4 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public uint2_mt4 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt4 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt4 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public uint2_mt4 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly uint2_mt4 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly uint2_mt4 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public uint2_mt4 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public uint2_mt4 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public uint2_mt4 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public uint2_mt4 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public uint2_mt4 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public uint2_mt4 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public uint2_mt4 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public uint2_mt4 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly uint2_mt4 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly uint2_mt4 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // uint4_mt4

#region uint4_mt8

public partial struct uint4_mt8 
{
    public readonly uint2_mt8 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly uint2_mt8 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public uint2_mt8 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt8 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt8 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt8 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt8 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public uint2_mt8 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public uint2_mt8 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public uint2_mt8 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly uint2_mt8 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly uint2_mt8 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public uint2_mt8 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt8 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt8 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public uint2_mt8 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public uint2_mt8 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt8 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt8 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public uint2_mt8 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly uint2_mt8 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly uint2_mt8 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public uint2_mt8 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public uint2_mt8 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public uint2_mt8 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public uint2_mt8 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public uint2_mt8 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public uint2_mt8 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public uint2_mt8 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public uint2_mt8 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly uint2_mt8 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly uint2_mt8 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // uint4_mt8

#region uint4_mt16

public partial struct uint4_mt16 
{
    public readonly uint2_mt16 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly uint2_mt16 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public uint2_mt16 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt16 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt16 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt16 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt16 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public uint2_mt16 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public uint2_mt16 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public uint2_mt16 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly uint2_mt16 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly uint2_mt16 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public uint2_mt16 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt16 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt16 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public uint2_mt16 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public uint2_mt16 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt16 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt16 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public uint2_mt16 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly uint2_mt16 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly uint2_mt16 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public uint2_mt16 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public uint2_mt16 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public uint2_mt16 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public uint2_mt16 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public uint2_mt16 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public uint2_mt16 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public uint2_mt16 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public uint2_mt16 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly uint2_mt16 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly uint2_mt16 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // uint4_mt16

#region uint4_mt32

public partial struct uint4_mt32 
{
    public readonly uint2_mt32 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly uint2_mt32 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public uint2_mt32 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt32 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public uint2_mt32 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt32 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public uint2_mt32 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public uint2_mt32 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public uint2_mt32 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public uint2_mt32 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly uint2_mt32 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly uint2_mt32 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public uint2_mt32 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt32 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public uint2_mt32 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public uint2_mt32 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public uint2_mt32 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt32 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public uint2_mt32 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public uint2_mt32 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly uint2_mt32 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly uint2_mt32 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public uint2_mt32 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public uint2_mt32 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public uint2_mt32 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public uint2_mt32 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public uint2_mt32 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public uint2_mt32 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public uint2_mt32 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public uint2_mt32 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly uint2_mt32 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly uint2_mt32 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // uint4_mt32

#region long4_mt4

public partial struct long4_mt4 
{
    public readonly long2_mt4 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly long2_mt4 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public long2_mt4 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt4 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt4 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt4 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt4 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public long2_mt4 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public long2_mt4 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public long2_mt4 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly long2_mt4 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly long2_mt4 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public long2_mt4 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt4 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt4 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public long2_mt4 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public long2_mt4 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt4 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt4 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public long2_mt4 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly long2_mt4 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly long2_mt4 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public long2_mt4 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public long2_mt4 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public long2_mt4 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public long2_mt4 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public long2_mt4 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public long2_mt4 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public long2_mt4 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public long2_mt4 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly long2_mt4 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly long2_mt4 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // long4_mt4

#region long4_mt8

public partial struct long4_mt8 
{
    public readonly long2_mt8 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly long2_mt8 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public long2_mt8 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt8 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt8 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt8 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt8 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public long2_mt8 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public long2_mt8 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public long2_mt8 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly long2_mt8 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly long2_mt8 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public long2_mt8 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt8 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt8 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public long2_mt8 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public long2_mt8 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt8 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt8 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public long2_mt8 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly long2_mt8 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly long2_mt8 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public long2_mt8 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public long2_mt8 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public long2_mt8 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public long2_mt8 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public long2_mt8 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public long2_mt8 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public long2_mt8 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public long2_mt8 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly long2_mt8 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly long2_mt8 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // long4_mt8

#region long4_mt16

public partial struct long4_mt16 
{
    public readonly long2_mt16 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly long2_mt16 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public long2_mt16 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt16 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt16 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt16 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt16 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public long2_mt16 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public long2_mt16 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public long2_mt16 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly long2_mt16 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly long2_mt16 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public long2_mt16 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt16 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt16 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public long2_mt16 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public long2_mt16 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt16 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt16 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public long2_mt16 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly long2_mt16 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly long2_mt16 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public long2_mt16 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public long2_mt16 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public long2_mt16 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public long2_mt16 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public long2_mt16 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public long2_mt16 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public long2_mt16 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public long2_mt16 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly long2_mt16 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly long2_mt16 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // long4_mt16

#region long4_mt32

public partial struct long4_mt32 
{
    public readonly long2_mt32 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly long2_mt32 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public long2_mt32 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt32 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public long2_mt32 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt32 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public long2_mt32 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public long2_mt32 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public long2_mt32 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public long2_mt32 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly long2_mt32 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly long2_mt32 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public long2_mt32 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt32 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public long2_mt32 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public long2_mt32 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public long2_mt32 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt32 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public long2_mt32 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public long2_mt32 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly long2_mt32 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly long2_mt32 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public long2_mt32 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public long2_mt32 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public long2_mt32 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public long2_mt32 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public long2_mt32 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public long2_mt32 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public long2_mt32 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public long2_mt32 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly long2_mt32 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly long2_mt32 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // long4_mt32

#region ulong4_mt4

public partial struct ulong4_mt4 
{
    public readonly ulong2_mt4 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly ulong2_mt4 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public ulong2_mt4 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt4 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt4 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt4 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt4 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public ulong2_mt4 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public ulong2_mt4 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public ulong2_mt4 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly ulong2_mt4 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly ulong2_mt4 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public ulong2_mt4 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt4 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt4 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public ulong2_mt4 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public ulong2_mt4 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt4 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt4 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public ulong2_mt4 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly ulong2_mt4 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly ulong2_mt4 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public ulong2_mt4 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public ulong2_mt4 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public ulong2_mt4 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public ulong2_mt4 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public ulong2_mt4 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public ulong2_mt4 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public ulong2_mt4 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public ulong2_mt4 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly ulong2_mt4 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly ulong2_mt4 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // ulong4_mt4

#region ulong4_mt8

public partial struct ulong4_mt8 
{
    public readonly ulong2_mt8 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly ulong2_mt8 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public ulong2_mt8 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt8 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt8 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt8 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt8 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public ulong2_mt8 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public ulong2_mt8 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public ulong2_mt8 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly ulong2_mt8 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly ulong2_mt8 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public ulong2_mt8 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt8 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt8 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public ulong2_mt8 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public ulong2_mt8 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt8 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt8 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public ulong2_mt8 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly ulong2_mt8 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly ulong2_mt8 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public ulong2_mt8 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public ulong2_mt8 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public ulong2_mt8 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public ulong2_mt8 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public ulong2_mt8 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public ulong2_mt8 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public ulong2_mt8 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public ulong2_mt8 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly ulong2_mt8 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly ulong2_mt8 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // ulong4_mt8

#region ulong4_mt16

public partial struct ulong4_mt16 
{
    public readonly ulong2_mt16 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly ulong2_mt16 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public ulong2_mt16 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt16 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt16 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt16 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt16 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public ulong2_mt16 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public ulong2_mt16 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public ulong2_mt16 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly ulong2_mt16 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly ulong2_mt16 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public ulong2_mt16 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt16 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt16 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public ulong2_mt16 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public ulong2_mt16 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt16 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt16 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public ulong2_mt16 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly ulong2_mt16 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly ulong2_mt16 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public ulong2_mt16 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public ulong2_mt16 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public ulong2_mt16 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public ulong2_mt16 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public ulong2_mt16 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public ulong2_mt16 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public ulong2_mt16 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public ulong2_mt16 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly ulong2_mt16 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly ulong2_mt16 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // ulong4_mt16

#region ulong4_mt32

public partial struct ulong4_mt32 
{
    public readonly ulong2_mt32 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly ulong2_mt32 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public ulong2_mt32 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt32 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public ulong2_mt32 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt32 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public ulong2_mt32 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public ulong2_mt32 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public ulong2_mt32 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public ulong2_mt32 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly ulong2_mt32 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly ulong2_mt32 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public ulong2_mt32 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt32 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public ulong2_mt32 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public ulong2_mt32 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public ulong2_mt32 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt32 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public ulong2_mt32 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public ulong2_mt32 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly ulong2_mt32 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly ulong2_mt32 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public ulong2_mt32 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public ulong2_mt32 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public ulong2_mt32 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public ulong2_mt32 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public ulong2_mt32 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public ulong2_mt32 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public ulong2_mt32 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public ulong2_mt32 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly ulong2_mt32 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly ulong2_mt32 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // ulong4_mt32

#region b32v4_mt4

public partial struct b32v4_mt4 
{
    public readonly b32v2_mt4 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b32v2_mt4 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b32v2_mt4 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt4 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt4 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt4 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt4 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b32v2_mt4 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b32v2_mt4 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b32v2_mt4 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b32v2_mt4 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b32v2_mt4 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b32v2_mt4 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt4 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt4 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b32v2_mt4 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b32v2_mt4 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt4 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt4 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b32v2_mt4 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b32v2_mt4 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b32v2_mt4 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public b32v2_mt4 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b32v2_mt4 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b32v2_mt4 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b32v2_mt4 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b32v2_mt4 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b32v2_mt4 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b32v2_mt4 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public b32v2_mt4 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly b32v2_mt4 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly b32v2_mt4 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // b32v4_mt4

#region b32v4_mt8

public partial struct b32v4_mt8 
{
    public readonly b32v2_mt8 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b32v2_mt8 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b32v2_mt8 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt8 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt8 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt8 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt8 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b32v2_mt8 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b32v2_mt8 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b32v2_mt8 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b32v2_mt8 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b32v2_mt8 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b32v2_mt8 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt8 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt8 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b32v2_mt8 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b32v2_mt8 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt8 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt8 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b32v2_mt8 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b32v2_mt8 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b32v2_mt8 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public b32v2_mt8 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b32v2_mt8 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b32v2_mt8 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b32v2_mt8 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b32v2_mt8 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b32v2_mt8 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b32v2_mt8 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public b32v2_mt8 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly b32v2_mt8 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly b32v2_mt8 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // b32v4_mt8

#region b32v4_mt16

public partial struct b32v4_mt16 
{
    public readonly b32v2_mt16 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b32v2_mt16 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b32v2_mt16 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt16 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt16 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt16 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt16 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b32v2_mt16 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b32v2_mt16 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b32v2_mt16 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b32v2_mt16 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b32v2_mt16 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b32v2_mt16 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt16 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt16 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b32v2_mt16 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b32v2_mt16 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt16 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt16 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b32v2_mt16 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b32v2_mt16 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b32v2_mt16 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public b32v2_mt16 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b32v2_mt16 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b32v2_mt16 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b32v2_mt16 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b32v2_mt16 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b32v2_mt16 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b32v2_mt16 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public b32v2_mt16 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly b32v2_mt16 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly b32v2_mt16 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // b32v4_mt16

#region b32v4_mt32

public partial struct b32v4_mt32 
{
    public readonly b32v2_mt32 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b32v2_mt32 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b32v2_mt32 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt32 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b32v2_mt32 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt32 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b32v2_mt32 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b32v2_mt32 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b32v2_mt32 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b32v2_mt32 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b32v2_mt32 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b32v2_mt32 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b32v2_mt32 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt32 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b32v2_mt32 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b32v2_mt32 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b32v2_mt32 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt32 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b32v2_mt32 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b32v2_mt32 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b32v2_mt32 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b32v2_mt32 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public b32v2_mt32 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b32v2_mt32 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b32v2_mt32 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b32v2_mt32 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b32v2_mt32 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b32v2_mt32 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b32v2_mt32 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public b32v2_mt32 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly b32v2_mt32 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly b32v2_mt32 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // b32v4_mt32

#region b64v4_mt4

public partial struct b64v4_mt4 
{
    public readonly b64v2_mt4 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b64v2_mt4 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b64v2_mt4 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt4 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt4 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt4 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt4 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b64v2_mt4 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b64v2_mt4 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b64v2_mt4 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b64v2_mt4 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b64v2_mt4 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b64v2_mt4 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt4 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt4 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b64v2_mt4 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b64v2_mt4 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt4 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt4 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b64v2_mt4 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b64v2_mt4 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b64v2_mt4 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public b64v2_mt4 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b64v2_mt4 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b64v2_mt4 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b64v2_mt4 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b64v2_mt4 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b64v2_mt4 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b64v2_mt4 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public b64v2_mt4 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly b64v2_mt4 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly b64v2_mt4 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // b64v4_mt4

#region b64v4_mt8

public partial struct b64v4_mt8 
{
    public readonly b64v2_mt8 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b64v2_mt8 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b64v2_mt8 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt8 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt8 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt8 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt8 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b64v2_mt8 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b64v2_mt8 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b64v2_mt8 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b64v2_mt8 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b64v2_mt8 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b64v2_mt8 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt8 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt8 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b64v2_mt8 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b64v2_mt8 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt8 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt8 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b64v2_mt8 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b64v2_mt8 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b64v2_mt8 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public b64v2_mt8 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b64v2_mt8 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b64v2_mt8 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b64v2_mt8 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b64v2_mt8 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b64v2_mt8 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b64v2_mt8 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public b64v2_mt8 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly b64v2_mt8 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly b64v2_mt8 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // b64v4_mt8

#region b64v4_mt16

public partial struct b64v4_mt16 
{
    public readonly b64v2_mt16 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b64v2_mt16 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b64v2_mt16 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt16 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt16 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt16 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt16 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b64v2_mt16 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b64v2_mt16 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b64v2_mt16 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b64v2_mt16 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b64v2_mt16 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b64v2_mt16 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt16 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt16 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b64v2_mt16 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b64v2_mt16 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt16 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt16 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b64v2_mt16 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b64v2_mt16 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b64v2_mt16 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public b64v2_mt16 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b64v2_mt16 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b64v2_mt16 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b64v2_mt16 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b64v2_mt16 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b64v2_mt16 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b64v2_mt16 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public b64v2_mt16 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly b64v2_mt16 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly b64v2_mt16 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // b64v4_mt16

#region b64v4_mt32

public partial struct b64v4_mt32 
{
    public readonly b64v2_mt32 xx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public readonly b64v2_mt32 rr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x);
    }
    public b64v2_mt32 xy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt32 rg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, y);
        [MethodImpl(256 | 512)]
        set { x = value.x; y = value.y; }
    }
    public b64v2_mt32 xz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt32 rb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z);
        [MethodImpl(256 | 512)]
        set { x = value.x; z = value.y; }
    }
    public b64v2_mt32 xw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b64v2_mt32 ra
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, w);
        [MethodImpl(256 | 512)]
        set { x = value.x; w = value.y; }
    }
    public b64v2_mt32 yx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public b64v2_mt32 gr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x);
        [MethodImpl(256 | 512)]
        set { y = value.x; x = value.y; }
    }
    public readonly b64v2_mt32 yy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public readonly b64v2_mt32 gg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y);
    }
    public b64v2_mt32 yz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt32 gb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z);
        [MethodImpl(256 | 512)]
        set { y = value.x; z = value.y; }
    }
    public b64v2_mt32 yw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b64v2_mt32 ga
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, w);
        [MethodImpl(256 | 512)]
        set { y = value.x; w = value.y; }
    }
    public b64v2_mt32 zx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt32 br
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x);
        [MethodImpl(256 | 512)]
        set { z = value.x; x = value.y; }
    }
    public b64v2_mt32 zy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public b64v2_mt32 bg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y);
        [MethodImpl(256 | 512)]
        set { z = value.x; y = value.y; }
    }
    public readonly b64v2_mt32 zz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public readonly b64v2_mt32 bb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z);
    }
    public b64v2_mt32 zw
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b64v2_mt32 ba
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, w);
        [MethodImpl(256 | 512)]
        set { z = value.x; w = value.y; }
    }
    public b64v2_mt32 wx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b64v2_mt32 ar
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, x);
        [MethodImpl(256 | 512)]
        set { w = value.x; x = value.y; }
    }
    public b64v2_mt32 wy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b64v2_mt32 ag
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, y);
        [MethodImpl(256 | 512)]
        set { w = value.x; y = value.y; }
    }
    public b64v2_mt32 wz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public b64v2_mt32 ab
    {
        [MethodImpl(256 | 512)]
        readonly get => new(w, z);
        [MethodImpl(256 | 512)]
        set { w = value.x; z = value.y; }
    }
    public readonly b64v2_mt32 ww
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
    public readonly b64v2_mt32 aa
    {
        [MethodImpl(256 | 512)]
        get => new(w, w);
    }
}

#endregion // b64v4_mt32
