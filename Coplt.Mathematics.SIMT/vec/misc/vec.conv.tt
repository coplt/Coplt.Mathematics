<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../../Coplt.Mathematics/types.ttinclude" #><#@ import namespace="System.Linq" #>// generated by template, do not modify manually

namespace Coplt.Mathematics.SIMT;

<#
    var sizes = new[] { 4, 8, 16, 32 };
    var TypMap = Typ.Typs.ToDictionary(a => a.name);

    foreach (var typ in Typ.Typs)
    {
        if (!typ.simd) continue;
        if (typ.size < 4) continue;
        if (!Typ.ExplicitConverts.TryGetValue(typ.name, out var exp)) exp = [];
        if (!Typ.ImplicitConverts.TryGetValue(typ.name, out var imp)) imp = [];

        if (exp.Length + imp.Length == 0) continue;

        var convs = exp.AsParallel().AsOrdered().Select(a => (c:"explicit", t:TypMap.TryGetValue(a, out var b) ? b : default))
            .Concat(imp.AsParallel().AsOrdered().Select(a => (c:"implicit", t:TypMap.TryGetValue(a, out var b) ? b : default)))
            .Where(a => a.t.name != null).ToArray();

        for (var i = 2; i <= 4; i++)
        {
            foreach (var size in sizes)
            {
                var byteSize = typ.size * size;
                var bitSize = 8 * byteSize;
                var num_vectors = Math.Max(1, bitSize / 512);
                bitSize = Math.Min(512, bitSize);

                var typeName = $"{typ.name}{i}_mt{size}";

                IEnumerable<string> ForVectors(string name)
                {
                    if (num_vectors == 1) yield return name;
                    else
                    {
                        for (var i = 0; i < num_vectors; i++)
                        {
                            yield return $"{name}{i}";
                        }
                    }
                }

                var vectors = ForVectors("vector").ToList();
#>

#region <#= typeName #>

public partial struct <#= typeName #> 
{
<#
                foreach (var (ck, tar) in convs)
                {
                    if (!tar.simd) continue;
                    if (tar.size < 4) continue;
                    var tarName = $"{tar.name}{i}_mt{size}";
                    var tarScalarName = $"{tar.compType}_mt{size}";

                    var cast = $"({tar.compType})";

                    var tarByteSize = tar.size * size;
                    var tarBitSize = 8 * tarByteSize;
                    var tar_num_vectors = Math.Max(1, tarBitSize / 512);
                    tarBitSize = Math.Min(512, tarBitSize);

                    IEnumerable<string> TarForVectors(string name)
                    {
                        if (tar_num_vectors == 1) yield return name;
                        else
                        {
                            for (var i = 0; i < tar_num_vectors; i++)
                            {
                                yield return $"{name}{i}";
                            }
                        }
                    }

                    var tar_vectors = TarForVectors("vector").ToList();
#>
    [MethodImpl(256 | 512)]
    public static <#= ck #> operator <#= tarName #>(<#= typeName #> self) => new(<#=
                            string.Join(", ", Enumerable.Range(0, i).Select(n => $"({tarScalarName})self.{Typ.xyzw[n]}")) #>);
<#
                }
#>
}

#endregion // <#= typeName #>
<#
            }
        }
    }
#>
