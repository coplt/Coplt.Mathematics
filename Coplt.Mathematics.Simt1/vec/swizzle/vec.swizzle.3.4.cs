// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region float3_mt4

public partial struct float3_mt4 
{
    public readonly float4_mt4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly float4_mt4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly float4_mt4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly float4_mt4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly float4_mt4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly float4_mt4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly float4_mt4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly float4_mt4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly float4_mt4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly float4_mt4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly float4_mt4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly float4_mt4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly float4_mt4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly float4_mt4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly float4_mt4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly float4_mt4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly float4_mt4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly float4_mt4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly float4_mt4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly float4_mt4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly float4_mt4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly float4_mt4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly float4_mt4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly float4_mt4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly float4_mt4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly float4_mt4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly float4_mt4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly float4_mt4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly float4_mt4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly float4_mt4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly float4_mt4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly float4_mt4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly float4_mt4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly float4_mt4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly float4_mt4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly float4_mt4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly float4_mt4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly float4_mt4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly float4_mt4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly float4_mt4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly float4_mt4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly float4_mt4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly float4_mt4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly float4_mt4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly float4_mt4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly float4_mt4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly float4_mt4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly float4_mt4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly float4_mt4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly float4_mt4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly float4_mt4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly float4_mt4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly float4_mt4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly float4_mt4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly float4_mt4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly float4_mt4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly float4_mt4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly float4_mt4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly float4_mt4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly float4_mt4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly float4_mt4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly float4_mt4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly float4_mt4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly float4_mt4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly float4_mt4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly float4_mt4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly float4_mt4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly float4_mt4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly float4_mt4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly float4_mt4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly float4_mt4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly float4_mt4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly float4_mt4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly float4_mt4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly float4_mt4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly float4_mt4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly float4_mt4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly float4_mt4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly float4_mt4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly float4_mt4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly float4_mt4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly float4_mt4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly float4_mt4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly float4_mt4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly float4_mt4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly float4_mt4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly float4_mt4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly float4_mt4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly float4_mt4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly float4_mt4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly float4_mt4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly float4_mt4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly float4_mt4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly float4_mt4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly float4_mt4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly float4_mt4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly float4_mt4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly float4_mt4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly float4_mt4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly float4_mt4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly float4_mt4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly float4_mt4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly float4_mt4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly float4_mt4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly float4_mt4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly float4_mt4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly float4_mt4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly float4_mt4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly float4_mt4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly float4_mt4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly float4_mt4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly float4_mt4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly float4_mt4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly float4_mt4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly float4_mt4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly float4_mt4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly float4_mt4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly float4_mt4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly float4_mt4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly float4_mt4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly float4_mt4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly float4_mt4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly float4_mt4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly float4_mt4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly float4_mt4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly float4_mt4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly float4_mt4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly float4_mt4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly float4_mt4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly float4_mt4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly float4_mt4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly float4_mt4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly float4_mt4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly float4_mt4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly float4_mt4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly float4_mt4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly float4_mt4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly float4_mt4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly float4_mt4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly float4_mt4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly float4_mt4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly float4_mt4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly float4_mt4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly float4_mt4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly float4_mt4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly float4_mt4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly float4_mt4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly float4_mt4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly float4_mt4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly float4_mt4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly float4_mt4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly float4_mt4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly float4_mt4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly float4_mt4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly float4_mt4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly float4_mt4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly float4_mt4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly float4_mt4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly float4_mt4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly float4_mt4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly float4_mt4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly float4_mt4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // float3_mt4

#region float3_mt8

public partial struct float3_mt8 
{
    public readonly float4_mt8 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly float4_mt8 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly float4_mt8 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly float4_mt8 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly float4_mt8 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly float4_mt8 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly float4_mt8 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly float4_mt8 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly float4_mt8 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly float4_mt8 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly float4_mt8 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly float4_mt8 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly float4_mt8 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly float4_mt8 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly float4_mt8 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly float4_mt8 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly float4_mt8 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly float4_mt8 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly float4_mt8 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly float4_mt8 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly float4_mt8 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly float4_mt8 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly float4_mt8 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly float4_mt8 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly float4_mt8 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly float4_mt8 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly float4_mt8 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly float4_mt8 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly float4_mt8 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly float4_mt8 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly float4_mt8 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly float4_mt8 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly float4_mt8 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly float4_mt8 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly float4_mt8 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly float4_mt8 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly float4_mt8 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly float4_mt8 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly float4_mt8 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly float4_mt8 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly float4_mt8 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly float4_mt8 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly float4_mt8 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly float4_mt8 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly float4_mt8 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly float4_mt8 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly float4_mt8 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly float4_mt8 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly float4_mt8 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly float4_mt8 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly float4_mt8 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly float4_mt8 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly float4_mt8 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly float4_mt8 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly float4_mt8 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly float4_mt8 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly float4_mt8 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly float4_mt8 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly float4_mt8 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly float4_mt8 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly float4_mt8 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly float4_mt8 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly float4_mt8 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly float4_mt8 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly float4_mt8 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly float4_mt8 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly float4_mt8 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly float4_mt8 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly float4_mt8 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly float4_mt8 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly float4_mt8 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly float4_mt8 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly float4_mt8 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly float4_mt8 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly float4_mt8 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly float4_mt8 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly float4_mt8 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly float4_mt8 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly float4_mt8 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly float4_mt8 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly float4_mt8 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly float4_mt8 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly float4_mt8 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly float4_mt8 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly float4_mt8 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly float4_mt8 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly float4_mt8 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly float4_mt8 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly float4_mt8 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly float4_mt8 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly float4_mt8 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly float4_mt8 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly float4_mt8 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly float4_mt8 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly float4_mt8 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly float4_mt8 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly float4_mt8 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly float4_mt8 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly float4_mt8 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly float4_mt8 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly float4_mt8 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly float4_mt8 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly float4_mt8 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly float4_mt8 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly float4_mt8 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly float4_mt8 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly float4_mt8 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly float4_mt8 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly float4_mt8 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly float4_mt8 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly float4_mt8 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly float4_mt8 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly float4_mt8 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly float4_mt8 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly float4_mt8 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly float4_mt8 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly float4_mt8 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly float4_mt8 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly float4_mt8 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly float4_mt8 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly float4_mt8 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly float4_mt8 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly float4_mt8 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly float4_mt8 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly float4_mt8 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly float4_mt8 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly float4_mt8 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly float4_mt8 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly float4_mt8 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly float4_mt8 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly float4_mt8 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly float4_mt8 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly float4_mt8 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly float4_mt8 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly float4_mt8 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly float4_mt8 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly float4_mt8 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly float4_mt8 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly float4_mt8 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly float4_mt8 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly float4_mt8 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly float4_mt8 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly float4_mt8 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly float4_mt8 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly float4_mt8 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly float4_mt8 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly float4_mt8 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly float4_mt8 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly float4_mt8 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly float4_mt8 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly float4_mt8 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly float4_mt8 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly float4_mt8 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly float4_mt8 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly float4_mt8 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly float4_mt8 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly float4_mt8 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly float4_mt8 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly float4_mt8 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly float4_mt8 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly float4_mt8 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly float4_mt8 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // float3_mt8

#region float3_mt16

public partial struct float3_mt16 
{
    public readonly float4_mt16 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly float4_mt16 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly float4_mt16 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly float4_mt16 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly float4_mt16 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly float4_mt16 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly float4_mt16 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly float4_mt16 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly float4_mt16 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly float4_mt16 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly float4_mt16 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly float4_mt16 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly float4_mt16 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly float4_mt16 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly float4_mt16 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly float4_mt16 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly float4_mt16 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly float4_mt16 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly float4_mt16 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly float4_mt16 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly float4_mt16 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly float4_mt16 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly float4_mt16 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly float4_mt16 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly float4_mt16 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly float4_mt16 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly float4_mt16 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly float4_mt16 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly float4_mt16 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly float4_mt16 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly float4_mt16 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly float4_mt16 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly float4_mt16 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly float4_mt16 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly float4_mt16 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly float4_mt16 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly float4_mt16 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly float4_mt16 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly float4_mt16 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly float4_mt16 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly float4_mt16 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly float4_mt16 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly float4_mt16 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly float4_mt16 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly float4_mt16 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly float4_mt16 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly float4_mt16 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly float4_mt16 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly float4_mt16 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly float4_mt16 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly float4_mt16 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly float4_mt16 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly float4_mt16 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly float4_mt16 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly float4_mt16 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly float4_mt16 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly float4_mt16 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly float4_mt16 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly float4_mt16 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly float4_mt16 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly float4_mt16 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly float4_mt16 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly float4_mt16 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly float4_mt16 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly float4_mt16 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly float4_mt16 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly float4_mt16 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly float4_mt16 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly float4_mt16 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly float4_mt16 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly float4_mt16 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly float4_mt16 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly float4_mt16 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly float4_mt16 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly float4_mt16 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly float4_mt16 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly float4_mt16 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly float4_mt16 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly float4_mt16 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly float4_mt16 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly float4_mt16 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly float4_mt16 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly float4_mt16 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly float4_mt16 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly float4_mt16 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly float4_mt16 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly float4_mt16 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly float4_mt16 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly float4_mt16 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly float4_mt16 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly float4_mt16 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly float4_mt16 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly float4_mt16 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly float4_mt16 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly float4_mt16 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly float4_mt16 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly float4_mt16 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly float4_mt16 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly float4_mt16 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly float4_mt16 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly float4_mt16 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly float4_mt16 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly float4_mt16 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly float4_mt16 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly float4_mt16 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly float4_mt16 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly float4_mt16 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly float4_mt16 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly float4_mt16 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly float4_mt16 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly float4_mt16 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly float4_mt16 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly float4_mt16 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly float4_mt16 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly float4_mt16 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly float4_mt16 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly float4_mt16 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly float4_mt16 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly float4_mt16 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly float4_mt16 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly float4_mt16 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly float4_mt16 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly float4_mt16 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly float4_mt16 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly float4_mt16 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly float4_mt16 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly float4_mt16 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly float4_mt16 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly float4_mt16 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly float4_mt16 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly float4_mt16 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly float4_mt16 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly float4_mt16 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly float4_mt16 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly float4_mt16 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly float4_mt16 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly float4_mt16 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly float4_mt16 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly float4_mt16 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly float4_mt16 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly float4_mt16 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly float4_mt16 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly float4_mt16 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly float4_mt16 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly float4_mt16 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly float4_mt16 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly float4_mt16 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly float4_mt16 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly float4_mt16 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly float4_mt16 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly float4_mt16 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly float4_mt16 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly float4_mt16 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly float4_mt16 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly float4_mt16 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly float4_mt16 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly float4_mt16 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly float4_mt16 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly float4_mt16 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly float4_mt16 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly float4_mt16 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly float4_mt16 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // float3_mt16

#region float3_mt32

public partial struct float3_mt32 
{
    public readonly float4_mt32 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly float4_mt32 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly float4_mt32 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly float4_mt32 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly float4_mt32 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly float4_mt32 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly float4_mt32 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly float4_mt32 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly float4_mt32 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly float4_mt32 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly float4_mt32 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly float4_mt32 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly float4_mt32 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly float4_mt32 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly float4_mt32 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly float4_mt32 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly float4_mt32 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly float4_mt32 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly float4_mt32 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly float4_mt32 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly float4_mt32 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly float4_mt32 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly float4_mt32 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly float4_mt32 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly float4_mt32 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly float4_mt32 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly float4_mt32 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly float4_mt32 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly float4_mt32 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly float4_mt32 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly float4_mt32 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly float4_mt32 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly float4_mt32 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly float4_mt32 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly float4_mt32 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly float4_mt32 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly float4_mt32 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly float4_mt32 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly float4_mt32 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly float4_mt32 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly float4_mt32 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly float4_mt32 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly float4_mt32 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly float4_mt32 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly float4_mt32 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly float4_mt32 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly float4_mt32 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly float4_mt32 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly float4_mt32 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly float4_mt32 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly float4_mt32 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly float4_mt32 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly float4_mt32 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly float4_mt32 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly float4_mt32 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly float4_mt32 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly float4_mt32 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly float4_mt32 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly float4_mt32 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly float4_mt32 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly float4_mt32 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly float4_mt32 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly float4_mt32 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly float4_mt32 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly float4_mt32 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly float4_mt32 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly float4_mt32 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly float4_mt32 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly float4_mt32 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly float4_mt32 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly float4_mt32 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly float4_mt32 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly float4_mt32 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly float4_mt32 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly float4_mt32 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly float4_mt32 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly float4_mt32 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly float4_mt32 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly float4_mt32 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly float4_mt32 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly float4_mt32 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly float4_mt32 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly float4_mt32 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly float4_mt32 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly float4_mt32 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly float4_mt32 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly float4_mt32 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly float4_mt32 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly float4_mt32 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly float4_mt32 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly float4_mt32 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly float4_mt32 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly float4_mt32 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly float4_mt32 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly float4_mt32 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly float4_mt32 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly float4_mt32 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly float4_mt32 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly float4_mt32 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly float4_mt32 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly float4_mt32 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly float4_mt32 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly float4_mt32 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly float4_mt32 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly float4_mt32 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly float4_mt32 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly float4_mt32 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly float4_mt32 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly float4_mt32 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly float4_mt32 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly float4_mt32 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly float4_mt32 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly float4_mt32 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly float4_mt32 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly float4_mt32 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly float4_mt32 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly float4_mt32 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly float4_mt32 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly float4_mt32 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly float4_mt32 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly float4_mt32 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly float4_mt32 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly float4_mt32 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly float4_mt32 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly float4_mt32 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly float4_mt32 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly float4_mt32 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly float4_mt32 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly float4_mt32 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly float4_mt32 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly float4_mt32 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly float4_mt32 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly float4_mt32 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly float4_mt32 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly float4_mt32 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly float4_mt32 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly float4_mt32 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly float4_mt32 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly float4_mt32 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly float4_mt32 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly float4_mt32 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly float4_mt32 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly float4_mt32 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly float4_mt32 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly float4_mt32 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly float4_mt32 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly float4_mt32 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly float4_mt32 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly float4_mt32 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly float4_mt32 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly float4_mt32 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly float4_mt32 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly float4_mt32 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly float4_mt32 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly float4_mt32 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly float4_mt32 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly float4_mt32 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly float4_mt32 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly float4_mt32 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly float4_mt32 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly float4_mt32 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly float4_mt32 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // float3_mt32

#region double3_mt4

public partial struct double3_mt4 
{
    public readonly double4_mt4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly double4_mt4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly double4_mt4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly double4_mt4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly double4_mt4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly double4_mt4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly double4_mt4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly double4_mt4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly double4_mt4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly double4_mt4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly double4_mt4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly double4_mt4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly double4_mt4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly double4_mt4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly double4_mt4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly double4_mt4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly double4_mt4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly double4_mt4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly double4_mt4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly double4_mt4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly double4_mt4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly double4_mt4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly double4_mt4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly double4_mt4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly double4_mt4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly double4_mt4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly double4_mt4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly double4_mt4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly double4_mt4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly double4_mt4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly double4_mt4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly double4_mt4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly double4_mt4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly double4_mt4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly double4_mt4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly double4_mt4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly double4_mt4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly double4_mt4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly double4_mt4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly double4_mt4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly double4_mt4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly double4_mt4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly double4_mt4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly double4_mt4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly double4_mt4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly double4_mt4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly double4_mt4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly double4_mt4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly double4_mt4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly double4_mt4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly double4_mt4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly double4_mt4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly double4_mt4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly double4_mt4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly double4_mt4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly double4_mt4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly double4_mt4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly double4_mt4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly double4_mt4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly double4_mt4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly double4_mt4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly double4_mt4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly double4_mt4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly double4_mt4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly double4_mt4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly double4_mt4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly double4_mt4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly double4_mt4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly double4_mt4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly double4_mt4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly double4_mt4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly double4_mt4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly double4_mt4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly double4_mt4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly double4_mt4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly double4_mt4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly double4_mt4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly double4_mt4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly double4_mt4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly double4_mt4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly double4_mt4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly double4_mt4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly double4_mt4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly double4_mt4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly double4_mt4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly double4_mt4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly double4_mt4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly double4_mt4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly double4_mt4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly double4_mt4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly double4_mt4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly double4_mt4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly double4_mt4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly double4_mt4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly double4_mt4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly double4_mt4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly double4_mt4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly double4_mt4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly double4_mt4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly double4_mt4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly double4_mt4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly double4_mt4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly double4_mt4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly double4_mt4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly double4_mt4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly double4_mt4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly double4_mt4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly double4_mt4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly double4_mt4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly double4_mt4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly double4_mt4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly double4_mt4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly double4_mt4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly double4_mt4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly double4_mt4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly double4_mt4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly double4_mt4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly double4_mt4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly double4_mt4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly double4_mt4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly double4_mt4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly double4_mt4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly double4_mt4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly double4_mt4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly double4_mt4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly double4_mt4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly double4_mt4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly double4_mt4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly double4_mt4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly double4_mt4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly double4_mt4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly double4_mt4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly double4_mt4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly double4_mt4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly double4_mt4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly double4_mt4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly double4_mt4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly double4_mt4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly double4_mt4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly double4_mt4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly double4_mt4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly double4_mt4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly double4_mt4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly double4_mt4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly double4_mt4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly double4_mt4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly double4_mt4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly double4_mt4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly double4_mt4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly double4_mt4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly double4_mt4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly double4_mt4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly double4_mt4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly double4_mt4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly double4_mt4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly double4_mt4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly double4_mt4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly double4_mt4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly double4_mt4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly double4_mt4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly double4_mt4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly double4_mt4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // double3_mt4

#region double3_mt8

public partial struct double3_mt8 
{
    public readonly double4_mt8 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly double4_mt8 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly double4_mt8 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly double4_mt8 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly double4_mt8 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly double4_mt8 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly double4_mt8 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly double4_mt8 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly double4_mt8 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly double4_mt8 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly double4_mt8 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly double4_mt8 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly double4_mt8 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly double4_mt8 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly double4_mt8 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly double4_mt8 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly double4_mt8 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly double4_mt8 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly double4_mt8 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly double4_mt8 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly double4_mt8 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly double4_mt8 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly double4_mt8 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly double4_mt8 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly double4_mt8 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly double4_mt8 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly double4_mt8 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly double4_mt8 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly double4_mt8 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly double4_mt8 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly double4_mt8 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly double4_mt8 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly double4_mt8 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly double4_mt8 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly double4_mt8 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly double4_mt8 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly double4_mt8 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly double4_mt8 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly double4_mt8 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly double4_mt8 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly double4_mt8 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly double4_mt8 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly double4_mt8 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly double4_mt8 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly double4_mt8 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly double4_mt8 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly double4_mt8 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly double4_mt8 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly double4_mt8 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly double4_mt8 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly double4_mt8 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly double4_mt8 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly double4_mt8 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly double4_mt8 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly double4_mt8 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly double4_mt8 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly double4_mt8 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly double4_mt8 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly double4_mt8 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly double4_mt8 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly double4_mt8 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly double4_mt8 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly double4_mt8 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly double4_mt8 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly double4_mt8 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly double4_mt8 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly double4_mt8 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly double4_mt8 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly double4_mt8 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly double4_mt8 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly double4_mt8 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly double4_mt8 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly double4_mt8 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly double4_mt8 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly double4_mt8 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly double4_mt8 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly double4_mt8 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly double4_mt8 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly double4_mt8 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly double4_mt8 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly double4_mt8 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly double4_mt8 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly double4_mt8 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly double4_mt8 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly double4_mt8 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly double4_mt8 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly double4_mt8 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly double4_mt8 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly double4_mt8 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly double4_mt8 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly double4_mt8 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly double4_mt8 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly double4_mt8 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly double4_mt8 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly double4_mt8 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly double4_mt8 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly double4_mt8 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly double4_mt8 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly double4_mt8 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly double4_mt8 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly double4_mt8 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly double4_mt8 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly double4_mt8 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly double4_mt8 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly double4_mt8 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly double4_mt8 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly double4_mt8 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly double4_mt8 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly double4_mt8 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly double4_mt8 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly double4_mt8 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly double4_mt8 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly double4_mt8 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly double4_mt8 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly double4_mt8 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly double4_mt8 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly double4_mt8 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly double4_mt8 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly double4_mt8 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly double4_mt8 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly double4_mt8 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly double4_mt8 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly double4_mt8 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly double4_mt8 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly double4_mt8 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly double4_mt8 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly double4_mt8 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly double4_mt8 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly double4_mt8 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly double4_mt8 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly double4_mt8 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly double4_mt8 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly double4_mt8 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly double4_mt8 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly double4_mt8 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly double4_mt8 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly double4_mt8 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly double4_mt8 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly double4_mt8 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly double4_mt8 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly double4_mt8 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly double4_mt8 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly double4_mt8 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly double4_mt8 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly double4_mt8 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly double4_mt8 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly double4_mt8 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly double4_mt8 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly double4_mt8 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly double4_mt8 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly double4_mt8 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly double4_mt8 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly double4_mt8 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly double4_mt8 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly double4_mt8 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly double4_mt8 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly double4_mt8 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly double4_mt8 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly double4_mt8 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly double4_mt8 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly double4_mt8 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly double4_mt8 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // double3_mt8

#region double3_mt16

public partial struct double3_mt16 
{
    public readonly double4_mt16 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly double4_mt16 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly double4_mt16 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly double4_mt16 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly double4_mt16 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly double4_mt16 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly double4_mt16 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly double4_mt16 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly double4_mt16 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly double4_mt16 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly double4_mt16 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly double4_mt16 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly double4_mt16 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly double4_mt16 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly double4_mt16 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly double4_mt16 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly double4_mt16 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly double4_mt16 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly double4_mt16 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly double4_mt16 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly double4_mt16 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly double4_mt16 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly double4_mt16 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly double4_mt16 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly double4_mt16 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly double4_mt16 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly double4_mt16 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly double4_mt16 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly double4_mt16 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly double4_mt16 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly double4_mt16 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly double4_mt16 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly double4_mt16 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly double4_mt16 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly double4_mt16 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly double4_mt16 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly double4_mt16 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly double4_mt16 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly double4_mt16 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly double4_mt16 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly double4_mt16 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly double4_mt16 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly double4_mt16 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly double4_mt16 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly double4_mt16 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly double4_mt16 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly double4_mt16 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly double4_mt16 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly double4_mt16 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly double4_mt16 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly double4_mt16 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly double4_mt16 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly double4_mt16 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly double4_mt16 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly double4_mt16 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly double4_mt16 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly double4_mt16 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly double4_mt16 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly double4_mt16 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly double4_mt16 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly double4_mt16 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly double4_mt16 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly double4_mt16 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly double4_mt16 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly double4_mt16 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly double4_mt16 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly double4_mt16 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly double4_mt16 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly double4_mt16 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly double4_mt16 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly double4_mt16 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly double4_mt16 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly double4_mt16 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly double4_mt16 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly double4_mt16 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly double4_mt16 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly double4_mt16 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly double4_mt16 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly double4_mt16 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly double4_mt16 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly double4_mt16 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly double4_mt16 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly double4_mt16 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly double4_mt16 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly double4_mt16 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly double4_mt16 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly double4_mt16 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly double4_mt16 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly double4_mt16 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly double4_mt16 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly double4_mt16 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly double4_mt16 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly double4_mt16 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly double4_mt16 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly double4_mt16 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly double4_mt16 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly double4_mt16 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly double4_mt16 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly double4_mt16 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly double4_mt16 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly double4_mt16 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly double4_mt16 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly double4_mt16 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly double4_mt16 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly double4_mt16 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly double4_mt16 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly double4_mt16 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly double4_mt16 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly double4_mt16 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly double4_mt16 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly double4_mt16 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly double4_mt16 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly double4_mt16 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly double4_mt16 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly double4_mt16 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly double4_mt16 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly double4_mt16 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly double4_mt16 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly double4_mt16 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly double4_mt16 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly double4_mt16 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly double4_mt16 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly double4_mt16 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly double4_mt16 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly double4_mt16 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly double4_mt16 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly double4_mt16 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly double4_mt16 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly double4_mt16 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly double4_mt16 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly double4_mt16 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly double4_mt16 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly double4_mt16 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly double4_mt16 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly double4_mt16 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly double4_mt16 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly double4_mt16 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly double4_mt16 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly double4_mt16 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly double4_mt16 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly double4_mt16 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly double4_mt16 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly double4_mt16 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly double4_mt16 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly double4_mt16 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly double4_mt16 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly double4_mt16 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly double4_mt16 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly double4_mt16 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly double4_mt16 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly double4_mt16 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly double4_mt16 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly double4_mt16 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly double4_mt16 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly double4_mt16 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly double4_mt16 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly double4_mt16 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly double4_mt16 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly double4_mt16 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly double4_mt16 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly double4_mt16 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly double4_mt16 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // double3_mt16

#region double3_mt32

public partial struct double3_mt32 
{
    public readonly double4_mt32 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly double4_mt32 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly double4_mt32 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly double4_mt32 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly double4_mt32 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly double4_mt32 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly double4_mt32 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly double4_mt32 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly double4_mt32 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly double4_mt32 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly double4_mt32 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly double4_mt32 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly double4_mt32 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly double4_mt32 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly double4_mt32 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly double4_mt32 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly double4_mt32 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly double4_mt32 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly double4_mt32 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly double4_mt32 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly double4_mt32 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly double4_mt32 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly double4_mt32 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly double4_mt32 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly double4_mt32 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly double4_mt32 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly double4_mt32 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly double4_mt32 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly double4_mt32 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly double4_mt32 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly double4_mt32 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly double4_mt32 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly double4_mt32 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly double4_mt32 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly double4_mt32 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly double4_mt32 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly double4_mt32 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly double4_mt32 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly double4_mt32 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly double4_mt32 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly double4_mt32 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly double4_mt32 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly double4_mt32 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly double4_mt32 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly double4_mt32 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly double4_mt32 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly double4_mt32 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly double4_mt32 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly double4_mt32 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly double4_mt32 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly double4_mt32 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly double4_mt32 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly double4_mt32 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly double4_mt32 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly double4_mt32 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly double4_mt32 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly double4_mt32 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly double4_mt32 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly double4_mt32 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly double4_mt32 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly double4_mt32 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly double4_mt32 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly double4_mt32 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly double4_mt32 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly double4_mt32 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly double4_mt32 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly double4_mt32 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly double4_mt32 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly double4_mt32 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly double4_mt32 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly double4_mt32 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly double4_mt32 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly double4_mt32 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly double4_mt32 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly double4_mt32 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly double4_mt32 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly double4_mt32 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly double4_mt32 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly double4_mt32 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly double4_mt32 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly double4_mt32 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly double4_mt32 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly double4_mt32 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly double4_mt32 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly double4_mt32 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly double4_mt32 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly double4_mt32 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly double4_mt32 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly double4_mt32 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly double4_mt32 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly double4_mt32 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly double4_mt32 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly double4_mt32 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly double4_mt32 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly double4_mt32 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly double4_mt32 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly double4_mt32 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly double4_mt32 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly double4_mt32 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly double4_mt32 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly double4_mt32 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly double4_mt32 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly double4_mt32 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly double4_mt32 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly double4_mt32 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly double4_mt32 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly double4_mt32 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly double4_mt32 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly double4_mt32 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly double4_mt32 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly double4_mt32 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly double4_mt32 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly double4_mt32 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly double4_mt32 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly double4_mt32 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly double4_mt32 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly double4_mt32 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly double4_mt32 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly double4_mt32 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly double4_mt32 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly double4_mt32 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly double4_mt32 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly double4_mt32 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly double4_mt32 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly double4_mt32 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly double4_mt32 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly double4_mt32 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly double4_mt32 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly double4_mt32 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly double4_mt32 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly double4_mt32 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly double4_mt32 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly double4_mt32 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly double4_mt32 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly double4_mt32 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly double4_mt32 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly double4_mt32 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly double4_mt32 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly double4_mt32 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly double4_mt32 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly double4_mt32 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly double4_mt32 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly double4_mt32 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly double4_mt32 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly double4_mt32 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly double4_mt32 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly double4_mt32 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly double4_mt32 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly double4_mt32 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly double4_mt32 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly double4_mt32 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly double4_mt32 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly double4_mt32 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly double4_mt32 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly double4_mt32 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly double4_mt32 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly double4_mt32 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly double4_mt32 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly double4_mt32 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly double4_mt32 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly double4_mt32 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly double4_mt32 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // double3_mt32

#region int3_mt4

public partial struct int3_mt4 
{
    public readonly int4_mt4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly int4_mt4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly int4_mt4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly int4_mt4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly int4_mt4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly int4_mt4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly int4_mt4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly int4_mt4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly int4_mt4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly int4_mt4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly int4_mt4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly int4_mt4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly int4_mt4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly int4_mt4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly int4_mt4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly int4_mt4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly int4_mt4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly int4_mt4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly int4_mt4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly int4_mt4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly int4_mt4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly int4_mt4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly int4_mt4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly int4_mt4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly int4_mt4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly int4_mt4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly int4_mt4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly int4_mt4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly int4_mt4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly int4_mt4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly int4_mt4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly int4_mt4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly int4_mt4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly int4_mt4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly int4_mt4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly int4_mt4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly int4_mt4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly int4_mt4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly int4_mt4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly int4_mt4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly int4_mt4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly int4_mt4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly int4_mt4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly int4_mt4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly int4_mt4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly int4_mt4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly int4_mt4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly int4_mt4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly int4_mt4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly int4_mt4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly int4_mt4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly int4_mt4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly int4_mt4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly int4_mt4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly int4_mt4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly int4_mt4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly int4_mt4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly int4_mt4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly int4_mt4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly int4_mt4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly int4_mt4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly int4_mt4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly int4_mt4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly int4_mt4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly int4_mt4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly int4_mt4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly int4_mt4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly int4_mt4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly int4_mt4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly int4_mt4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly int4_mt4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly int4_mt4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly int4_mt4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly int4_mt4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly int4_mt4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly int4_mt4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly int4_mt4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly int4_mt4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly int4_mt4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly int4_mt4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly int4_mt4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly int4_mt4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly int4_mt4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly int4_mt4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly int4_mt4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly int4_mt4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly int4_mt4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly int4_mt4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly int4_mt4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly int4_mt4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly int4_mt4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly int4_mt4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly int4_mt4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly int4_mt4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly int4_mt4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly int4_mt4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly int4_mt4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly int4_mt4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly int4_mt4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly int4_mt4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly int4_mt4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly int4_mt4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly int4_mt4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly int4_mt4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly int4_mt4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly int4_mt4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly int4_mt4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly int4_mt4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly int4_mt4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly int4_mt4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly int4_mt4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly int4_mt4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly int4_mt4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly int4_mt4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly int4_mt4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly int4_mt4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly int4_mt4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly int4_mt4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly int4_mt4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly int4_mt4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly int4_mt4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly int4_mt4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly int4_mt4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly int4_mt4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly int4_mt4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly int4_mt4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly int4_mt4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly int4_mt4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly int4_mt4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly int4_mt4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly int4_mt4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly int4_mt4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly int4_mt4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly int4_mt4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly int4_mt4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly int4_mt4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly int4_mt4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly int4_mt4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly int4_mt4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly int4_mt4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly int4_mt4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly int4_mt4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly int4_mt4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly int4_mt4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly int4_mt4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly int4_mt4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly int4_mt4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly int4_mt4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly int4_mt4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly int4_mt4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly int4_mt4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly int4_mt4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly int4_mt4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly int4_mt4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly int4_mt4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly int4_mt4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly int4_mt4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly int4_mt4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly int4_mt4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly int4_mt4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly int4_mt4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly int4_mt4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // int3_mt4

#region int3_mt8

public partial struct int3_mt8 
{
    public readonly int4_mt8 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly int4_mt8 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly int4_mt8 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly int4_mt8 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly int4_mt8 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly int4_mt8 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly int4_mt8 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly int4_mt8 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly int4_mt8 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly int4_mt8 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly int4_mt8 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly int4_mt8 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly int4_mt8 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly int4_mt8 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly int4_mt8 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly int4_mt8 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly int4_mt8 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly int4_mt8 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly int4_mt8 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly int4_mt8 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly int4_mt8 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly int4_mt8 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly int4_mt8 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly int4_mt8 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly int4_mt8 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly int4_mt8 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly int4_mt8 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly int4_mt8 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly int4_mt8 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly int4_mt8 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly int4_mt8 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly int4_mt8 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly int4_mt8 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly int4_mt8 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly int4_mt8 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly int4_mt8 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly int4_mt8 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly int4_mt8 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly int4_mt8 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly int4_mt8 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly int4_mt8 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly int4_mt8 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly int4_mt8 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly int4_mt8 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly int4_mt8 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly int4_mt8 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly int4_mt8 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly int4_mt8 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly int4_mt8 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly int4_mt8 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly int4_mt8 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly int4_mt8 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly int4_mt8 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly int4_mt8 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly int4_mt8 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly int4_mt8 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly int4_mt8 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly int4_mt8 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly int4_mt8 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly int4_mt8 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly int4_mt8 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly int4_mt8 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly int4_mt8 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly int4_mt8 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly int4_mt8 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly int4_mt8 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly int4_mt8 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly int4_mt8 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly int4_mt8 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly int4_mt8 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly int4_mt8 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly int4_mt8 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly int4_mt8 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly int4_mt8 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly int4_mt8 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly int4_mt8 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly int4_mt8 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly int4_mt8 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly int4_mt8 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly int4_mt8 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly int4_mt8 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly int4_mt8 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly int4_mt8 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly int4_mt8 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly int4_mt8 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly int4_mt8 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly int4_mt8 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly int4_mt8 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly int4_mt8 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly int4_mt8 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly int4_mt8 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly int4_mt8 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly int4_mt8 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly int4_mt8 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly int4_mt8 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly int4_mt8 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly int4_mt8 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly int4_mt8 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly int4_mt8 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly int4_mt8 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly int4_mt8 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly int4_mt8 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly int4_mt8 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly int4_mt8 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly int4_mt8 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly int4_mt8 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly int4_mt8 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly int4_mt8 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly int4_mt8 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly int4_mt8 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly int4_mt8 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly int4_mt8 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly int4_mt8 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly int4_mt8 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly int4_mt8 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly int4_mt8 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly int4_mt8 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly int4_mt8 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly int4_mt8 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly int4_mt8 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly int4_mt8 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly int4_mt8 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly int4_mt8 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly int4_mt8 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly int4_mt8 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly int4_mt8 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly int4_mt8 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly int4_mt8 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly int4_mt8 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly int4_mt8 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly int4_mt8 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly int4_mt8 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly int4_mt8 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly int4_mt8 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly int4_mt8 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly int4_mt8 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly int4_mt8 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly int4_mt8 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly int4_mt8 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly int4_mt8 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly int4_mt8 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly int4_mt8 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly int4_mt8 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly int4_mt8 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly int4_mt8 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly int4_mt8 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly int4_mt8 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly int4_mt8 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly int4_mt8 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly int4_mt8 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly int4_mt8 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly int4_mt8 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly int4_mt8 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly int4_mt8 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly int4_mt8 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly int4_mt8 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly int4_mt8 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly int4_mt8 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly int4_mt8 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly int4_mt8 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly int4_mt8 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly int4_mt8 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // int3_mt8

#region int3_mt16

public partial struct int3_mt16 
{
    public readonly int4_mt16 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly int4_mt16 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly int4_mt16 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly int4_mt16 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly int4_mt16 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly int4_mt16 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly int4_mt16 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly int4_mt16 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly int4_mt16 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly int4_mt16 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly int4_mt16 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly int4_mt16 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly int4_mt16 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly int4_mt16 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly int4_mt16 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly int4_mt16 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly int4_mt16 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly int4_mt16 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly int4_mt16 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly int4_mt16 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly int4_mt16 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly int4_mt16 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly int4_mt16 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly int4_mt16 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly int4_mt16 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly int4_mt16 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly int4_mt16 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly int4_mt16 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly int4_mt16 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly int4_mt16 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly int4_mt16 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly int4_mt16 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly int4_mt16 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly int4_mt16 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly int4_mt16 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly int4_mt16 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly int4_mt16 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly int4_mt16 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly int4_mt16 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly int4_mt16 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly int4_mt16 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly int4_mt16 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly int4_mt16 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly int4_mt16 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly int4_mt16 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly int4_mt16 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly int4_mt16 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly int4_mt16 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly int4_mt16 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly int4_mt16 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly int4_mt16 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly int4_mt16 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly int4_mt16 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly int4_mt16 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly int4_mt16 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly int4_mt16 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly int4_mt16 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly int4_mt16 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly int4_mt16 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly int4_mt16 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly int4_mt16 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly int4_mt16 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly int4_mt16 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly int4_mt16 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly int4_mt16 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly int4_mt16 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly int4_mt16 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly int4_mt16 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly int4_mt16 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly int4_mt16 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly int4_mt16 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly int4_mt16 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly int4_mt16 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly int4_mt16 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly int4_mt16 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly int4_mt16 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly int4_mt16 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly int4_mt16 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly int4_mt16 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly int4_mt16 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly int4_mt16 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly int4_mt16 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly int4_mt16 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly int4_mt16 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly int4_mt16 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly int4_mt16 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly int4_mt16 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly int4_mt16 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly int4_mt16 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly int4_mt16 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly int4_mt16 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly int4_mt16 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly int4_mt16 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly int4_mt16 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly int4_mt16 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly int4_mt16 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly int4_mt16 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly int4_mt16 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly int4_mt16 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly int4_mt16 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly int4_mt16 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly int4_mt16 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly int4_mt16 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly int4_mt16 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly int4_mt16 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly int4_mt16 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly int4_mt16 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly int4_mt16 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly int4_mt16 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly int4_mt16 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly int4_mt16 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly int4_mt16 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly int4_mt16 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly int4_mt16 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly int4_mt16 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly int4_mt16 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly int4_mt16 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly int4_mt16 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly int4_mt16 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly int4_mt16 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly int4_mt16 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly int4_mt16 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly int4_mt16 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly int4_mt16 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly int4_mt16 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly int4_mt16 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly int4_mt16 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly int4_mt16 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly int4_mt16 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly int4_mt16 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly int4_mt16 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly int4_mt16 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly int4_mt16 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly int4_mt16 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly int4_mt16 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly int4_mt16 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly int4_mt16 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly int4_mt16 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly int4_mt16 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly int4_mt16 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly int4_mt16 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly int4_mt16 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly int4_mt16 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly int4_mt16 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly int4_mt16 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly int4_mt16 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly int4_mt16 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly int4_mt16 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly int4_mt16 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly int4_mt16 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly int4_mt16 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly int4_mt16 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly int4_mt16 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly int4_mt16 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly int4_mt16 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly int4_mt16 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly int4_mt16 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly int4_mt16 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly int4_mt16 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly int4_mt16 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly int4_mt16 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly int4_mt16 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // int3_mt16

#region int3_mt32

public partial struct int3_mt32 
{
    public readonly int4_mt32 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly int4_mt32 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly int4_mt32 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly int4_mt32 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly int4_mt32 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly int4_mt32 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly int4_mt32 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly int4_mt32 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly int4_mt32 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly int4_mt32 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly int4_mt32 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly int4_mt32 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly int4_mt32 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly int4_mt32 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly int4_mt32 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly int4_mt32 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly int4_mt32 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly int4_mt32 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly int4_mt32 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly int4_mt32 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly int4_mt32 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly int4_mt32 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly int4_mt32 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly int4_mt32 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly int4_mt32 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly int4_mt32 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly int4_mt32 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly int4_mt32 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly int4_mt32 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly int4_mt32 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly int4_mt32 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly int4_mt32 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly int4_mt32 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly int4_mt32 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly int4_mt32 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly int4_mt32 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly int4_mt32 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly int4_mt32 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly int4_mt32 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly int4_mt32 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly int4_mt32 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly int4_mt32 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly int4_mt32 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly int4_mt32 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly int4_mt32 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly int4_mt32 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly int4_mt32 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly int4_mt32 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly int4_mt32 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly int4_mt32 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly int4_mt32 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly int4_mt32 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly int4_mt32 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly int4_mt32 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly int4_mt32 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly int4_mt32 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly int4_mt32 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly int4_mt32 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly int4_mt32 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly int4_mt32 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly int4_mt32 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly int4_mt32 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly int4_mt32 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly int4_mt32 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly int4_mt32 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly int4_mt32 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly int4_mt32 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly int4_mt32 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly int4_mt32 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly int4_mt32 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly int4_mt32 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly int4_mt32 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly int4_mt32 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly int4_mt32 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly int4_mt32 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly int4_mt32 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly int4_mt32 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly int4_mt32 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly int4_mt32 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly int4_mt32 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly int4_mt32 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly int4_mt32 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly int4_mt32 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly int4_mt32 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly int4_mt32 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly int4_mt32 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly int4_mt32 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly int4_mt32 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly int4_mt32 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly int4_mt32 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly int4_mt32 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly int4_mt32 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly int4_mt32 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly int4_mt32 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly int4_mt32 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly int4_mt32 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly int4_mt32 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly int4_mt32 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly int4_mt32 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly int4_mt32 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly int4_mt32 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly int4_mt32 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly int4_mt32 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly int4_mt32 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly int4_mt32 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly int4_mt32 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly int4_mt32 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly int4_mt32 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly int4_mt32 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly int4_mt32 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly int4_mt32 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly int4_mt32 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly int4_mt32 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly int4_mt32 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly int4_mt32 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly int4_mt32 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly int4_mt32 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly int4_mt32 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly int4_mt32 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly int4_mt32 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly int4_mt32 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly int4_mt32 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly int4_mt32 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly int4_mt32 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly int4_mt32 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly int4_mt32 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly int4_mt32 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly int4_mt32 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly int4_mt32 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly int4_mt32 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly int4_mt32 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly int4_mt32 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly int4_mt32 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly int4_mt32 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly int4_mt32 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly int4_mt32 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly int4_mt32 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly int4_mt32 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly int4_mt32 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly int4_mt32 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly int4_mt32 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly int4_mt32 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly int4_mt32 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly int4_mt32 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly int4_mt32 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly int4_mt32 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly int4_mt32 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly int4_mt32 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly int4_mt32 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly int4_mt32 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly int4_mt32 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly int4_mt32 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly int4_mt32 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly int4_mt32 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly int4_mt32 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly int4_mt32 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly int4_mt32 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly int4_mt32 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly int4_mt32 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly int4_mt32 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly int4_mt32 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly int4_mt32 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // int3_mt32

#region uint3_mt4

public partial struct uint3_mt4 
{
    public readonly uint4_mt4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly uint4_mt4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly uint4_mt4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly uint4_mt4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly uint4_mt4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly uint4_mt4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly uint4_mt4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly uint4_mt4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly uint4_mt4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly uint4_mt4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly uint4_mt4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly uint4_mt4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly uint4_mt4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly uint4_mt4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly uint4_mt4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly uint4_mt4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly uint4_mt4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly uint4_mt4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly uint4_mt4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly uint4_mt4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly uint4_mt4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly uint4_mt4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly uint4_mt4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly uint4_mt4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly uint4_mt4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly uint4_mt4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly uint4_mt4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly uint4_mt4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly uint4_mt4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly uint4_mt4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly uint4_mt4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly uint4_mt4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly uint4_mt4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly uint4_mt4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly uint4_mt4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly uint4_mt4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly uint4_mt4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly uint4_mt4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly uint4_mt4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly uint4_mt4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly uint4_mt4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly uint4_mt4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly uint4_mt4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly uint4_mt4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly uint4_mt4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly uint4_mt4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly uint4_mt4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly uint4_mt4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly uint4_mt4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly uint4_mt4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly uint4_mt4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly uint4_mt4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly uint4_mt4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly uint4_mt4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly uint4_mt4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly uint4_mt4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly uint4_mt4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly uint4_mt4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly uint4_mt4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly uint4_mt4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly uint4_mt4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly uint4_mt4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly uint4_mt4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly uint4_mt4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly uint4_mt4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly uint4_mt4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly uint4_mt4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly uint4_mt4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly uint4_mt4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly uint4_mt4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly uint4_mt4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly uint4_mt4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly uint4_mt4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly uint4_mt4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly uint4_mt4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly uint4_mt4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly uint4_mt4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly uint4_mt4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly uint4_mt4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly uint4_mt4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly uint4_mt4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly uint4_mt4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly uint4_mt4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly uint4_mt4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly uint4_mt4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly uint4_mt4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly uint4_mt4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly uint4_mt4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly uint4_mt4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly uint4_mt4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly uint4_mt4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly uint4_mt4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly uint4_mt4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly uint4_mt4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly uint4_mt4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly uint4_mt4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly uint4_mt4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly uint4_mt4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly uint4_mt4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly uint4_mt4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly uint4_mt4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly uint4_mt4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly uint4_mt4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly uint4_mt4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly uint4_mt4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly uint4_mt4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly uint4_mt4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly uint4_mt4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly uint4_mt4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly uint4_mt4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly uint4_mt4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly uint4_mt4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly uint4_mt4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly uint4_mt4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly uint4_mt4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly uint4_mt4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly uint4_mt4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly uint4_mt4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly uint4_mt4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly uint4_mt4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly uint4_mt4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly uint4_mt4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly uint4_mt4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly uint4_mt4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly uint4_mt4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly uint4_mt4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly uint4_mt4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly uint4_mt4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly uint4_mt4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly uint4_mt4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly uint4_mt4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly uint4_mt4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly uint4_mt4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly uint4_mt4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly uint4_mt4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly uint4_mt4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly uint4_mt4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly uint4_mt4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly uint4_mt4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly uint4_mt4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly uint4_mt4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly uint4_mt4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly uint4_mt4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly uint4_mt4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly uint4_mt4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly uint4_mt4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly uint4_mt4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly uint4_mt4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly uint4_mt4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly uint4_mt4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly uint4_mt4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly uint4_mt4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly uint4_mt4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly uint4_mt4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly uint4_mt4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly uint4_mt4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly uint4_mt4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly uint4_mt4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly uint4_mt4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly uint4_mt4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly uint4_mt4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly uint4_mt4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // uint3_mt4

#region uint3_mt8

public partial struct uint3_mt8 
{
    public readonly uint4_mt8 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly uint4_mt8 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly uint4_mt8 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly uint4_mt8 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly uint4_mt8 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly uint4_mt8 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly uint4_mt8 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly uint4_mt8 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly uint4_mt8 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly uint4_mt8 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly uint4_mt8 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly uint4_mt8 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly uint4_mt8 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly uint4_mt8 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly uint4_mt8 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly uint4_mt8 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly uint4_mt8 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly uint4_mt8 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly uint4_mt8 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly uint4_mt8 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly uint4_mt8 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly uint4_mt8 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly uint4_mt8 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly uint4_mt8 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly uint4_mt8 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly uint4_mt8 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly uint4_mt8 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly uint4_mt8 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly uint4_mt8 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly uint4_mt8 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly uint4_mt8 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly uint4_mt8 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly uint4_mt8 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly uint4_mt8 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly uint4_mt8 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly uint4_mt8 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly uint4_mt8 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly uint4_mt8 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly uint4_mt8 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly uint4_mt8 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly uint4_mt8 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly uint4_mt8 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly uint4_mt8 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly uint4_mt8 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly uint4_mt8 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly uint4_mt8 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly uint4_mt8 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly uint4_mt8 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly uint4_mt8 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly uint4_mt8 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly uint4_mt8 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly uint4_mt8 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly uint4_mt8 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly uint4_mt8 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly uint4_mt8 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly uint4_mt8 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly uint4_mt8 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly uint4_mt8 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly uint4_mt8 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly uint4_mt8 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly uint4_mt8 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly uint4_mt8 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly uint4_mt8 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly uint4_mt8 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly uint4_mt8 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly uint4_mt8 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly uint4_mt8 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly uint4_mt8 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly uint4_mt8 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly uint4_mt8 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly uint4_mt8 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly uint4_mt8 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly uint4_mt8 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly uint4_mt8 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly uint4_mt8 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly uint4_mt8 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly uint4_mt8 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly uint4_mt8 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly uint4_mt8 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly uint4_mt8 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly uint4_mt8 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly uint4_mt8 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly uint4_mt8 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly uint4_mt8 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly uint4_mt8 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly uint4_mt8 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly uint4_mt8 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly uint4_mt8 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly uint4_mt8 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly uint4_mt8 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly uint4_mt8 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly uint4_mt8 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly uint4_mt8 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly uint4_mt8 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly uint4_mt8 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly uint4_mt8 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly uint4_mt8 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly uint4_mt8 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly uint4_mt8 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly uint4_mt8 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly uint4_mt8 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly uint4_mt8 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly uint4_mt8 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly uint4_mt8 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly uint4_mt8 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly uint4_mt8 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly uint4_mt8 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly uint4_mt8 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly uint4_mt8 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly uint4_mt8 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly uint4_mt8 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly uint4_mt8 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly uint4_mt8 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly uint4_mt8 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly uint4_mt8 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly uint4_mt8 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly uint4_mt8 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly uint4_mt8 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly uint4_mt8 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly uint4_mt8 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly uint4_mt8 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly uint4_mt8 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly uint4_mt8 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly uint4_mt8 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly uint4_mt8 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly uint4_mt8 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly uint4_mt8 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly uint4_mt8 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly uint4_mt8 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly uint4_mt8 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly uint4_mt8 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly uint4_mt8 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly uint4_mt8 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly uint4_mt8 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly uint4_mt8 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly uint4_mt8 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly uint4_mt8 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly uint4_mt8 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly uint4_mt8 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly uint4_mt8 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly uint4_mt8 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly uint4_mt8 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly uint4_mt8 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly uint4_mt8 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly uint4_mt8 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly uint4_mt8 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly uint4_mt8 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly uint4_mt8 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly uint4_mt8 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly uint4_mt8 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly uint4_mt8 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly uint4_mt8 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly uint4_mt8 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly uint4_mt8 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly uint4_mt8 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly uint4_mt8 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly uint4_mt8 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly uint4_mt8 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly uint4_mt8 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly uint4_mt8 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly uint4_mt8 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly uint4_mt8 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // uint3_mt8

#region uint3_mt16

public partial struct uint3_mt16 
{
    public readonly uint4_mt16 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly uint4_mt16 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly uint4_mt16 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly uint4_mt16 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly uint4_mt16 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly uint4_mt16 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly uint4_mt16 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly uint4_mt16 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly uint4_mt16 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly uint4_mt16 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly uint4_mt16 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly uint4_mt16 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly uint4_mt16 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly uint4_mt16 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly uint4_mt16 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly uint4_mt16 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly uint4_mt16 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly uint4_mt16 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly uint4_mt16 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly uint4_mt16 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly uint4_mt16 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly uint4_mt16 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly uint4_mt16 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly uint4_mt16 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly uint4_mt16 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly uint4_mt16 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly uint4_mt16 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly uint4_mt16 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly uint4_mt16 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly uint4_mt16 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly uint4_mt16 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly uint4_mt16 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly uint4_mt16 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly uint4_mt16 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly uint4_mt16 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly uint4_mt16 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly uint4_mt16 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly uint4_mt16 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly uint4_mt16 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly uint4_mt16 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly uint4_mt16 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly uint4_mt16 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly uint4_mt16 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly uint4_mt16 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly uint4_mt16 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly uint4_mt16 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly uint4_mt16 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly uint4_mt16 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly uint4_mt16 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly uint4_mt16 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly uint4_mt16 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly uint4_mt16 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly uint4_mt16 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly uint4_mt16 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly uint4_mt16 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly uint4_mt16 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly uint4_mt16 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly uint4_mt16 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly uint4_mt16 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly uint4_mt16 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly uint4_mt16 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly uint4_mt16 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly uint4_mt16 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly uint4_mt16 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly uint4_mt16 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly uint4_mt16 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly uint4_mt16 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly uint4_mt16 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly uint4_mt16 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly uint4_mt16 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly uint4_mt16 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly uint4_mt16 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly uint4_mt16 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly uint4_mt16 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly uint4_mt16 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly uint4_mt16 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly uint4_mt16 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly uint4_mt16 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly uint4_mt16 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly uint4_mt16 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly uint4_mt16 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly uint4_mt16 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly uint4_mt16 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly uint4_mt16 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly uint4_mt16 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly uint4_mt16 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly uint4_mt16 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly uint4_mt16 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly uint4_mt16 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly uint4_mt16 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly uint4_mt16 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly uint4_mt16 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly uint4_mt16 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly uint4_mt16 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly uint4_mt16 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly uint4_mt16 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly uint4_mt16 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly uint4_mt16 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly uint4_mt16 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly uint4_mt16 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly uint4_mt16 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly uint4_mt16 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly uint4_mt16 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly uint4_mt16 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly uint4_mt16 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly uint4_mt16 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly uint4_mt16 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly uint4_mt16 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly uint4_mt16 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly uint4_mt16 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly uint4_mt16 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly uint4_mt16 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly uint4_mt16 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly uint4_mt16 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly uint4_mt16 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly uint4_mt16 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly uint4_mt16 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly uint4_mt16 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly uint4_mt16 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly uint4_mt16 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly uint4_mt16 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly uint4_mt16 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly uint4_mt16 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly uint4_mt16 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly uint4_mt16 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly uint4_mt16 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly uint4_mt16 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly uint4_mt16 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly uint4_mt16 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly uint4_mt16 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly uint4_mt16 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly uint4_mt16 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly uint4_mt16 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly uint4_mt16 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly uint4_mt16 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly uint4_mt16 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly uint4_mt16 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly uint4_mt16 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly uint4_mt16 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly uint4_mt16 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly uint4_mt16 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly uint4_mt16 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly uint4_mt16 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly uint4_mt16 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly uint4_mt16 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly uint4_mt16 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly uint4_mt16 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly uint4_mt16 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly uint4_mt16 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly uint4_mt16 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly uint4_mt16 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly uint4_mt16 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly uint4_mt16 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly uint4_mt16 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly uint4_mt16 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly uint4_mt16 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly uint4_mt16 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly uint4_mt16 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly uint4_mt16 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly uint4_mt16 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly uint4_mt16 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly uint4_mt16 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // uint3_mt16

#region uint3_mt32

public partial struct uint3_mt32 
{
    public readonly uint4_mt32 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly uint4_mt32 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly uint4_mt32 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly uint4_mt32 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly uint4_mt32 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly uint4_mt32 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly uint4_mt32 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly uint4_mt32 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly uint4_mt32 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly uint4_mt32 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly uint4_mt32 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly uint4_mt32 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly uint4_mt32 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly uint4_mt32 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly uint4_mt32 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly uint4_mt32 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly uint4_mt32 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly uint4_mt32 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly uint4_mt32 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly uint4_mt32 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly uint4_mt32 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly uint4_mt32 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly uint4_mt32 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly uint4_mt32 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly uint4_mt32 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly uint4_mt32 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly uint4_mt32 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly uint4_mt32 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly uint4_mt32 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly uint4_mt32 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly uint4_mt32 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly uint4_mt32 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly uint4_mt32 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly uint4_mt32 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly uint4_mt32 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly uint4_mt32 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly uint4_mt32 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly uint4_mt32 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly uint4_mt32 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly uint4_mt32 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly uint4_mt32 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly uint4_mt32 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly uint4_mt32 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly uint4_mt32 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly uint4_mt32 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly uint4_mt32 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly uint4_mt32 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly uint4_mt32 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly uint4_mt32 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly uint4_mt32 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly uint4_mt32 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly uint4_mt32 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly uint4_mt32 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly uint4_mt32 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly uint4_mt32 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly uint4_mt32 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly uint4_mt32 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly uint4_mt32 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly uint4_mt32 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly uint4_mt32 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly uint4_mt32 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly uint4_mt32 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly uint4_mt32 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly uint4_mt32 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly uint4_mt32 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly uint4_mt32 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly uint4_mt32 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly uint4_mt32 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly uint4_mt32 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly uint4_mt32 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly uint4_mt32 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly uint4_mt32 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly uint4_mt32 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly uint4_mt32 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly uint4_mt32 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly uint4_mt32 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly uint4_mt32 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly uint4_mt32 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly uint4_mt32 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly uint4_mt32 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly uint4_mt32 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly uint4_mt32 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly uint4_mt32 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly uint4_mt32 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly uint4_mt32 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly uint4_mt32 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly uint4_mt32 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly uint4_mt32 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly uint4_mt32 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly uint4_mt32 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly uint4_mt32 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly uint4_mt32 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly uint4_mt32 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly uint4_mt32 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly uint4_mt32 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly uint4_mt32 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly uint4_mt32 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly uint4_mt32 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly uint4_mt32 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly uint4_mt32 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly uint4_mt32 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly uint4_mt32 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly uint4_mt32 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly uint4_mt32 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly uint4_mt32 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly uint4_mt32 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly uint4_mt32 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly uint4_mt32 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly uint4_mt32 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly uint4_mt32 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly uint4_mt32 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly uint4_mt32 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly uint4_mt32 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly uint4_mt32 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly uint4_mt32 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly uint4_mt32 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly uint4_mt32 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly uint4_mt32 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly uint4_mt32 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly uint4_mt32 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly uint4_mt32 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly uint4_mt32 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly uint4_mt32 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly uint4_mt32 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly uint4_mt32 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly uint4_mt32 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly uint4_mt32 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly uint4_mt32 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly uint4_mt32 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly uint4_mt32 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly uint4_mt32 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly uint4_mt32 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly uint4_mt32 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly uint4_mt32 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly uint4_mt32 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly uint4_mt32 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly uint4_mt32 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly uint4_mt32 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly uint4_mt32 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly uint4_mt32 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly uint4_mt32 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly uint4_mt32 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly uint4_mt32 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly uint4_mt32 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly uint4_mt32 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly uint4_mt32 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly uint4_mt32 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly uint4_mt32 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly uint4_mt32 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly uint4_mt32 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly uint4_mt32 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly uint4_mt32 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly uint4_mt32 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly uint4_mt32 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly uint4_mt32 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly uint4_mt32 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly uint4_mt32 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly uint4_mt32 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly uint4_mt32 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly uint4_mt32 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly uint4_mt32 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly uint4_mt32 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // uint3_mt32

#region long3_mt4

public partial struct long3_mt4 
{
    public readonly long4_mt4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly long4_mt4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly long4_mt4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly long4_mt4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly long4_mt4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly long4_mt4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly long4_mt4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly long4_mt4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly long4_mt4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly long4_mt4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly long4_mt4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly long4_mt4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly long4_mt4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly long4_mt4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly long4_mt4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly long4_mt4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly long4_mt4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly long4_mt4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly long4_mt4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly long4_mt4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly long4_mt4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly long4_mt4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly long4_mt4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly long4_mt4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly long4_mt4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly long4_mt4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly long4_mt4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly long4_mt4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly long4_mt4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly long4_mt4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly long4_mt4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly long4_mt4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly long4_mt4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly long4_mt4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly long4_mt4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly long4_mt4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly long4_mt4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly long4_mt4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly long4_mt4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly long4_mt4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly long4_mt4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly long4_mt4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly long4_mt4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly long4_mt4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly long4_mt4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly long4_mt4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly long4_mt4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly long4_mt4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly long4_mt4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly long4_mt4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly long4_mt4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly long4_mt4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly long4_mt4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly long4_mt4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly long4_mt4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly long4_mt4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly long4_mt4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly long4_mt4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly long4_mt4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly long4_mt4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly long4_mt4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly long4_mt4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly long4_mt4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly long4_mt4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly long4_mt4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly long4_mt4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly long4_mt4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly long4_mt4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly long4_mt4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly long4_mt4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly long4_mt4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly long4_mt4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly long4_mt4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly long4_mt4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly long4_mt4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly long4_mt4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly long4_mt4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly long4_mt4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly long4_mt4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly long4_mt4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly long4_mt4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly long4_mt4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly long4_mt4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly long4_mt4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly long4_mt4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly long4_mt4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly long4_mt4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly long4_mt4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly long4_mt4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly long4_mt4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly long4_mt4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly long4_mt4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly long4_mt4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly long4_mt4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly long4_mt4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly long4_mt4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly long4_mt4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly long4_mt4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly long4_mt4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly long4_mt4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly long4_mt4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly long4_mt4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly long4_mt4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly long4_mt4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly long4_mt4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly long4_mt4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly long4_mt4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly long4_mt4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly long4_mt4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly long4_mt4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly long4_mt4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly long4_mt4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly long4_mt4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly long4_mt4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly long4_mt4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly long4_mt4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly long4_mt4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly long4_mt4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly long4_mt4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly long4_mt4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly long4_mt4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly long4_mt4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly long4_mt4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly long4_mt4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly long4_mt4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly long4_mt4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly long4_mt4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly long4_mt4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly long4_mt4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly long4_mt4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly long4_mt4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly long4_mt4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly long4_mt4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly long4_mt4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly long4_mt4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly long4_mt4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly long4_mt4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly long4_mt4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly long4_mt4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly long4_mt4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly long4_mt4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly long4_mt4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly long4_mt4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly long4_mt4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly long4_mt4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly long4_mt4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly long4_mt4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly long4_mt4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly long4_mt4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly long4_mt4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly long4_mt4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly long4_mt4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly long4_mt4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly long4_mt4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly long4_mt4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly long4_mt4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly long4_mt4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly long4_mt4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly long4_mt4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly long4_mt4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly long4_mt4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly long4_mt4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // long3_mt4

#region long3_mt8

public partial struct long3_mt8 
{
    public readonly long4_mt8 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly long4_mt8 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly long4_mt8 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly long4_mt8 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly long4_mt8 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly long4_mt8 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly long4_mt8 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly long4_mt8 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly long4_mt8 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly long4_mt8 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly long4_mt8 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly long4_mt8 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly long4_mt8 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly long4_mt8 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly long4_mt8 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly long4_mt8 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly long4_mt8 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly long4_mt8 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly long4_mt8 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly long4_mt8 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly long4_mt8 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly long4_mt8 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly long4_mt8 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly long4_mt8 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly long4_mt8 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly long4_mt8 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly long4_mt8 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly long4_mt8 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly long4_mt8 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly long4_mt8 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly long4_mt8 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly long4_mt8 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly long4_mt8 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly long4_mt8 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly long4_mt8 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly long4_mt8 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly long4_mt8 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly long4_mt8 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly long4_mt8 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly long4_mt8 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly long4_mt8 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly long4_mt8 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly long4_mt8 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly long4_mt8 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly long4_mt8 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly long4_mt8 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly long4_mt8 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly long4_mt8 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly long4_mt8 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly long4_mt8 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly long4_mt8 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly long4_mt8 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly long4_mt8 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly long4_mt8 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly long4_mt8 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly long4_mt8 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly long4_mt8 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly long4_mt8 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly long4_mt8 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly long4_mt8 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly long4_mt8 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly long4_mt8 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly long4_mt8 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly long4_mt8 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly long4_mt8 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly long4_mt8 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly long4_mt8 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly long4_mt8 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly long4_mt8 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly long4_mt8 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly long4_mt8 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly long4_mt8 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly long4_mt8 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly long4_mt8 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly long4_mt8 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly long4_mt8 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly long4_mt8 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly long4_mt8 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly long4_mt8 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly long4_mt8 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly long4_mt8 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly long4_mt8 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly long4_mt8 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly long4_mt8 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly long4_mt8 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly long4_mt8 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly long4_mt8 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly long4_mt8 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly long4_mt8 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly long4_mt8 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly long4_mt8 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly long4_mt8 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly long4_mt8 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly long4_mt8 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly long4_mt8 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly long4_mt8 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly long4_mt8 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly long4_mt8 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly long4_mt8 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly long4_mt8 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly long4_mt8 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly long4_mt8 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly long4_mt8 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly long4_mt8 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly long4_mt8 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly long4_mt8 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly long4_mt8 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly long4_mt8 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly long4_mt8 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly long4_mt8 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly long4_mt8 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly long4_mt8 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly long4_mt8 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly long4_mt8 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly long4_mt8 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly long4_mt8 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly long4_mt8 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly long4_mt8 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly long4_mt8 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly long4_mt8 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly long4_mt8 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly long4_mt8 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly long4_mt8 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly long4_mt8 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly long4_mt8 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly long4_mt8 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly long4_mt8 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly long4_mt8 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly long4_mt8 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly long4_mt8 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly long4_mt8 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly long4_mt8 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly long4_mt8 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly long4_mt8 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly long4_mt8 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly long4_mt8 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly long4_mt8 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly long4_mt8 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly long4_mt8 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly long4_mt8 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly long4_mt8 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly long4_mt8 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly long4_mt8 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly long4_mt8 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly long4_mt8 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly long4_mt8 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly long4_mt8 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly long4_mt8 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly long4_mt8 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly long4_mt8 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly long4_mt8 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly long4_mt8 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly long4_mt8 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly long4_mt8 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly long4_mt8 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly long4_mt8 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly long4_mt8 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly long4_mt8 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly long4_mt8 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly long4_mt8 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly long4_mt8 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly long4_mt8 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // long3_mt8

#region long3_mt16

public partial struct long3_mt16 
{
    public readonly long4_mt16 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly long4_mt16 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly long4_mt16 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly long4_mt16 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly long4_mt16 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly long4_mt16 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly long4_mt16 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly long4_mt16 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly long4_mt16 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly long4_mt16 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly long4_mt16 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly long4_mt16 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly long4_mt16 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly long4_mt16 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly long4_mt16 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly long4_mt16 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly long4_mt16 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly long4_mt16 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly long4_mt16 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly long4_mt16 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly long4_mt16 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly long4_mt16 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly long4_mt16 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly long4_mt16 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly long4_mt16 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly long4_mt16 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly long4_mt16 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly long4_mt16 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly long4_mt16 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly long4_mt16 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly long4_mt16 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly long4_mt16 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly long4_mt16 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly long4_mt16 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly long4_mt16 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly long4_mt16 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly long4_mt16 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly long4_mt16 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly long4_mt16 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly long4_mt16 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly long4_mt16 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly long4_mt16 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly long4_mt16 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly long4_mt16 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly long4_mt16 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly long4_mt16 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly long4_mt16 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly long4_mt16 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly long4_mt16 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly long4_mt16 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly long4_mt16 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly long4_mt16 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly long4_mt16 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly long4_mt16 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly long4_mt16 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly long4_mt16 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly long4_mt16 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly long4_mt16 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly long4_mt16 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly long4_mt16 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly long4_mt16 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly long4_mt16 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly long4_mt16 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly long4_mt16 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly long4_mt16 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly long4_mt16 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly long4_mt16 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly long4_mt16 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly long4_mt16 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly long4_mt16 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly long4_mt16 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly long4_mt16 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly long4_mt16 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly long4_mt16 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly long4_mt16 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly long4_mt16 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly long4_mt16 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly long4_mt16 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly long4_mt16 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly long4_mt16 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly long4_mt16 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly long4_mt16 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly long4_mt16 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly long4_mt16 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly long4_mt16 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly long4_mt16 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly long4_mt16 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly long4_mt16 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly long4_mt16 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly long4_mt16 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly long4_mt16 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly long4_mt16 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly long4_mt16 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly long4_mt16 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly long4_mt16 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly long4_mt16 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly long4_mt16 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly long4_mt16 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly long4_mt16 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly long4_mt16 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly long4_mt16 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly long4_mt16 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly long4_mt16 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly long4_mt16 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly long4_mt16 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly long4_mt16 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly long4_mt16 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly long4_mt16 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly long4_mt16 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly long4_mt16 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly long4_mt16 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly long4_mt16 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly long4_mt16 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly long4_mt16 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly long4_mt16 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly long4_mt16 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly long4_mt16 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly long4_mt16 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly long4_mt16 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly long4_mt16 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly long4_mt16 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly long4_mt16 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly long4_mt16 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly long4_mt16 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly long4_mt16 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly long4_mt16 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly long4_mt16 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly long4_mt16 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly long4_mt16 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly long4_mt16 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly long4_mt16 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly long4_mt16 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly long4_mt16 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly long4_mt16 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly long4_mt16 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly long4_mt16 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly long4_mt16 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly long4_mt16 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly long4_mt16 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly long4_mt16 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly long4_mt16 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly long4_mt16 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly long4_mt16 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly long4_mt16 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly long4_mt16 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly long4_mt16 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly long4_mt16 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly long4_mt16 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly long4_mt16 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly long4_mt16 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly long4_mt16 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly long4_mt16 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly long4_mt16 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly long4_mt16 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly long4_mt16 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly long4_mt16 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly long4_mt16 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly long4_mt16 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly long4_mt16 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly long4_mt16 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly long4_mt16 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly long4_mt16 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // long3_mt16

#region long3_mt32

public partial struct long3_mt32 
{
    public readonly long4_mt32 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly long4_mt32 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly long4_mt32 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly long4_mt32 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly long4_mt32 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly long4_mt32 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly long4_mt32 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly long4_mt32 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly long4_mt32 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly long4_mt32 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly long4_mt32 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly long4_mt32 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly long4_mt32 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly long4_mt32 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly long4_mt32 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly long4_mt32 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly long4_mt32 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly long4_mt32 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly long4_mt32 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly long4_mt32 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly long4_mt32 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly long4_mt32 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly long4_mt32 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly long4_mt32 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly long4_mt32 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly long4_mt32 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly long4_mt32 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly long4_mt32 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly long4_mt32 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly long4_mt32 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly long4_mt32 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly long4_mt32 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly long4_mt32 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly long4_mt32 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly long4_mt32 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly long4_mt32 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly long4_mt32 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly long4_mt32 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly long4_mt32 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly long4_mt32 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly long4_mt32 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly long4_mt32 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly long4_mt32 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly long4_mt32 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly long4_mt32 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly long4_mt32 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly long4_mt32 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly long4_mt32 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly long4_mt32 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly long4_mt32 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly long4_mt32 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly long4_mt32 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly long4_mt32 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly long4_mt32 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly long4_mt32 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly long4_mt32 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly long4_mt32 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly long4_mt32 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly long4_mt32 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly long4_mt32 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly long4_mt32 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly long4_mt32 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly long4_mt32 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly long4_mt32 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly long4_mt32 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly long4_mt32 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly long4_mt32 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly long4_mt32 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly long4_mt32 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly long4_mt32 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly long4_mt32 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly long4_mt32 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly long4_mt32 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly long4_mt32 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly long4_mt32 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly long4_mt32 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly long4_mt32 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly long4_mt32 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly long4_mt32 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly long4_mt32 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly long4_mt32 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly long4_mt32 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly long4_mt32 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly long4_mt32 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly long4_mt32 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly long4_mt32 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly long4_mt32 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly long4_mt32 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly long4_mt32 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly long4_mt32 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly long4_mt32 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly long4_mt32 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly long4_mt32 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly long4_mt32 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly long4_mt32 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly long4_mt32 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly long4_mt32 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly long4_mt32 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly long4_mt32 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly long4_mt32 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly long4_mt32 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly long4_mt32 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly long4_mt32 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly long4_mt32 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly long4_mt32 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly long4_mt32 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly long4_mt32 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly long4_mt32 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly long4_mt32 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly long4_mt32 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly long4_mt32 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly long4_mt32 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly long4_mt32 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly long4_mt32 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly long4_mt32 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly long4_mt32 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly long4_mt32 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly long4_mt32 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly long4_mt32 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly long4_mt32 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly long4_mt32 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly long4_mt32 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly long4_mt32 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly long4_mt32 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly long4_mt32 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly long4_mt32 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly long4_mt32 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly long4_mt32 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly long4_mt32 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly long4_mt32 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly long4_mt32 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly long4_mt32 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly long4_mt32 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly long4_mt32 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly long4_mt32 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly long4_mt32 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly long4_mt32 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly long4_mt32 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly long4_mt32 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly long4_mt32 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly long4_mt32 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly long4_mt32 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly long4_mt32 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly long4_mt32 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly long4_mt32 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly long4_mt32 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly long4_mt32 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly long4_mt32 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly long4_mt32 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly long4_mt32 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly long4_mt32 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly long4_mt32 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly long4_mt32 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly long4_mt32 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly long4_mt32 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly long4_mt32 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly long4_mt32 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly long4_mt32 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly long4_mt32 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly long4_mt32 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly long4_mt32 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly long4_mt32 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // long3_mt32

#region ulong3_mt4

public partial struct ulong3_mt4 
{
    public readonly ulong4_mt4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly ulong4_mt4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly ulong4_mt4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly ulong4_mt4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly ulong4_mt4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly ulong4_mt4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly ulong4_mt4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly ulong4_mt4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly ulong4_mt4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly ulong4_mt4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly ulong4_mt4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly ulong4_mt4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly ulong4_mt4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly ulong4_mt4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly ulong4_mt4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly ulong4_mt4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly ulong4_mt4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly ulong4_mt4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly ulong4_mt4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly ulong4_mt4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly ulong4_mt4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly ulong4_mt4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly ulong4_mt4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly ulong4_mt4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly ulong4_mt4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly ulong4_mt4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly ulong4_mt4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly ulong4_mt4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly ulong4_mt4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly ulong4_mt4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly ulong4_mt4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly ulong4_mt4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly ulong4_mt4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly ulong4_mt4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly ulong4_mt4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly ulong4_mt4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly ulong4_mt4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly ulong4_mt4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly ulong4_mt4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly ulong4_mt4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly ulong4_mt4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly ulong4_mt4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly ulong4_mt4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly ulong4_mt4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly ulong4_mt4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly ulong4_mt4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly ulong4_mt4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly ulong4_mt4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly ulong4_mt4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly ulong4_mt4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly ulong4_mt4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly ulong4_mt4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly ulong4_mt4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly ulong4_mt4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly ulong4_mt4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly ulong4_mt4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly ulong4_mt4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly ulong4_mt4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly ulong4_mt4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly ulong4_mt4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly ulong4_mt4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly ulong4_mt4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly ulong4_mt4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly ulong4_mt4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly ulong4_mt4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly ulong4_mt4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly ulong4_mt4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly ulong4_mt4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly ulong4_mt4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly ulong4_mt4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly ulong4_mt4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly ulong4_mt4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly ulong4_mt4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly ulong4_mt4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly ulong4_mt4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly ulong4_mt4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly ulong4_mt4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly ulong4_mt4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly ulong4_mt4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly ulong4_mt4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly ulong4_mt4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly ulong4_mt4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly ulong4_mt4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly ulong4_mt4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly ulong4_mt4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly ulong4_mt4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly ulong4_mt4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly ulong4_mt4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly ulong4_mt4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly ulong4_mt4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly ulong4_mt4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly ulong4_mt4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly ulong4_mt4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly ulong4_mt4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly ulong4_mt4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly ulong4_mt4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly ulong4_mt4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly ulong4_mt4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly ulong4_mt4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly ulong4_mt4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly ulong4_mt4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly ulong4_mt4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly ulong4_mt4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly ulong4_mt4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly ulong4_mt4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly ulong4_mt4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly ulong4_mt4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly ulong4_mt4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly ulong4_mt4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly ulong4_mt4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly ulong4_mt4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly ulong4_mt4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly ulong4_mt4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly ulong4_mt4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly ulong4_mt4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly ulong4_mt4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly ulong4_mt4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly ulong4_mt4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly ulong4_mt4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly ulong4_mt4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly ulong4_mt4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly ulong4_mt4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly ulong4_mt4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly ulong4_mt4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly ulong4_mt4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly ulong4_mt4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly ulong4_mt4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly ulong4_mt4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly ulong4_mt4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly ulong4_mt4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly ulong4_mt4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly ulong4_mt4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly ulong4_mt4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly ulong4_mt4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly ulong4_mt4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly ulong4_mt4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly ulong4_mt4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly ulong4_mt4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly ulong4_mt4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly ulong4_mt4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly ulong4_mt4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly ulong4_mt4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly ulong4_mt4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly ulong4_mt4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly ulong4_mt4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly ulong4_mt4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly ulong4_mt4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly ulong4_mt4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly ulong4_mt4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly ulong4_mt4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly ulong4_mt4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly ulong4_mt4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly ulong4_mt4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly ulong4_mt4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly ulong4_mt4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly ulong4_mt4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly ulong4_mt4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly ulong4_mt4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly ulong4_mt4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly ulong4_mt4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly ulong4_mt4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly ulong4_mt4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // ulong3_mt4

#region ulong3_mt8

public partial struct ulong3_mt8 
{
    public readonly ulong4_mt8 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly ulong4_mt8 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly ulong4_mt8 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly ulong4_mt8 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly ulong4_mt8 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly ulong4_mt8 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly ulong4_mt8 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly ulong4_mt8 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly ulong4_mt8 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly ulong4_mt8 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly ulong4_mt8 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly ulong4_mt8 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly ulong4_mt8 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly ulong4_mt8 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly ulong4_mt8 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly ulong4_mt8 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly ulong4_mt8 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly ulong4_mt8 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly ulong4_mt8 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly ulong4_mt8 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly ulong4_mt8 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly ulong4_mt8 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly ulong4_mt8 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly ulong4_mt8 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly ulong4_mt8 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly ulong4_mt8 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly ulong4_mt8 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly ulong4_mt8 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly ulong4_mt8 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly ulong4_mt8 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly ulong4_mt8 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly ulong4_mt8 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly ulong4_mt8 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly ulong4_mt8 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly ulong4_mt8 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly ulong4_mt8 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly ulong4_mt8 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly ulong4_mt8 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly ulong4_mt8 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly ulong4_mt8 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly ulong4_mt8 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly ulong4_mt8 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly ulong4_mt8 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly ulong4_mt8 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly ulong4_mt8 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly ulong4_mt8 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly ulong4_mt8 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly ulong4_mt8 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly ulong4_mt8 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly ulong4_mt8 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly ulong4_mt8 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly ulong4_mt8 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly ulong4_mt8 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly ulong4_mt8 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly ulong4_mt8 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly ulong4_mt8 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly ulong4_mt8 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly ulong4_mt8 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly ulong4_mt8 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly ulong4_mt8 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly ulong4_mt8 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly ulong4_mt8 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly ulong4_mt8 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly ulong4_mt8 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly ulong4_mt8 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly ulong4_mt8 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly ulong4_mt8 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly ulong4_mt8 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly ulong4_mt8 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly ulong4_mt8 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly ulong4_mt8 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly ulong4_mt8 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly ulong4_mt8 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly ulong4_mt8 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly ulong4_mt8 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly ulong4_mt8 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly ulong4_mt8 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly ulong4_mt8 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly ulong4_mt8 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly ulong4_mt8 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly ulong4_mt8 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly ulong4_mt8 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly ulong4_mt8 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly ulong4_mt8 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly ulong4_mt8 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly ulong4_mt8 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly ulong4_mt8 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly ulong4_mt8 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly ulong4_mt8 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly ulong4_mt8 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly ulong4_mt8 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly ulong4_mt8 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly ulong4_mt8 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly ulong4_mt8 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly ulong4_mt8 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly ulong4_mt8 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly ulong4_mt8 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly ulong4_mt8 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly ulong4_mt8 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly ulong4_mt8 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly ulong4_mt8 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly ulong4_mt8 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly ulong4_mt8 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly ulong4_mt8 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly ulong4_mt8 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly ulong4_mt8 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly ulong4_mt8 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly ulong4_mt8 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly ulong4_mt8 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly ulong4_mt8 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly ulong4_mt8 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly ulong4_mt8 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly ulong4_mt8 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly ulong4_mt8 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly ulong4_mt8 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly ulong4_mt8 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly ulong4_mt8 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly ulong4_mt8 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly ulong4_mt8 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly ulong4_mt8 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly ulong4_mt8 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly ulong4_mt8 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly ulong4_mt8 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly ulong4_mt8 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly ulong4_mt8 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly ulong4_mt8 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly ulong4_mt8 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly ulong4_mt8 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly ulong4_mt8 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly ulong4_mt8 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly ulong4_mt8 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly ulong4_mt8 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly ulong4_mt8 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly ulong4_mt8 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly ulong4_mt8 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly ulong4_mt8 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly ulong4_mt8 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly ulong4_mt8 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly ulong4_mt8 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly ulong4_mt8 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly ulong4_mt8 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly ulong4_mt8 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly ulong4_mt8 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly ulong4_mt8 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly ulong4_mt8 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly ulong4_mt8 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly ulong4_mt8 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly ulong4_mt8 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly ulong4_mt8 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly ulong4_mt8 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly ulong4_mt8 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly ulong4_mt8 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly ulong4_mt8 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly ulong4_mt8 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly ulong4_mt8 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly ulong4_mt8 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly ulong4_mt8 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly ulong4_mt8 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly ulong4_mt8 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly ulong4_mt8 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly ulong4_mt8 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly ulong4_mt8 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // ulong3_mt8

#region ulong3_mt16

public partial struct ulong3_mt16 
{
    public readonly ulong4_mt16 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly ulong4_mt16 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly ulong4_mt16 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly ulong4_mt16 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly ulong4_mt16 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly ulong4_mt16 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly ulong4_mt16 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly ulong4_mt16 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly ulong4_mt16 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly ulong4_mt16 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly ulong4_mt16 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly ulong4_mt16 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly ulong4_mt16 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly ulong4_mt16 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly ulong4_mt16 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly ulong4_mt16 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly ulong4_mt16 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly ulong4_mt16 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly ulong4_mt16 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly ulong4_mt16 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly ulong4_mt16 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly ulong4_mt16 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly ulong4_mt16 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly ulong4_mt16 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly ulong4_mt16 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly ulong4_mt16 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly ulong4_mt16 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly ulong4_mt16 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly ulong4_mt16 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly ulong4_mt16 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly ulong4_mt16 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly ulong4_mt16 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly ulong4_mt16 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly ulong4_mt16 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly ulong4_mt16 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly ulong4_mt16 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly ulong4_mt16 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly ulong4_mt16 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly ulong4_mt16 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly ulong4_mt16 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly ulong4_mt16 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly ulong4_mt16 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly ulong4_mt16 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly ulong4_mt16 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly ulong4_mt16 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly ulong4_mt16 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly ulong4_mt16 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly ulong4_mt16 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly ulong4_mt16 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly ulong4_mt16 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly ulong4_mt16 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly ulong4_mt16 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly ulong4_mt16 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly ulong4_mt16 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly ulong4_mt16 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly ulong4_mt16 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly ulong4_mt16 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly ulong4_mt16 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly ulong4_mt16 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly ulong4_mt16 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly ulong4_mt16 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly ulong4_mt16 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly ulong4_mt16 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly ulong4_mt16 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly ulong4_mt16 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly ulong4_mt16 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly ulong4_mt16 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly ulong4_mt16 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly ulong4_mt16 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly ulong4_mt16 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly ulong4_mt16 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly ulong4_mt16 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly ulong4_mt16 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly ulong4_mt16 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly ulong4_mt16 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly ulong4_mt16 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly ulong4_mt16 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly ulong4_mt16 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly ulong4_mt16 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly ulong4_mt16 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly ulong4_mt16 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly ulong4_mt16 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly ulong4_mt16 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly ulong4_mt16 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly ulong4_mt16 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly ulong4_mt16 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly ulong4_mt16 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly ulong4_mt16 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly ulong4_mt16 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly ulong4_mt16 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly ulong4_mt16 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly ulong4_mt16 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly ulong4_mt16 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly ulong4_mt16 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly ulong4_mt16 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly ulong4_mt16 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly ulong4_mt16 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly ulong4_mt16 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly ulong4_mt16 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly ulong4_mt16 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly ulong4_mt16 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly ulong4_mt16 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly ulong4_mt16 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly ulong4_mt16 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly ulong4_mt16 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly ulong4_mt16 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly ulong4_mt16 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly ulong4_mt16 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly ulong4_mt16 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly ulong4_mt16 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly ulong4_mt16 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly ulong4_mt16 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly ulong4_mt16 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly ulong4_mt16 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly ulong4_mt16 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly ulong4_mt16 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly ulong4_mt16 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly ulong4_mt16 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly ulong4_mt16 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly ulong4_mt16 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly ulong4_mt16 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly ulong4_mt16 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly ulong4_mt16 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly ulong4_mt16 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly ulong4_mt16 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly ulong4_mt16 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly ulong4_mt16 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly ulong4_mt16 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly ulong4_mt16 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly ulong4_mt16 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly ulong4_mt16 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly ulong4_mt16 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly ulong4_mt16 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly ulong4_mt16 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly ulong4_mt16 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly ulong4_mt16 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly ulong4_mt16 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly ulong4_mt16 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly ulong4_mt16 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly ulong4_mt16 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly ulong4_mt16 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly ulong4_mt16 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly ulong4_mt16 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly ulong4_mt16 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly ulong4_mt16 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly ulong4_mt16 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly ulong4_mt16 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly ulong4_mt16 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly ulong4_mt16 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly ulong4_mt16 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly ulong4_mt16 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly ulong4_mt16 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly ulong4_mt16 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly ulong4_mt16 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly ulong4_mt16 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly ulong4_mt16 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly ulong4_mt16 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly ulong4_mt16 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly ulong4_mt16 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly ulong4_mt16 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly ulong4_mt16 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly ulong4_mt16 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // ulong3_mt16

#region ulong3_mt32

public partial struct ulong3_mt32 
{
    public readonly ulong4_mt32 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly ulong4_mt32 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly ulong4_mt32 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly ulong4_mt32 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly ulong4_mt32 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly ulong4_mt32 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly ulong4_mt32 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly ulong4_mt32 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly ulong4_mt32 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly ulong4_mt32 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly ulong4_mt32 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly ulong4_mt32 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly ulong4_mt32 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly ulong4_mt32 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly ulong4_mt32 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly ulong4_mt32 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly ulong4_mt32 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly ulong4_mt32 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly ulong4_mt32 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly ulong4_mt32 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly ulong4_mt32 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly ulong4_mt32 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly ulong4_mt32 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly ulong4_mt32 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly ulong4_mt32 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly ulong4_mt32 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly ulong4_mt32 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly ulong4_mt32 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly ulong4_mt32 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly ulong4_mt32 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly ulong4_mt32 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly ulong4_mt32 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly ulong4_mt32 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly ulong4_mt32 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly ulong4_mt32 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly ulong4_mt32 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly ulong4_mt32 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly ulong4_mt32 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly ulong4_mt32 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly ulong4_mt32 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly ulong4_mt32 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly ulong4_mt32 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly ulong4_mt32 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly ulong4_mt32 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly ulong4_mt32 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly ulong4_mt32 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly ulong4_mt32 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly ulong4_mt32 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly ulong4_mt32 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly ulong4_mt32 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly ulong4_mt32 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly ulong4_mt32 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly ulong4_mt32 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly ulong4_mt32 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly ulong4_mt32 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly ulong4_mt32 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly ulong4_mt32 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly ulong4_mt32 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly ulong4_mt32 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly ulong4_mt32 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly ulong4_mt32 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly ulong4_mt32 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly ulong4_mt32 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly ulong4_mt32 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly ulong4_mt32 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly ulong4_mt32 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly ulong4_mt32 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly ulong4_mt32 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly ulong4_mt32 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly ulong4_mt32 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly ulong4_mt32 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly ulong4_mt32 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly ulong4_mt32 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly ulong4_mt32 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly ulong4_mt32 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly ulong4_mt32 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly ulong4_mt32 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly ulong4_mt32 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly ulong4_mt32 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly ulong4_mt32 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly ulong4_mt32 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly ulong4_mt32 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly ulong4_mt32 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly ulong4_mt32 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly ulong4_mt32 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly ulong4_mt32 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly ulong4_mt32 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly ulong4_mt32 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly ulong4_mt32 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly ulong4_mt32 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly ulong4_mt32 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly ulong4_mt32 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly ulong4_mt32 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly ulong4_mt32 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly ulong4_mt32 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly ulong4_mt32 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly ulong4_mt32 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly ulong4_mt32 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly ulong4_mt32 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly ulong4_mt32 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly ulong4_mt32 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly ulong4_mt32 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly ulong4_mt32 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly ulong4_mt32 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly ulong4_mt32 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly ulong4_mt32 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly ulong4_mt32 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly ulong4_mt32 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly ulong4_mt32 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly ulong4_mt32 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly ulong4_mt32 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly ulong4_mt32 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly ulong4_mt32 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly ulong4_mt32 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly ulong4_mt32 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly ulong4_mt32 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly ulong4_mt32 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly ulong4_mt32 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly ulong4_mt32 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly ulong4_mt32 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly ulong4_mt32 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly ulong4_mt32 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly ulong4_mt32 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly ulong4_mt32 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly ulong4_mt32 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly ulong4_mt32 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly ulong4_mt32 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly ulong4_mt32 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly ulong4_mt32 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly ulong4_mt32 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly ulong4_mt32 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly ulong4_mt32 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly ulong4_mt32 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly ulong4_mt32 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly ulong4_mt32 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly ulong4_mt32 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly ulong4_mt32 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly ulong4_mt32 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly ulong4_mt32 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly ulong4_mt32 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly ulong4_mt32 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly ulong4_mt32 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly ulong4_mt32 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly ulong4_mt32 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly ulong4_mt32 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly ulong4_mt32 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly ulong4_mt32 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly ulong4_mt32 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly ulong4_mt32 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly ulong4_mt32 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly ulong4_mt32 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly ulong4_mt32 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly ulong4_mt32 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly ulong4_mt32 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly ulong4_mt32 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly ulong4_mt32 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly ulong4_mt32 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly ulong4_mt32 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly ulong4_mt32 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly ulong4_mt32 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly ulong4_mt32 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly ulong4_mt32 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // ulong3_mt32

#region b32v3_mt4

public partial struct b32v3_mt4 
{
    public readonly b32v4_mt4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b32v4_mt4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b32v4_mt4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b32v4_mt4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b32v4_mt4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b32v4_mt4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b32v4_mt4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b32v4_mt4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b32v4_mt4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b32v4_mt4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b32v4_mt4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b32v4_mt4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b32v4_mt4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b32v4_mt4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b32v4_mt4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b32v4_mt4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b32v4_mt4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b32v4_mt4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b32v4_mt4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b32v4_mt4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b32v4_mt4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b32v4_mt4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b32v4_mt4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b32v4_mt4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b32v4_mt4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b32v4_mt4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b32v4_mt4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b32v4_mt4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b32v4_mt4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b32v4_mt4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b32v4_mt4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b32v4_mt4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b32v4_mt4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b32v4_mt4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b32v4_mt4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b32v4_mt4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b32v4_mt4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b32v4_mt4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b32v4_mt4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b32v4_mt4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b32v4_mt4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b32v4_mt4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b32v4_mt4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b32v4_mt4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b32v4_mt4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b32v4_mt4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b32v4_mt4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b32v4_mt4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b32v4_mt4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b32v4_mt4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b32v4_mt4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b32v4_mt4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b32v4_mt4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b32v4_mt4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b32v4_mt4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b32v4_mt4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b32v4_mt4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b32v4_mt4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b32v4_mt4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b32v4_mt4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b32v4_mt4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b32v4_mt4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b32v4_mt4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b32v4_mt4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b32v4_mt4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b32v4_mt4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b32v4_mt4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b32v4_mt4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b32v4_mt4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b32v4_mt4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b32v4_mt4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b32v4_mt4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b32v4_mt4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b32v4_mt4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b32v4_mt4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b32v4_mt4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b32v4_mt4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b32v4_mt4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b32v4_mt4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b32v4_mt4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b32v4_mt4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b32v4_mt4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b32v4_mt4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b32v4_mt4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b32v4_mt4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b32v4_mt4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b32v4_mt4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b32v4_mt4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b32v4_mt4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b32v4_mt4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b32v4_mt4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b32v4_mt4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b32v4_mt4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b32v4_mt4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b32v4_mt4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b32v4_mt4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b32v4_mt4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b32v4_mt4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b32v4_mt4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b32v4_mt4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b32v4_mt4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b32v4_mt4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b32v4_mt4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b32v4_mt4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b32v4_mt4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b32v4_mt4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b32v4_mt4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b32v4_mt4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b32v4_mt4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b32v4_mt4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b32v4_mt4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b32v4_mt4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b32v4_mt4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b32v4_mt4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b32v4_mt4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b32v4_mt4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b32v4_mt4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b32v4_mt4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b32v4_mt4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b32v4_mt4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b32v4_mt4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b32v4_mt4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b32v4_mt4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b32v4_mt4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b32v4_mt4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b32v4_mt4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b32v4_mt4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b32v4_mt4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b32v4_mt4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b32v4_mt4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b32v4_mt4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b32v4_mt4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b32v4_mt4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b32v4_mt4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b32v4_mt4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b32v4_mt4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b32v4_mt4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b32v4_mt4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b32v4_mt4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b32v4_mt4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b32v4_mt4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b32v4_mt4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b32v4_mt4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b32v4_mt4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b32v4_mt4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b32v4_mt4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b32v4_mt4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b32v4_mt4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b32v4_mt4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b32v4_mt4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b32v4_mt4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b32v4_mt4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b32v4_mt4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b32v4_mt4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b32v4_mt4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b32v4_mt4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b32v4_mt4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b32v4_mt4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b32v4_mt4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b32v4_mt4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b32v4_mt4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly b32v4_mt4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // b32v3_mt4

#region b32v3_mt8

public partial struct b32v3_mt8 
{
    public readonly b32v4_mt8 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b32v4_mt8 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b32v4_mt8 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b32v4_mt8 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b32v4_mt8 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b32v4_mt8 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b32v4_mt8 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b32v4_mt8 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b32v4_mt8 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b32v4_mt8 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b32v4_mt8 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b32v4_mt8 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b32v4_mt8 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b32v4_mt8 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b32v4_mt8 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b32v4_mt8 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b32v4_mt8 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b32v4_mt8 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b32v4_mt8 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b32v4_mt8 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b32v4_mt8 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b32v4_mt8 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b32v4_mt8 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b32v4_mt8 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b32v4_mt8 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b32v4_mt8 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b32v4_mt8 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b32v4_mt8 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b32v4_mt8 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b32v4_mt8 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b32v4_mt8 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b32v4_mt8 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b32v4_mt8 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b32v4_mt8 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b32v4_mt8 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b32v4_mt8 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b32v4_mt8 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b32v4_mt8 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b32v4_mt8 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b32v4_mt8 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b32v4_mt8 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b32v4_mt8 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b32v4_mt8 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b32v4_mt8 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b32v4_mt8 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b32v4_mt8 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b32v4_mt8 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b32v4_mt8 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b32v4_mt8 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b32v4_mt8 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b32v4_mt8 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b32v4_mt8 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b32v4_mt8 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b32v4_mt8 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b32v4_mt8 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b32v4_mt8 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b32v4_mt8 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b32v4_mt8 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b32v4_mt8 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b32v4_mt8 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b32v4_mt8 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b32v4_mt8 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b32v4_mt8 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b32v4_mt8 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b32v4_mt8 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b32v4_mt8 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b32v4_mt8 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b32v4_mt8 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b32v4_mt8 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b32v4_mt8 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b32v4_mt8 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b32v4_mt8 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b32v4_mt8 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b32v4_mt8 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b32v4_mt8 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b32v4_mt8 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b32v4_mt8 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b32v4_mt8 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b32v4_mt8 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b32v4_mt8 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b32v4_mt8 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b32v4_mt8 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b32v4_mt8 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b32v4_mt8 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b32v4_mt8 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b32v4_mt8 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b32v4_mt8 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b32v4_mt8 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b32v4_mt8 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b32v4_mt8 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b32v4_mt8 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b32v4_mt8 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b32v4_mt8 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b32v4_mt8 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b32v4_mt8 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b32v4_mt8 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b32v4_mt8 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b32v4_mt8 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b32v4_mt8 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b32v4_mt8 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b32v4_mt8 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b32v4_mt8 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b32v4_mt8 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b32v4_mt8 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b32v4_mt8 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b32v4_mt8 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b32v4_mt8 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b32v4_mt8 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b32v4_mt8 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b32v4_mt8 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b32v4_mt8 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b32v4_mt8 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b32v4_mt8 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b32v4_mt8 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b32v4_mt8 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b32v4_mt8 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b32v4_mt8 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b32v4_mt8 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b32v4_mt8 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b32v4_mt8 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b32v4_mt8 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b32v4_mt8 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b32v4_mt8 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b32v4_mt8 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b32v4_mt8 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b32v4_mt8 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b32v4_mt8 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b32v4_mt8 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b32v4_mt8 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b32v4_mt8 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b32v4_mt8 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b32v4_mt8 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b32v4_mt8 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b32v4_mt8 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b32v4_mt8 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b32v4_mt8 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b32v4_mt8 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b32v4_mt8 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b32v4_mt8 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b32v4_mt8 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b32v4_mt8 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b32v4_mt8 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b32v4_mt8 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b32v4_mt8 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b32v4_mt8 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b32v4_mt8 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b32v4_mt8 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b32v4_mt8 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b32v4_mt8 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b32v4_mt8 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b32v4_mt8 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b32v4_mt8 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b32v4_mt8 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b32v4_mt8 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b32v4_mt8 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b32v4_mt8 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b32v4_mt8 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b32v4_mt8 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b32v4_mt8 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b32v4_mt8 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b32v4_mt8 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly b32v4_mt8 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // b32v3_mt8

#region b32v3_mt16

public partial struct b32v3_mt16 
{
    public readonly b32v4_mt16 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b32v4_mt16 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b32v4_mt16 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b32v4_mt16 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b32v4_mt16 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b32v4_mt16 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b32v4_mt16 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b32v4_mt16 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b32v4_mt16 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b32v4_mt16 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b32v4_mt16 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b32v4_mt16 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b32v4_mt16 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b32v4_mt16 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b32v4_mt16 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b32v4_mt16 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b32v4_mt16 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b32v4_mt16 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b32v4_mt16 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b32v4_mt16 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b32v4_mt16 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b32v4_mt16 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b32v4_mt16 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b32v4_mt16 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b32v4_mt16 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b32v4_mt16 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b32v4_mt16 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b32v4_mt16 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b32v4_mt16 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b32v4_mt16 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b32v4_mt16 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b32v4_mt16 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b32v4_mt16 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b32v4_mt16 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b32v4_mt16 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b32v4_mt16 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b32v4_mt16 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b32v4_mt16 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b32v4_mt16 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b32v4_mt16 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b32v4_mt16 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b32v4_mt16 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b32v4_mt16 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b32v4_mt16 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b32v4_mt16 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b32v4_mt16 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b32v4_mt16 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b32v4_mt16 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b32v4_mt16 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b32v4_mt16 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b32v4_mt16 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b32v4_mt16 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b32v4_mt16 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b32v4_mt16 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b32v4_mt16 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b32v4_mt16 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b32v4_mt16 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b32v4_mt16 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b32v4_mt16 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b32v4_mt16 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b32v4_mt16 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b32v4_mt16 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b32v4_mt16 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b32v4_mt16 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b32v4_mt16 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b32v4_mt16 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b32v4_mt16 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b32v4_mt16 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b32v4_mt16 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b32v4_mt16 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b32v4_mt16 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b32v4_mt16 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b32v4_mt16 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b32v4_mt16 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b32v4_mt16 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b32v4_mt16 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b32v4_mt16 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b32v4_mt16 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b32v4_mt16 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b32v4_mt16 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b32v4_mt16 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b32v4_mt16 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b32v4_mt16 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b32v4_mt16 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b32v4_mt16 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b32v4_mt16 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b32v4_mt16 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b32v4_mt16 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b32v4_mt16 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b32v4_mt16 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b32v4_mt16 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b32v4_mt16 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b32v4_mt16 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b32v4_mt16 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b32v4_mt16 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b32v4_mt16 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b32v4_mt16 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b32v4_mt16 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b32v4_mt16 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b32v4_mt16 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b32v4_mt16 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b32v4_mt16 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b32v4_mt16 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b32v4_mt16 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b32v4_mt16 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b32v4_mt16 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b32v4_mt16 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b32v4_mt16 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b32v4_mt16 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b32v4_mt16 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b32v4_mt16 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b32v4_mt16 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b32v4_mt16 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b32v4_mt16 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b32v4_mt16 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b32v4_mt16 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b32v4_mt16 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b32v4_mt16 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b32v4_mt16 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b32v4_mt16 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b32v4_mt16 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b32v4_mt16 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b32v4_mt16 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b32v4_mt16 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b32v4_mt16 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b32v4_mt16 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b32v4_mt16 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b32v4_mt16 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b32v4_mt16 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b32v4_mt16 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b32v4_mt16 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b32v4_mt16 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b32v4_mt16 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b32v4_mt16 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b32v4_mt16 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b32v4_mt16 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b32v4_mt16 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b32v4_mt16 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b32v4_mt16 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b32v4_mt16 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b32v4_mt16 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b32v4_mt16 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b32v4_mt16 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b32v4_mt16 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b32v4_mt16 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b32v4_mt16 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b32v4_mt16 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b32v4_mt16 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b32v4_mt16 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b32v4_mt16 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b32v4_mt16 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b32v4_mt16 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b32v4_mt16 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b32v4_mt16 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b32v4_mt16 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b32v4_mt16 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b32v4_mt16 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b32v4_mt16 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b32v4_mt16 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b32v4_mt16 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b32v4_mt16 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly b32v4_mt16 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // b32v3_mt16

#region b32v3_mt32

public partial struct b32v3_mt32 
{
    public readonly b32v4_mt32 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b32v4_mt32 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b32v4_mt32 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b32v4_mt32 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b32v4_mt32 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b32v4_mt32 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b32v4_mt32 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b32v4_mt32 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b32v4_mt32 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b32v4_mt32 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b32v4_mt32 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b32v4_mt32 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b32v4_mt32 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b32v4_mt32 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b32v4_mt32 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b32v4_mt32 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b32v4_mt32 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b32v4_mt32 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b32v4_mt32 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b32v4_mt32 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b32v4_mt32 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b32v4_mt32 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b32v4_mt32 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b32v4_mt32 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b32v4_mt32 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b32v4_mt32 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b32v4_mt32 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b32v4_mt32 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b32v4_mt32 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b32v4_mt32 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b32v4_mt32 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b32v4_mt32 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b32v4_mt32 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b32v4_mt32 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b32v4_mt32 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b32v4_mt32 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b32v4_mt32 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b32v4_mt32 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b32v4_mt32 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b32v4_mt32 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b32v4_mt32 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b32v4_mt32 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b32v4_mt32 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b32v4_mt32 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b32v4_mt32 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b32v4_mt32 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b32v4_mt32 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b32v4_mt32 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b32v4_mt32 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b32v4_mt32 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b32v4_mt32 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b32v4_mt32 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b32v4_mt32 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b32v4_mt32 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b32v4_mt32 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b32v4_mt32 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b32v4_mt32 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b32v4_mt32 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b32v4_mt32 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b32v4_mt32 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b32v4_mt32 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b32v4_mt32 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b32v4_mt32 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b32v4_mt32 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b32v4_mt32 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b32v4_mt32 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b32v4_mt32 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b32v4_mt32 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b32v4_mt32 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b32v4_mt32 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b32v4_mt32 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b32v4_mt32 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b32v4_mt32 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b32v4_mt32 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b32v4_mt32 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b32v4_mt32 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b32v4_mt32 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b32v4_mt32 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b32v4_mt32 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b32v4_mt32 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b32v4_mt32 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b32v4_mt32 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b32v4_mt32 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b32v4_mt32 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b32v4_mt32 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b32v4_mt32 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b32v4_mt32 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b32v4_mt32 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b32v4_mt32 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b32v4_mt32 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b32v4_mt32 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b32v4_mt32 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b32v4_mt32 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b32v4_mt32 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b32v4_mt32 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b32v4_mt32 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b32v4_mt32 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b32v4_mt32 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b32v4_mt32 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b32v4_mt32 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b32v4_mt32 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b32v4_mt32 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b32v4_mt32 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b32v4_mt32 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b32v4_mt32 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b32v4_mt32 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b32v4_mt32 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b32v4_mt32 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b32v4_mt32 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b32v4_mt32 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b32v4_mt32 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b32v4_mt32 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b32v4_mt32 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b32v4_mt32 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b32v4_mt32 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b32v4_mt32 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b32v4_mt32 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b32v4_mt32 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b32v4_mt32 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b32v4_mt32 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b32v4_mt32 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b32v4_mt32 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b32v4_mt32 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b32v4_mt32 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b32v4_mt32 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b32v4_mt32 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b32v4_mt32 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b32v4_mt32 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b32v4_mt32 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b32v4_mt32 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b32v4_mt32 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b32v4_mt32 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b32v4_mt32 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b32v4_mt32 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b32v4_mt32 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b32v4_mt32 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b32v4_mt32 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b32v4_mt32 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b32v4_mt32 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b32v4_mt32 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b32v4_mt32 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b32v4_mt32 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b32v4_mt32 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b32v4_mt32 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b32v4_mt32 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b32v4_mt32 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b32v4_mt32 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b32v4_mt32 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b32v4_mt32 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b32v4_mt32 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b32v4_mt32 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b32v4_mt32 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b32v4_mt32 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b32v4_mt32 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b32v4_mt32 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b32v4_mt32 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b32v4_mt32 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b32v4_mt32 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b32v4_mt32 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b32v4_mt32 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b32v4_mt32 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly b32v4_mt32 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // b32v3_mt32

#region b64v3_mt4

public partial struct b64v3_mt4 
{
    public readonly b64v4_mt4 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b64v4_mt4 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b64v4_mt4 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b64v4_mt4 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b64v4_mt4 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b64v4_mt4 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b64v4_mt4 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b64v4_mt4 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b64v4_mt4 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b64v4_mt4 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b64v4_mt4 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b64v4_mt4 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b64v4_mt4 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b64v4_mt4 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b64v4_mt4 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b64v4_mt4 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b64v4_mt4 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b64v4_mt4 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b64v4_mt4 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b64v4_mt4 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b64v4_mt4 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b64v4_mt4 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b64v4_mt4 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b64v4_mt4 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b64v4_mt4 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b64v4_mt4 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b64v4_mt4 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b64v4_mt4 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b64v4_mt4 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b64v4_mt4 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b64v4_mt4 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b64v4_mt4 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b64v4_mt4 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b64v4_mt4 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b64v4_mt4 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b64v4_mt4 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b64v4_mt4 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b64v4_mt4 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b64v4_mt4 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b64v4_mt4 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b64v4_mt4 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b64v4_mt4 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b64v4_mt4 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b64v4_mt4 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b64v4_mt4 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b64v4_mt4 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b64v4_mt4 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b64v4_mt4 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b64v4_mt4 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b64v4_mt4 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b64v4_mt4 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b64v4_mt4 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b64v4_mt4 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b64v4_mt4 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b64v4_mt4 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b64v4_mt4 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b64v4_mt4 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b64v4_mt4 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b64v4_mt4 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b64v4_mt4 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b64v4_mt4 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b64v4_mt4 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b64v4_mt4 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b64v4_mt4 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b64v4_mt4 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b64v4_mt4 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b64v4_mt4 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b64v4_mt4 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b64v4_mt4 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b64v4_mt4 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b64v4_mt4 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b64v4_mt4 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b64v4_mt4 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b64v4_mt4 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b64v4_mt4 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b64v4_mt4 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b64v4_mt4 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b64v4_mt4 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b64v4_mt4 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b64v4_mt4 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b64v4_mt4 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b64v4_mt4 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b64v4_mt4 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b64v4_mt4 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b64v4_mt4 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b64v4_mt4 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b64v4_mt4 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b64v4_mt4 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b64v4_mt4 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b64v4_mt4 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b64v4_mt4 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b64v4_mt4 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b64v4_mt4 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b64v4_mt4 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b64v4_mt4 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b64v4_mt4 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b64v4_mt4 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b64v4_mt4 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b64v4_mt4 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b64v4_mt4 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b64v4_mt4 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b64v4_mt4 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b64v4_mt4 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b64v4_mt4 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b64v4_mt4 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b64v4_mt4 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b64v4_mt4 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b64v4_mt4 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b64v4_mt4 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b64v4_mt4 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b64v4_mt4 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b64v4_mt4 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b64v4_mt4 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b64v4_mt4 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b64v4_mt4 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b64v4_mt4 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b64v4_mt4 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b64v4_mt4 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b64v4_mt4 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b64v4_mt4 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b64v4_mt4 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b64v4_mt4 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b64v4_mt4 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b64v4_mt4 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b64v4_mt4 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b64v4_mt4 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b64v4_mt4 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b64v4_mt4 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b64v4_mt4 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b64v4_mt4 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b64v4_mt4 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b64v4_mt4 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b64v4_mt4 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b64v4_mt4 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b64v4_mt4 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b64v4_mt4 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b64v4_mt4 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b64v4_mt4 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b64v4_mt4 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b64v4_mt4 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b64v4_mt4 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b64v4_mt4 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b64v4_mt4 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b64v4_mt4 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b64v4_mt4 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b64v4_mt4 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b64v4_mt4 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b64v4_mt4 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b64v4_mt4 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b64v4_mt4 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b64v4_mt4 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b64v4_mt4 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b64v4_mt4 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b64v4_mt4 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b64v4_mt4 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b64v4_mt4 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b64v4_mt4 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b64v4_mt4 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b64v4_mt4 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b64v4_mt4 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b64v4_mt4 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly b64v4_mt4 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // b64v3_mt4

#region b64v3_mt8

public partial struct b64v3_mt8 
{
    public readonly b64v4_mt8 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b64v4_mt8 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b64v4_mt8 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b64v4_mt8 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b64v4_mt8 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b64v4_mt8 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b64v4_mt8 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b64v4_mt8 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b64v4_mt8 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b64v4_mt8 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b64v4_mt8 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b64v4_mt8 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b64v4_mt8 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b64v4_mt8 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b64v4_mt8 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b64v4_mt8 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b64v4_mt8 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b64v4_mt8 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b64v4_mt8 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b64v4_mt8 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b64v4_mt8 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b64v4_mt8 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b64v4_mt8 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b64v4_mt8 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b64v4_mt8 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b64v4_mt8 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b64v4_mt8 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b64v4_mt8 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b64v4_mt8 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b64v4_mt8 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b64v4_mt8 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b64v4_mt8 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b64v4_mt8 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b64v4_mt8 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b64v4_mt8 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b64v4_mt8 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b64v4_mt8 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b64v4_mt8 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b64v4_mt8 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b64v4_mt8 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b64v4_mt8 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b64v4_mt8 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b64v4_mt8 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b64v4_mt8 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b64v4_mt8 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b64v4_mt8 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b64v4_mt8 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b64v4_mt8 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b64v4_mt8 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b64v4_mt8 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b64v4_mt8 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b64v4_mt8 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b64v4_mt8 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b64v4_mt8 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b64v4_mt8 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b64v4_mt8 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b64v4_mt8 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b64v4_mt8 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b64v4_mt8 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b64v4_mt8 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b64v4_mt8 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b64v4_mt8 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b64v4_mt8 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b64v4_mt8 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b64v4_mt8 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b64v4_mt8 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b64v4_mt8 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b64v4_mt8 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b64v4_mt8 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b64v4_mt8 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b64v4_mt8 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b64v4_mt8 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b64v4_mt8 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b64v4_mt8 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b64v4_mt8 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b64v4_mt8 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b64v4_mt8 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b64v4_mt8 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b64v4_mt8 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b64v4_mt8 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b64v4_mt8 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b64v4_mt8 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b64v4_mt8 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b64v4_mt8 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b64v4_mt8 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b64v4_mt8 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b64v4_mt8 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b64v4_mt8 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b64v4_mt8 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b64v4_mt8 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b64v4_mt8 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b64v4_mt8 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b64v4_mt8 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b64v4_mt8 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b64v4_mt8 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b64v4_mt8 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b64v4_mt8 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b64v4_mt8 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b64v4_mt8 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b64v4_mt8 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b64v4_mt8 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b64v4_mt8 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b64v4_mt8 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b64v4_mt8 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b64v4_mt8 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b64v4_mt8 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b64v4_mt8 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b64v4_mt8 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b64v4_mt8 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b64v4_mt8 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b64v4_mt8 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b64v4_mt8 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b64v4_mt8 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b64v4_mt8 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b64v4_mt8 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b64v4_mt8 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b64v4_mt8 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b64v4_mt8 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b64v4_mt8 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b64v4_mt8 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b64v4_mt8 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b64v4_mt8 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b64v4_mt8 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b64v4_mt8 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b64v4_mt8 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b64v4_mt8 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b64v4_mt8 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b64v4_mt8 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b64v4_mt8 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b64v4_mt8 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b64v4_mt8 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b64v4_mt8 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b64v4_mt8 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b64v4_mt8 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b64v4_mt8 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b64v4_mt8 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b64v4_mt8 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b64v4_mt8 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b64v4_mt8 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b64v4_mt8 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b64v4_mt8 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b64v4_mt8 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b64v4_mt8 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b64v4_mt8 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b64v4_mt8 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b64v4_mt8 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b64v4_mt8 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b64v4_mt8 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b64v4_mt8 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b64v4_mt8 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b64v4_mt8 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b64v4_mt8 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b64v4_mt8 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b64v4_mt8 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b64v4_mt8 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b64v4_mt8 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b64v4_mt8 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b64v4_mt8 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b64v4_mt8 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b64v4_mt8 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b64v4_mt8 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly b64v4_mt8 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // b64v3_mt8

#region b64v3_mt16

public partial struct b64v3_mt16 
{
    public readonly b64v4_mt16 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b64v4_mt16 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b64v4_mt16 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b64v4_mt16 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b64v4_mt16 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b64v4_mt16 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b64v4_mt16 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b64v4_mt16 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b64v4_mt16 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b64v4_mt16 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b64v4_mt16 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b64v4_mt16 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b64v4_mt16 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b64v4_mt16 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b64v4_mt16 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b64v4_mt16 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b64v4_mt16 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b64v4_mt16 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b64v4_mt16 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b64v4_mt16 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b64v4_mt16 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b64v4_mt16 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b64v4_mt16 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b64v4_mt16 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b64v4_mt16 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b64v4_mt16 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b64v4_mt16 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b64v4_mt16 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b64v4_mt16 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b64v4_mt16 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b64v4_mt16 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b64v4_mt16 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b64v4_mt16 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b64v4_mt16 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b64v4_mt16 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b64v4_mt16 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b64v4_mt16 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b64v4_mt16 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b64v4_mt16 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b64v4_mt16 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b64v4_mt16 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b64v4_mt16 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b64v4_mt16 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b64v4_mt16 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b64v4_mt16 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b64v4_mt16 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b64v4_mt16 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b64v4_mt16 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b64v4_mt16 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b64v4_mt16 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b64v4_mt16 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b64v4_mt16 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b64v4_mt16 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b64v4_mt16 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b64v4_mt16 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b64v4_mt16 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b64v4_mt16 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b64v4_mt16 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b64v4_mt16 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b64v4_mt16 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b64v4_mt16 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b64v4_mt16 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b64v4_mt16 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b64v4_mt16 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b64v4_mt16 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b64v4_mt16 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b64v4_mt16 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b64v4_mt16 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b64v4_mt16 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b64v4_mt16 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b64v4_mt16 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b64v4_mt16 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b64v4_mt16 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b64v4_mt16 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b64v4_mt16 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b64v4_mt16 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b64v4_mt16 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b64v4_mt16 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b64v4_mt16 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b64v4_mt16 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b64v4_mt16 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b64v4_mt16 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b64v4_mt16 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b64v4_mt16 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b64v4_mt16 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b64v4_mt16 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b64v4_mt16 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b64v4_mt16 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b64v4_mt16 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b64v4_mt16 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b64v4_mt16 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b64v4_mt16 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b64v4_mt16 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b64v4_mt16 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b64v4_mt16 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b64v4_mt16 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b64v4_mt16 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b64v4_mt16 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b64v4_mt16 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b64v4_mt16 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b64v4_mt16 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b64v4_mt16 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b64v4_mt16 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b64v4_mt16 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b64v4_mt16 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b64v4_mt16 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b64v4_mt16 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b64v4_mt16 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b64v4_mt16 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b64v4_mt16 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b64v4_mt16 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b64v4_mt16 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b64v4_mt16 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b64v4_mt16 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b64v4_mt16 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b64v4_mt16 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b64v4_mt16 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b64v4_mt16 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b64v4_mt16 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b64v4_mt16 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b64v4_mt16 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b64v4_mt16 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b64v4_mt16 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b64v4_mt16 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b64v4_mt16 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b64v4_mt16 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b64v4_mt16 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b64v4_mt16 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b64v4_mt16 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b64v4_mt16 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b64v4_mt16 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b64v4_mt16 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b64v4_mt16 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b64v4_mt16 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b64v4_mt16 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b64v4_mt16 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b64v4_mt16 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b64v4_mt16 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b64v4_mt16 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b64v4_mt16 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b64v4_mt16 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b64v4_mt16 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b64v4_mt16 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b64v4_mt16 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b64v4_mt16 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b64v4_mt16 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b64v4_mt16 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b64v4_mt16 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b64v4_mt16 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b64v4_mt16 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b64v4_mt16 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b64v4_mt16 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b64v4_mt16 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b64v4_mt16 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b64v4_mt16 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b64v4_mt16 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b64v4_mt16 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b64v4_mt16 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b64v4_mt16 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b64v4_mt16 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b64v4_mt16 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly b64v4_mt16 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // b64v3_mt16

#region b64v3_mt32

public partial struct b64v3_mt32 
{
    public readonly b64v4_mt32 xxxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b64v4_mt32 rrrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, x);
    }
    public readonly b64v4_mt32 xxxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b64v4_mt32 rrrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, y);
    }
    public readonly b64v4_mt32 xxxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b64v4_mt32 rrrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x, z);
    }
    public readonly b64v4_mt32 xxyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b64v4_mt32 rrgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, x);
    }
    public readonly b64v4_mt32 xxyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b64v4_mt32 rrgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, y);
    }
    public readonly b64v4_mt32 xxyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b64v4_mt32 rrgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y, z);
    }
    public readonly b64v4_mt32 xxzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b64v4_mt32 rrbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, x);
    }
    public readonly b64v4_mt32 xxzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b64v4_mt32 rrbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, y);
    }
    public readonly b64v4_mt32 xxzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b64v4_mt32 rrbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z, z);
    }
    public readonly b64v4_mt32 xyxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b64v4_mt32 rgrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, x);
    }
    public readonly b64v4_mt32 xyxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b64v4_mt32 rgrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, y);
    }
    public readonly b64v4_mt32 xyxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b64v4_mt32 rgrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x, z);
    }
    public readonly b64v4_mt32 xyyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b64v4_mt32 rggr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, x);
    }
    public readonly b64v4_mt32 xyyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b64v4_mt32 rggg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, y);
    }
    public readonly b64v4_mt32 xyyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b64v4_mt32 rggb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y, z);
    }
    public readonly b64v4_mt32 xyzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b64v4_mt32 rgbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, x);
    }
    public readonly b64v4_mt32 xyzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b64v4_mt32 rgbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, y);
    }
    public readonly b64v4_mt32 xyzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b64v4_mt32 rgbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, z, z);
    }
    public readonly b64v4_mt32 xzxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b64v4_mt32 rbrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, x);
    }
    public readonly b64v4_mt32 xzxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b64v4_mt32 rbrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, y);
    }
    public readonly b64v4_mt32 xzxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b64v4_mt32 rbrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x, z);
    }
    public readonly b64v4_mt32 xzyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b64v4_mt32 rbgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, x);
    }
    public readonly b64v4_mt32 xzyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b64v4_mt32 rbgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, y);
    }
    public readonly b64v4_mt32 xzyz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b64v4_mt32 rbgb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, y, z);
    }
    public readonly b64v4_mt32 xzzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b64v4_mt32 rbbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, x);
    }
    public readonly b64v4_mt32 xzzy
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b64v4_mt32 rbbg
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, y);
    }
    public readonly b64v4_mt32 xzzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b64v4_mt32 rbbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z, z);
    }
    public readonly b64v4_mt32 yxxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b64v4_mt32 grrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, x);
    }
    public readonly b64v4_mt32 yxxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b64v4_mt32 grrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, y);
    }
    public readonly b64v4_mt32 yxxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b64v4_mt32 grrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x, z);
    }
    public readonly b64v4_mt32 yxyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b64v4_mt32 grgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, x);
    }
    public readonly b64v4_mt32 yxyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b64v4_mt32 grgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, y);
    }
    public readonly b64v4_mt32 yxyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b64v4_mt32 grgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y, z);
    }
    public readonly b64v4_mt32 yxzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b64v4_mt32 grbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, x);
    }
    public readonly b64v4_mt32 yxzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b64v4_mt32 grbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, y);
    }
    public readonly b64v4_mt32 yxzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b64v4_mt32 grbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, z, z);
    }
    public readonly b64v4_mt32 yyxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b64v4_mt32 ggrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, x);
    }
    public readonly b64v4_mt32 yyxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b64v4_mt32 ggrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, y);
    }
    public readonly b64v4_mt32 yyxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b64v4_mt32 ggrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x, z);
    }
    public readonly b64v4_mt32 yyyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b64v4_mt32 gggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, x);
    }
    public readonly b64v4_mt32 yyyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b64v4_mt32 gggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, y);
    }
    public readonly b64v4_mt32 yyyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b64v4_mt32 gggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y, z);
    }
    public readonly b64v4_mt32 yyzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b64v4_mt32 ggbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, x);
    }
    public readonly b64v4_mt32 yyzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b64v4_mt32 ggbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, y);
    }
    public readonly b64v4_mt32 yyzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b64v4_mt32 ggbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z, z);
    }
    public readonly b64v4_mt32 yzxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b64v4_mt32 gbrr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, x);
    }
    public readonly b64v4_mt32 yzxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b64v4_mt32 gbrg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, y);
    }
    public readonly b64v4_mt32 yzxz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b64v4_mt32 gbrb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, x, z);
    }
    public readonly b64v4_mt32 yzyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b64v4_mt32 gbgr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, x);
    }
    public readonly b64v4_mt32 yzyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b64v4_mt32 gbgg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, y);
    }
    public readonly b64v4_mt32 yzyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b64v4_mt32 gbgb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y, z);
    }
    public readonly b64v4_mt32 yzzx
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b64v4_mt32 gbbr
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, x);
    }
    public readonly b64v4_mt32 yzzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b64v4_mt32 gbbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, y);
    }
    public readonly b64v4_mt32 yzzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b64v4_mt32 gbbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z, z);
    }
    public readonly b64v4_mt32 zxxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b64v4_mt32 brrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, x);
    }
    public readonly b64v4_mt32 zxxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b64v4_mt32 brrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, y);
    }
    public readonly b64v4_mt32 zxxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b64v4_mt32 brrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x, z);
    }
    public readonly b64v4_mt32 zxyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b64v4_mt32 brgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, x);
    }
    public readonly b64v4_mt32 zxyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b64v4_mt32 brgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, y);
    }
    public readonly b64v4_mt32 zxyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b64v4_mt32 brgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, y, z);
    }
    public readonly b64v4_mt32 zxzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b64v4_mt32 brbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, x);
    }
    public readonly b64v4_mt32 zxzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b64v4_mt32 brbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, y);
    }
    public readonly b64v4_mt32 zxzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b64v4_mt32 brbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z, z);
    }
    public readonly b64v4_mt32 zyxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b64v4_mt32 bgrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, x);
    }
    public readonly b64v4_mt32 zyxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b64v4_mt32 bgrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, y);
    }
    public readonly b64v4_mt32 zyxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b64v4_mt32 bgrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, x, z);
    }
    public readonly b64v4_mt32 zyyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b64v4_mt32 bggr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, x);
    }
    public readonly b64v4_mt32 zyyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b64v4_mt32 bggg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, y);
    }
    public readonly b64v4_mt32 zyyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b64v4_mt32 bggb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y, z);
    }
    public readonly b64v4_mt32 zyzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b64v4_mt32 bgbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, x);
    }
    public readonly b64v4_mt32 zyzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b64v4_mt32 bgbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, y);
    }
    public readonly b64v4_mt32 zyzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b64v4_mt32 bgbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z, z);
    }
    public readonly b64v4_mt32 zzxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b64v4_mt32 bbrr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, x);
    }
    public readonly b64v4_mt32 zzxy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b64v4_mt32 bbrg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, y);
    }
    public readonly b64v4_mt32 zzxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b64v4_mt32 bbrb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x, z);
    }
    public readonly b64v4_mt32 zzyx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b64v4_mt32 bbgr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, x);
    }
    public readonly b64v4_mt32 zzyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b64v4_mt32 bbgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, y);
    }
    public readonly b64v4_mt32 zzyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b64v4_mt32 bbgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y, z);
    }
    public readonly b64v4_mt32 zzzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b64v4_mt32 bbbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, x);
    }
    public readonly b64v4_mt32 zzzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b64v4_mt32 bbbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, y);
    }
    public readonly b64v4_mt32 zzzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
    public readonly b64v4_mt32 bbbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z, z);
    }
}

#endregion // b64v3_mt32
