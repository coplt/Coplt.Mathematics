// generated by template, do not modify manually

namespace Coplt.Mathematics.Simt;

#region float3_mt4

public partial struct float3_mt4 
{
    public readonly float3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt4 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt4 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly float3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public float3_mt4 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public float3_mt4 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly float3_mt4 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly float3_mt4 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public float3_mt4 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public float3_mt4 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly float3_mt4 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly float3_mt4 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly float3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly float3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public float3_mt4 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public float3_mt4 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly float3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt4 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly float3_mt4 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public float3_mt4 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public float3_mt4 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly float3_mt4 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt4 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt4 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly float3_mt4 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly float3_mt4 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly float3_mt4 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public float3_mt4 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public float3_mt4 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly float3_mt4 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly float3_mt4 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public float3_mt4 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public float3_mt4 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly float3_mt4 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt4 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt4 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly float3_mt4 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly float3_mt4 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt4 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt4 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt4 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt4 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly float3_mt4 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // float3_mt4

#region float3_mt8

public partial struct float3_mt8 
{
    public readonly float3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt8 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt8 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly float3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public float3_mt8 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public float3_mt8 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly float3_mt8 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly float3_mt8 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public float3_mt8 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public float3_mt8 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly float3_mt8 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly float3_mt8 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly float3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly float3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public float3_mt8 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public float3_mt8 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly float3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt8 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly float3_mt8 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public float3_mt8 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public float3_mt8 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly float3_mt8 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt8 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt8 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly float3_mt8 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly float3_mt8 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly float3_mt8 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public float3_mt8 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public float3_mt8 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly float3_mt8 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly float3_mt8 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public float3_mt8 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public float3_mt8 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly float3_mt8 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt8 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt8 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly float3_mt8 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly float3_mt8 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt8 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt8 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt8 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt8 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly float3_mt8 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // float3_mt8

#region float3_mt16

public partial struct float3_mt16 
{
    public readonly float3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt16 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt16 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly float3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public float3_mt16 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public float3_mt16 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly float3_mt16 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly float3_mt16 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public float3_mt16 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public float3_mt16 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly float3_mt16 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly float3_mt16 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly float3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly float3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public float3_mt16 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public float3_mt16 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly float3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt16 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly float3_mt16 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public float3_mt16 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public float3_mt16 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly float3_mt16 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt16 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt16 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly float3_mt16 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly float3_mt16 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly float3_mt16 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public float3_mt16 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public float3_mt16 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly float3_mt16 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly float3_mt16 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public float3_mt16 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public float3_mt16 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly float3_mt16 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt16 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt16 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly float3_mt16 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly float3_mt16 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt16 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt16 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt16 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt16 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly float3_mt16 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // float3_mt16

#region float3_mt32

public partial struct float3_mt32 
{
    public readonly float3_mt32 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt32 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly float3_mt32 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt32 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly float3_mt32 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt32 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly float3_mt32 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt32 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly float3_mt32 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly float3_mt32 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public float3_mt32 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public float3_mt32 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly float3_mt32 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly float3_mt32 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public float3_mt32 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public float3_mt32 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly float3_mt32 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly float3_mt32 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly float3_mt32 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt32 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly float3_mt32 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly float3_mt32 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public float3_mt32 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public float3_mt32 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly float3_mt32 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt32 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly float3_mt32 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt32 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly float3_mt32 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly float3_mt32 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public float3_mt32 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public float3_mt32 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly float3_mt32 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt32 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly float3_mt32 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly float3_mt32 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly float3_mt32 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly float3_mt32 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public float3_mt32 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public float3_mt32 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly float3_mt32 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly float3_mt32 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public float3_mt32 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public float3_mt32 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly float3_mt32 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt32 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly float3_mt32 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly float3_mt32 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly float3_mt32 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt32 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly float3_mt32 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt32 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly float3_mt32 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly float3_mt32 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // float3_mt32

#region double3_mt4

public partial struct double3_mt4 
{
    public readonly double3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt4 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt4 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly double3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public double3_mt4 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public double3_mt4 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly double3_mt4 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly double3_mt4 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public double3_mt4 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public double3_mt4 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly double3_mt4 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly double3_mt4 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly double3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly double3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public double3_mt4 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public double3_mt4 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly double3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt4 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly double3_mt4 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public double3_mt4 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public double3_mt4 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly double3_mt4 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt4 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt4 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly double3_mt4 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly double3_mt4 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly double3_mt4 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public double3_mt4 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public double3_mt4 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly double3_mt4 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly double3_mt4 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public double3_mt4 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public double3_mt4 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly double3_mt4 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt4 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt4 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly double3_mt4 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly double3_mt4 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt4 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt4 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt4 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt4 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly double3_mt4 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // double3_mt4

#region double3_mt8

public partial struct double3_mt8 
{
    public readonly double3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt8 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt8 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly double3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public double3_mt8 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public double3_mt8 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly double3_mt8 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly double3_mt8 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public double3_mt8 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public double3_mt8 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly double3_mt8 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly double3_mt8 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly double3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly double3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public double3_mt8 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public double3_mt8 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly double3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt8 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly double3_mt8 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public double3_mt8 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public double3_mt8 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly double3_mt8 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt8 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt8 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly double3_mt8 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly double3_mt8 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly double3_mt8 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public double3_mt8 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public double3_mt8 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly double3_mt8 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly double3_mt8 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public double3_mt8 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public double3_mt8 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly double3_mt8 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt8 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt8 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly double3_mt8 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly double3_mt8 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt8 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt8 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt8 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt8 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly double3_mt8 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // double3_mt8

#region double3_mt16

public partial struct double3_mt16 
{
    public readonly double3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt16 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt16 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly double3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public double3_mt16 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public double3_mt16 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly double3_mt16 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly double3_mt16 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public double3_mt16 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public double3_mt16 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly double3_mt16 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly double3_mt16 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly double3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly double3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public double3_mt16 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public double3_mt16 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly double3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt16 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly double3_mt16 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public double3_mt16 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public double3_mt16 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly double3_mt16 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt16 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt16 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly double3_mt16 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly double3_mt16 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly double3_mt16 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public double3_mt16 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public double3_mt16 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly double3_mt16 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly double3_mt16 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public double3_mt16 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public double3_mt16 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly double3_mt16 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt16 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt16 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly double3_mt16 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly double3_mt16 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt16 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt16 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt16 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt16 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly double3_mt16 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // double3_mt16

#region double3_mt32

public partial struct double3_mt32 
{
    public readonly double3_mt32 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt32 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly double3_mt32 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt32 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly double3_mt32 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt32 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly double3_mt32 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt32 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly double3_mt32 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly double3_mt32 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public double3_mt32 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public double3_mt32 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly double3_mt32 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly double3_mt32 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public double3_mt32 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public double3_mt32 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly double3_mt32 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly double3_mt32 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly double3_mt32 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt32 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly double3_mt32 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly double3_mt32 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public double3_mt32 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public double3_mt32 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly double3_mt32 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt32 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly double3_mt32 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt32 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly double3_mt32 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly double3_mt32 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public double3_mt32 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public double3_mt32 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly double3_mt32 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt32 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly double3_mt32 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly double3_mt32 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly double3_mt32 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly double3_mt32 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public double3_mt32 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public double3_mt32 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly double3_mt32 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly double3_mt32 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public double3_mt32 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public double3_mt32 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly double3_mt32 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt32 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly double3_mt32 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly double3_mt32 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly double3_mt32 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt32 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly double3_mt32 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt32 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly double3_mt32 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly double3_mt32 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // double3_mt32

#region int3_mt4

public partial struct int3_mt4 
{
    public readonly int3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt4 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt4 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly int3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public int3_mt4 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public int3_mt4 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly int3_mt4 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly int3_mt4 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public int3_mt4 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public int3_mt4 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly int3_mt4 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly int3_mt4 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly int3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly int3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public int3_mt4 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public int3_mt4 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly int3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt4 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly int3_mt4 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public int3_mt4 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public int3_mt4 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly int3_mt4 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt4 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt4 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly int3_mt4 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly int3_mt4 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly int3_mt4 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public int3_mt4 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public int3_mt4 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly int3_mt4 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly int3_mt4 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public int3_mt4 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public int3_mt4 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly int3_mt4 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt4 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt4 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly int3_mt4 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly int3_mt4 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt4 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt4 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt4 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt4 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly int3_mt4 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // int3_mt4

#region int3_mt8

public partial struct int3_mt8 
{
    public readonly int3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt8 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt8 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly int3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public int3_mt8 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public int3_mt8 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly int3_mt8 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly int3_mt8 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public int3_mt8 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public int3_mt8 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly int3_mt8 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly int3_mt8 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly int3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly int3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public int3_mt8 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public int3_mt8 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly int3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt8 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly int3_mt8 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public int3_mt8 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public int3_mt8 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly int3_mt8 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt8 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt8 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly int3_mt8 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly int3_mt8 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly int3_mt8 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public int3_mt8 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public int3_mt8 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly int3_mt8 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly int3_mt8 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public int3_mt8 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public int3_mt8 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly int3_mt8 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt8 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt8 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly int3_mt8 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly int3_mt8 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt8 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt8 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt8 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt8 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly int3_mt8 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // int3_mt8

#region int3_mt16

public partial struct int3_mt16 
{
    public readonly int3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt16 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt16 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly int3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public int3_mt16 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public int3_mt16 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly int3_mt16 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly int3_mt16 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public int3_mt16 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public int3_mt16 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly int3_mt16 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly int3_mt16 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly int3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly int3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public int3_mt16 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public int3_mt16 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly int3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt16 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly int3_mt16 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public int3_mt16 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public int3_mt16 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly int3_mt16 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt16 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt16 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly int3_mt16 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly int3_mt16 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly int3_mt16 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public int3_mt16 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public int3_mt16 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly int3_mt16 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly int3_mt16 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public int3_mt16 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public int3_mt16 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly int3_mt16 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt16 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt16 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly int3_mt16 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly int3_mt16 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt16 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt16 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt16 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt16 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly int3_mt16 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // int3_mt16

#region int3_mt32

public partial struct int3_mt32 
{
    public readonly int3_mt32 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt32 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly int3_mt32 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt32 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly int3_mt32 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt32 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly int3_mt32 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt32 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly int3_mt32 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly int3_mt32 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public int3_mt32 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public int3_mt32 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly int3_mt32 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly int3_mt32 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public int3_mt32 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public int3_mt32 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly int3_mt32 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly int3_mt32 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly int3_mt32 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt32 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly int3_mt32 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly int3_mt32 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public int3_mt32 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public int3_mt32 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly int3_mt32 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt32 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly int3_mt32 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt32 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly int3_mt32 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly int3_mt32 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public int3_mt32 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public int3_mt32 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly int3_mt32 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt32 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly int3_mt32 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly int3_mt32 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly int3_mt32 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly int3_mt32 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public int3_mt32 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public int3_mt32 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly int3_mt32 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly int3_mt32 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public int3_mt32 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public int3_mt32 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly int3_mt32 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt32 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly int3_mt32 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly int3_mt32 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly int3_mt32 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt32 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly int3_mt32 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt32 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly int3_mt32 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly int3_mt32 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // int3_mt32

#region uint3_mt4

public partial struct uint3_mt4 
{
    public readonly uint3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt4 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt4 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly uint3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public uint3_mt4 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public uint3_mt4 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly uint3_mt4 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly uint3_mt4 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public uint3_mt4 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public uint3_mt4 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly uint3_mt4 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly uint3_mt4 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly uint3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly uint3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public uint3_mt4 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public uint3_mt4 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly uint3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt4 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly uint3_mt4 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public uint3_mt4 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public uint3_mt4 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly uint3_mt4 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt4 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt4 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly uint3_mt4 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly uint3_mt4 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly uint3_mt4 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public uint3_mt4 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public uint3_mt4 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly uint3_mt4 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly uint3_mt4 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public uint3_mt4 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public uint3_mt4 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly uint3_mt4 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt4 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt4 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly uint3_mt4 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly uint3_mt4 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt4 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt4 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt4 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt4 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly uint3_mt4 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // uint3_mt4

#region uint3_mt8

public partial struct uint3_mt8 
{
    public readonly uint3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt8 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt8 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly uint3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public uint3_mt8 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public uint3_mt8 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly uint3_mt8 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly uint3_mt8 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public uint3_mt8 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public uint3_mt8 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly uint3_mt8 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly uint3_mt8 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly uint3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly uint3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public uint3_mt8 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public uint3_mt8 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly uint3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt8 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly uint3_mt8 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public uint3_mt8 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public uint3_mt8 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly uint3_mt8 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt8 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt8 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly uint3_mt8 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly uint3_mt8 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly uint3_mt8 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public uint3_mt8 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public uint3_mt8 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly uint3_mt8 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly uint3_mt8 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public uint3_mt8 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public uint3_mt8 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly uint3_mt8 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt8 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt8 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly uint3_mt8 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly uint3_mt8 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt8 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt8 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt8 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt8 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly uint3_mt8 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // uint3_mt8

#region uint3_mt16

public partial struct uint3_mt16 
{
    public readonly uint3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt16 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt16 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly uint3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public uint3_mt16 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public uint3_mt16 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly uint3_mt16 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly uint3_mt16 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public uint3_mt16 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public uint3_mt16 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly uint3_mt16 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly uint3_mt16 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly uint3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly uint3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public uint3_mt16 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public uint3_mt16 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly uint3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt16 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly uint3_mt16 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public uint3_mt16 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public uint3_mt16 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly uint3_mt16 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt16 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt16 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly uint3_mt16 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly uint3_mt16 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly uint3_mt16 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public uint3_mt16 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public uint3_mt16 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly uint3_mt16 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly uint3_mt16 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public uint3_mt16 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public uint3_mt16 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly uint3_mt16 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt16 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt16 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly uint3_mt16 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly uint3_mt16 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt16 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt16 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt16 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt16 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly uint3_mt16 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // uint3_mt16

#region uint3_mt32

public partial struct uint3_mt32 
{
    public readonly uint3_mt32 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt32 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly uint3_mt32 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt32 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly uint3_mt32 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt32 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly uint3_mt32 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt32 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly uint3_mt32 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly uint3_mt32 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public uint3_mt32 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public uint3_mt32 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly uint3_mt32 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly uint3_mt32 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public uint3_mt32 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public uint3_mt32 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly uint3_mt32 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly uint3_mt32 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly uint3_mt32 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt32 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly uint3_mt32 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly uint3_mt32 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public uint3_mt32 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public uint3_mt32 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly uint3_mt32 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt32 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly uint3_mt32 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt32 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly uint3_mt32 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly uint3_mt32 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public uint3_mt32 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public uint3_mt32 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly uint3_mt32 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt32 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly uint3_mt32 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly uint3_mt32 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly uint3_mt32 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly uint3_mt32 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public uint3_mt32 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public uint3_mt32 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly uint3_mt32 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly uint3_mt32 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public uint3_mt32 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public uint3_mt32 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly uint3_mt32 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt32 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly uint3_mt32 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly uint3_mt32 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly uint3_mt32 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt32 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly uint3_mt32 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt32 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly uint3_mt32 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly uint3_mt32 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // uint3_mt32

#region long3_mt4

public partial struct long3_mt4 
{
    public readonly long3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt4 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt4 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly long3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public long3_mt4 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public long3_mt4 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly long3_mt4 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly long3_mt4 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public long3_mt4 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public long3_mt4 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly long3_mt4 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly long3_mt4 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly long3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly long3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public long3_mt4 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public long3_mt4 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly long3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt4 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly long3_mt4 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public long3_mt4 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public long3_mt4 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly long3_mt4 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt4 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt4 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly long3_mt4 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly long3_mt4 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly long3_mt4 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public long3_mt4 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public long3_mt4 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly long3_mt4 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly long3_mt4 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public long3_mt4 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public long3_mt4 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly long3_mt4 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt4 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt4 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly long3_mt4 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly long3_mt4 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt4 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt4 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt4 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt4 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly long3_mt4 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // long3_mt4

#region long3_mt8

public partial struct long3_mt8 
{
    public readonly long3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt8 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt8 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly long3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public long3_mt8 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public long3_mt8 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly long3_mt8 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly long3_mt8 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public long3_mt8 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public long3_mt8 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly long3_mt8 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly long3_mt8 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly long3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly long3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public long3_mt8 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public long3_mt8 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly long3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt8 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly long3_mt8 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public long3_mt8 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public long3_mt8 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly long3_mt8 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt8 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt8 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly long3_mt8 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly long3_mt8 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly long3_mt8 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public long3_mt8 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public long3_mt8 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly long3_mt8 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly long3_mt8 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public long3_mt8 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public long3_mt8 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly long3_mt8 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt8 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt8 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly long3_mt8 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly long3_mt8 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt8 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt8 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt8 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt8 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly long3_mt8 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // long3_mt8

#region long3_mt16

public partial struct long3_mt16 
{
    public readonly long3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt16 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt16 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly long3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public long3_mt16 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public long3_mt16 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly long3_mt16 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly long3_mt16 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public long3_mt16 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public long3_mt16 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly long3_mt16 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly long3_mt16 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly long3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly long3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public long3_mt16 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public long3_mt16 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly long3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt16 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly long3_mt16 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public long3_mt16 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public long3_mt16 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly long3_mt16 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt16 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt16 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly long3_mt16 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly long3_mt16 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly long3_mt16 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public long3_mt16 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public long3_mt16 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly long3_mt16 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly long3_mt16 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public long3_mt16 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public long3_mt16 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly long3_mt16 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt16 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt16 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly long3_mt16 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly long3_mt16 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt16 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt16 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt16 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt16 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly long3_mt16 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // long3_mt16

#region long3_mt32

public partial struct long3_mt32 
{
    public readonly long3_mt32 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt32 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly long3_mt32 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt32 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly long3_mt32 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt32 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly long3_mt32 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt32 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly long3_mt32 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly long3_mt32 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public long3_mt32 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public long3_mt32 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly long3_mt32 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly long3_mt32 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public long3_mt32 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public long3_mt32 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly long3_mt32 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly long3_mt32 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly long3_mt32 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt32 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly long3_mt32 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly long3_mt32 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public long3_mt32 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public long3_mt32 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly long3_mt32 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt32 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly long3_mt32 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt32 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly long3_mt32 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly long3_mt32 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public long3_mt32 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public long3_mt32 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly long3_mt32 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt32 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly long3_mt32 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly long3_mt32 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly long3_mt32 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly long3_mt32 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public long3_mt32 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public long3_mt32 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly long3_mt32 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly long3_mt32 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public long3_mt32 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public long3_mt32 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly long3_mt32 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt32 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly long3_mt32 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly long3_mt32 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly long3_mt32 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt32 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly long3_mt32 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt32 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly long3_mt32 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly long3_mt32 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // long3_mt32

#region ulong3_mt4

public partial struct ulong3_mt4 
{
    public readonly ulong3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt4 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt4 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly ulong3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public ulong3_mt4 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public ulong3_mt4 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly ulong3_mt4 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly ulong3_mt4 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public ulong3_mt4 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public ulong3_mt4 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly ulong3_mt4 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly ulong3_mt4 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly ulong3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly ulong3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public ulong3_mt4 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public ulong3_mt4 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly ulong3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt4 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly ulong3_mt4 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public ulong3_mt4 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public ulong3_mt4 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly ulong3_mt4 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt4 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt4 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly ulong3_mt4 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly ulong3_mt4 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly ulong3_mt4 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public ulong3_mt4 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public ulong3_mt4 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly ulong3_mt4 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly ulong3_mt4 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public ulong3_mt4 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public ulong3_mt4 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly ulong3_mt4 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt4 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt4 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly ulong3_mt4 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly ulong3_mt4 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt4 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt4 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt4 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt4 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly ulong3_mt4 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // ulong3_mt4

#region ulong3_mt8

public partial struct ulong3_mt8 
{
    public readonly ulong3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt8 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt8 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly ulong3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public ulong3_mt8 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public ulong3_mt8 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly ulong3_mt8 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly ulong3_mt8 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public ulong3_mt8 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public ulong3_mt8 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly ulong3_mt8 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly ulong3_mt8 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly ulong3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly ulong3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public ulong3_mt8 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public ulong3_mt8 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly ulong3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt8 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly ulong3_mt8 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public ulong3_mt8 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public ulong3_mt8 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly ulong3_mt8 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt8 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt8 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly ulong3_mt8 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly ulong3_mt8 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly ulong3_mt8 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public ulong3_mt8 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public ulong3_mt8 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly ulong3_mt8 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly ulong3_mt8 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public ulong3_mt8 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public ulong3_mt8 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly ulong3_mt8 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt8 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt8 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly ulong3_mt8 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly ulong3_mt8 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt8 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt8 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt8 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt8 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly ulong3_mt8 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // ulong3_mt8

#region ulong3_mt16

public partial struct ulong3_mt16 
{
    public readonly ulong3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt16 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt16 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly ulong3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public ulong3_mt16 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public ulong3_mt16 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly ulong3_mt16 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly ulong3_mt16 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public ulong3_mt16 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public ulong3_mt16 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly ulong3_mt16 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly ulong3_mt16 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly ulong3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly ulong3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public ulong3_mt16 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public ulong3_mt16 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly ulong3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt16 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly ulong3_mt16 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public ulong3_mt16 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public ulong3_mt16 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly ulong3_mt16 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt16 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt16 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly ulong3_mt16 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly ulong3_mt16 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly ulong3_mt16 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public ulong3_mt16 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public ulong3_mt16 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly ulong3_mt16 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly ulong3_mt16 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public ulong3_mt16 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public ulong3_mt16 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly ulong3_mt16 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt16 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt16 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly ulong3_mt16 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly ulong3_mt16 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt16 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt16 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt16 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt16 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly ulong3_mt16 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // ulong3_mt16

#region ulong3_mt32

public partial struct ulong3_mt32 
{
    public readonly ulong3_mt32 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt32 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly ulong3_mt32 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt32 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly ulong3_mt32 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt32 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly ulong3_mt32 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt32 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly ulong3_mt32 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly ulong3_mt32 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public ulong3_mt32 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public ulong3_mt32 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly ulong3_mt32 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly ulong3_mt32 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public ulong3_mt32 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public ulong3_mt32 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly ulong3_mt32 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly ulong3_mt32 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly ulong3_mt32 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt32 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly ulong3_mt32 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly ulong3_mt32 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public ulong3_mt32 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public ulong3_mt32 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly ulong3_mt32 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt32 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly ulong3_mt32 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt32 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly ulong3_mt32 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly ulong3_mt32 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public ulong3_mt32 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public ulong3_mt32 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly ulong3_mt32 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt32 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly ulong3_mt32 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly ulong3_mt32 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly ulong3_mt32 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly ulong3_mt32 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public ulong3_mt32 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public ulong3_mt32 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly ulong3_mt32 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly ulong3_mt32 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public ulong3_mt32 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public ulong3_mt32 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly ulong3_mt32 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt32 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly ulong3_mt32 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly ulong3_mt32 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly ulong3_mt32 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt32 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly ulong3_mt32 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt32 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly ulong3_mt32 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly ulong3_mt32 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // ulong3_mt32

#region b32v3_mt4

public partial struct b32v3_mt4 
{
    public readonly b32v3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt4 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt4 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b32v3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b32v3_mt4 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public b32v3_mt4 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly b32v3_mt4 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b32v3_mt4 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b32v3_mt4 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public b32v3_mt4 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly b32v3_mt4 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b32v3_mt4 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b32v3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b32v3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b32v3_mt4 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public b32v3_mt4 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly b32v3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt4 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b32v3_mt4 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public b32v3_mt4 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public b32v3_mt4 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly b32v3_mt4 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt4 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt4 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b32v3_mt4 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b32v3_mt4 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b32v3_mt4 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b32v3_mt4 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public b32v3_mt4 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly b32v3_mt4 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b32v3_mt4 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b32v3_mt4 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public b32v3_mt4 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly b32v3_mt4 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt4 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt4 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b32v3_mt4 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b32v3_mt4 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt4 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt4 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt4 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt4 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b32v3_mt4 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // b32v3_mt4

#region b32v3_mt8

public partial struct b32v3_mt8 
{
    public readonly b32v3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt8 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt8 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b32v3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b32v3_mt8 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public b32v3_mt8 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly b32v3_mt8 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b32v3_mt8 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b32v3_mt8 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public b32v3_mt8 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly b32v3_mt8 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b32v3_mt8 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b32v3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b32v3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b32v3_mt8 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public b32v3_mt8 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly b32v3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt8 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b32v3_mt8 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public b32v3_mt8 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public b32v3_mt8 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly b32v3_mt8 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt8 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt8 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b32v3_mt8 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b32v3_mt8 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b32v3_mt8 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b32v3_mt8 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public b32v3_mt8 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly b32v3_mt8 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b32v3_mt8 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b32v3_mt8 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public b32v3_mt8 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly b32v3_mt8 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt8 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt8 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b32v3_mt8 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b32v3_mt8 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt8 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt8 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt8 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt8 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b32v3_mt8 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // b32v3_mt8

#region b32v3_mt16

public partial struct b32v3_mt16 
{
    public readonly b32v3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt16 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt16 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b32v3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b32v3_mt16 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public b32v3_mt16 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly b32v3_mt16 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b32v3_mt16 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b32v3_mt16 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public b32v3_mt16 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly b32v3_mt16 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b32v3_mt16 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b32v3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b32v3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b32v3_mt16 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public b32v3_mt16 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly b32v3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt16 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b32v3_mt16 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public b32v3_mt16 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public b32v3_mt16 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly b32v3_mt16 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt16 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt16 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b32v3_mt16 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b32v3_mt16 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b32v3_mt16 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b32v3_mt16 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public b32v3_mt16 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly b32v3_mt16 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b32v3_mt16 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b32v3_mt16 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public b32v3_mt16 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly b32v3_mt16 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt16 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt16 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b32v3_mt16 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b32v3_mt16 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt16 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt16 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt16 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt16 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b32v3_mt16 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // b32v3_mt16

#region b32v3_mt32

public partial struct b32v3_mt32 
{
    public readonly b32v3_mt32 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt32 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b32v3_mt32 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt32 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b32v3_mt32 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt32 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b32v3_mt32 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt32 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b32v3_mt32 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b32v3_mt32 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b32v3_mt32 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public b32v3_mt32 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly b32v3_mt32 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b32v3_mt32 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b32v3_mt32 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public b32v3_mt32 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly b32v3_mt32 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b32v3_mt32 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b32v3_mt32 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt32 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b32v3_mt32 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b32v3_mt32 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b32v3_mt32 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public b32v3_mt32 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly b32v3_mt32 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt32 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b32v3_mt32 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt32 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b32v3_mt32 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b32v3_mt32 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public b32v3_mt32 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public b32v3_mt32 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly b32v3_mt32 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt32 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b32v3_mt32 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b32v3_mt32 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b32v3_mt32 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b32v3_mt32 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b32v3_mt32 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public b32v3_mt32 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly b32v3_mt32 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b32v3_mt32 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b32v3_mt32 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public b32v3_mt32 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly b32v3_mt32 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt32 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b32v3_mt32 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b32v3_mt32 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b32v3_mt32 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt32 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b32v3_mt32 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt32 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b32v3_mt32 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b32v3_mt32 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // b32v3_mt32

#region b64v3_mt4

public partial struct b64v3_mt4 
{
    public readonly b64v3_mt4 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt4 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt4 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt4 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt4 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt4 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt4 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt4 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt4 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b64v3_mt4 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b64v3_mt4 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public b64v3_mt4 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly b64v3_mt4 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b64v3_mt4 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b64v3_mt4 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public b64v3_mt4 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly b64v3_mt4 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b64v3_mt4 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b64v3_mt4 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt4 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt4 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b64v3_mt4 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b64v3_mt4 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public b64v3_mt4 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly b64v3_mt4 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt4 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt4 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt4 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt4 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b64v3_mt4 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public b64v3_mt4 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public b64v3_mt4 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly b64v3_mt4 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt4 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt4 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b64v3_mt4 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b64v3_mt4 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b64v3_mt4 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b64v3_mt4 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public b64v3_mt4 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly b64v3_mt4 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b64v3_mt4 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b64v3_mt4 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public b64v3_mt4 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly b64v3_mt4 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt4 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt4 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b64v3_mt4 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b64v3_mt4 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt4 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt4 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt4 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt4 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b64v3_mt4 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // b64v3_mt4

#region b64v3_mt8

public partial struct b64v3_mt8 
{
    public readonly b64v3_mt8 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt8 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt8 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt8 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt8 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt8 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt8 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt8 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt8 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b64v3_mt8 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b64v3_mt8 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public b64v3_mt8 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly b64v3_mt8 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b64v3_mt8 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b64v3_mt8 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public b64v3_mt8 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly b64v3_mt8 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b64v3_mt8 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b64v3_mt8 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt8 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt8 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b64v3_mt8 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b64v3_mt8 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public b64v3_mt8 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly b64v3_mt8 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt8 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt8 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt8 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt8 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b64v3_mt8 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public b64v3_mt8 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public b64v3_mt8 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly b64v3_mt8 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt8 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt8 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b64v3_mt8 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b64v3_mt8 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b64v3_mt8 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b64v3_mt8 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public b64v3_mt8 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly b64v3_mt8 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b64v3_mt8 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b64v3_mt8 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public b64v3_mt8 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly b64v3_mt8 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt8 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt8 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b64v3_mt8 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b64v3_mt8 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt8 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt8 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt8 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt8 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b64v3_mt8 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // b64v3_mt8

#region b64v3_mt16

public partial struct b64v3_mt16 
{
    public readonly b64v3_mt16 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt16 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt16 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt16 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt16 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt16 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt16 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt16 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt16 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b64v3_mt16 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b64v3_mt16 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public b64v3_mt16 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly b64v3_mt16 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b64v3_mt16 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b64v3_mt16 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public b64v3_mt16 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly b64v3_mt16 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b64v3_mt16 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b64v3_mt16 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt16 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt16 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b64v3_mt16 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b64v3_mt16 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public b64v3_mt16 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly b64v3_mt16 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt16 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt16 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt16 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt16 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b64v3_mt16 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public b64v3_mt16 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public b64v3_mt16 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly b64v3_mt16 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt16 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt16 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b64v3_mt16 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b64v3_mt16 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b64v3_mt16 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b64v3_mt16 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public b64v3_mt16 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly b64v3_mt16 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b64v3_mt16 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b64v3_mt16 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public b64v3_mt16 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly b64v3_mt16 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt16 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt16 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b64v3_mt16 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b64v3_mt16 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt16 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt16 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt16 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt16 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b64v3_mt16 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // b64v3_mt16

#region b64v3_mt32

public partial struct b64v3_mt32 
{
    public readonly b64v3_mt32 xxx
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt32 rrr
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, x);
    }
    public readonly b64v3_mt32 xxy
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt32 rrg
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, y);
    }
    public readonly b64v3_mt32 xxz
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt32 rrb
    {
        [MethodImpl(256 | 512)]
        get => new(x, x, z);
    }
    public readonly b64v3_mt32 xyx
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt32 rgr
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, x);
    }
    public readonly b64v3_mt32 xyy
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public readonly b64v3_mt32 rgg
    {
        [MethodImpl(256 | 512)]
        get => new(x, y, y);
    }
    public b64v3_mt32 xyz
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public b64v3_mt32 rgb
    {
        [MethodImpl(256 | 512)]
        readonly get => this;
        [MethodImpl(256 | 512)]
        set => this = value;
    }
    public readonly b64v3_mt32 xzx
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public readonly b64v3_mt32 rbr
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, x);
    }
    public b64v3_mt32 xzy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public b64v3_mt32 rbg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(x, z, y);
        [MethodImpl(256 | 512)]
        set => this = value.xzy;
    }
    public readonly b64v3_mt32 xzz
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b64v3_mt32 rbb
    {
        [MethodImpl(256 | 512)]
        get => new(x, z, z);
    }
    public readonly b64v3_mt32 yxx
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt32 grr
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, x);
    }
    public readonly b64v3_mt32 yxy
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public readonly b64v3_mt32 grg
    {
        [MethodImpl(256 | 512)]
        get => new(y, x, y);
    }
    public b64v3_mt32 yxz
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public b64v3_mt32 grb
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, x, z);
        [MethodImpl(256 | 512)]
        set => this = value.yxz;
    }
    public readonly b64v3_mt32 yyx
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt32 ggr
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, x);
    }
    public readonly b64v3_mt32 yyy
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt32 ggg
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, y);
    }
    public readonly b64v3_mt32 yyz
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public readonly b64v3_mt32 ggb
    {
        [MethodImpl(256 | 512)]
        get => new(y, y, z);
    }
    public b64v3_mt32 yzx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public b64v3_mt32 gbr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(y, z, x);
        [MethodImpl(256 | 512)]
        set => this = value.zxy;
    }
    public readonly b64v3_mt32 yzy
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt32 gbg
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, y);
    }
    public readonly b64v3_mt32 yzz
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b64v3_mt32 gbb
    {
        [MethodImpl(256 | 512)]
        get => new(y, z, z);
    }
    public readonly b64v3_mt32 zxx
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public readonly b64v3_mt32 brr
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, x);
    }
    public b64v3_mt32 zxy
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public b64v3_mt32 brg
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, x, y);
        [MethodImpl(256 | 512)]
        set => this = value.yzx;
    }
    public readonly b64v3_mt32 zxz
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public readonly b64v3_mt32 brb
    {
        [MethodImpl(256 | 512)]
        get => new(z, x, z);
    }
    public b64v3_mt32 zyx
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public b64v3_mt32 bgr
    {
        [MethodImpl(256 | 512)]
        readonly get => new(z, y, x);
        [MethodImpl(256 | 512)]
        set => this = value.zyx;
    }
    public readonly b64v3_mt32 zyy
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt32 bgg
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, y);
    }
    public readonly b64v3_mt32 zyz
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b64v3_mt32 bgb
    {
        [MethodImpl(256 | 512)]
        get => new(z, y, z);
    }
    public readonly b64v3_mt32 zzx
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt32 bbr
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, x);
    }
    public readonly b64v3_mt32 zzy
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt32 bbg
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, y);
    }
    public readonly b64v3_mt32 zzz
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
    public readonly b64v3_mt32 bbb
    {
        [MethodImpl(256 | 512)]
        get => new(z, z, z);
    }
}

#endregion // b64v3_mt32
